// Generated code for Python source for module 'pafy'
// created by Nuitka version 0.5.0.1

// This code is in part copyright 2013 Kay Hayen.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "nuitka/prelude.hpp"

#include "__modules.hpp"
#include "__constants.hpp"
#include "__helpers.hpp"

// The _module_pafy is a Python object pointer of module type.

// Note: For full compatability with CPython, every module variable access
// needs to go through it except for cases where the module cannot possibly
// have changed in the mean time.

PyObject *module_pafy;
PyDictObject *moduledict_pafy;

NUITKA_MAY_BE_UNUSED static PyObject *GET_MODULE_VALUE0( PyObject *var_name )
{
    // For module variable values, need to lookup in module dictionary or in
    // built-in dictionary.

    PyObject *result = GET_STRING_DICT_VALUE( moduledict_pafy, (Nuitka_StringObject *)var_name );

    if (likely( result != NULL ))
    {
        assertObject( result );

        return result;
    }

    result = GET_STRING_DICT_VALUE( dict_builtin, (Nuitka_StringObject *)var_name );

    if (likely( result != NULL ))
    {
        assertObject( result );

        return result;
    }

    PyErr_Format( PyExc_NameError, "global name '%s' is not defined", Nuitka_String_AsString(var_name ));
    throw PythonException();
}

NUITKA_MAY_BE_UNUSED static PyObject *GET_MODULE_VALUE1( PyObject *var_name )
{
    return INCREASE_REFCOUNT( GET_MODULE_VALUE0( var_name ) );
}

NUITKA_MAY_BE_UNUSED void static DEL_MODULE_VALUE( PyObject *var_name, bool tolerant )
{
    int status = PyDict_DelItem( (PyObject *)moduledict_pafy, var_name );

    if (unlikely( status == -1 && tolerant == false ))
    {
        PyErr_Format(
            PyExc_NameError,
            "global name '%s' is not defined",
            Nuitka_String_AsString( var_name )
        );

        throw PythonException();
    }
}

NUITKA_MAY_BE_UNUSED static PyObject *GET_LOCALS_OR_MODULE_VALUE0( PyObject *locals_dict, PyObject *var_name )
{
    PyObject *result = PyDict_GetItem( locals_dict, var_name );

    if ( result != NULL )
    {
        return result;
    }
    else
    {
        return GET_MODULE_VALUE0( var_name );
    }
}

NUITKA_MAY_BE_UNUSED static PyObject *GET_LOCALS_OR_MODULE_VALUE1( PyObject *locals_dict, PyObject *var_name )
{
    PyObject *result = PyDict_GetItem( locals_dict, var_name );

    if ( result != NULL )
    {
        return INCREASE_REFCOUNT( result );
    }
    else
    {
        return GET_MODULE_VALUE1( var_name );
    }
}

// The module function declarations.
NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_1_parseqs_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_x );


NUITKA_LOCAL_MODULE PyObject *impl_class_8_g_of_module_pafy(  );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_9__extract_smap_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_x );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_9__extract_smap_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_x );


NUITKA_LOCAL_MODULE PyObject *impl_genexpr_1_of_listcontr_2_of_function_9__extract_smap_of_module_pafy( PyObject *_python_par___iterator );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_17__solve_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalParameterVariableNoDel &closure_f, PyObjectLocalVariable &closure_x );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_17__solve_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalParameterVariableNoDel &closure_f, PyObjectLocalVariable &closure_x );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_3_of_function_17__solve_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalParameterVariableNoDel &closure_f, PyObjectLocalVariable &closure_x );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_4_of_function_17__solve_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalParameterVariableNoDel &closure_f, PyObjectLocalVariable &closure_x );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_5_of_function_17__solve_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalParameterVariableNoDel &closure_f, PyObjectLocalVariable &closure_x );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_6_of_function_17__solve_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalParameterVariableNoDel &closure_f, PyObjectLocalVariable &closure_x );


NUITKA_LOCAL_MODULE PyObject *impl_class_24_Stream_of_module_pafy(  );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_1___init___of_class_24_Stream_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_x );


NUITKA_LOCAL_MODULE PyObject *impl_genexpr_1_of_function_2_generate_filename_of_class_24_Stream_of_module_pafy( PyObject *_python_par___iterator, PyObjectSharedLocalVariable &closure_ok );


NUITKA_LOCAL_MODULE PyObject *impl_class_25_Pafy_of_module_pafy(  );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_x );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalParameterVariableNoDel &closure_self, PyObjectLocalVariable &closure_z );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_x );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_3_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalParameterVariableNoDel &closure_self, PyObjectLocalVariable &closure_z );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_4_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_x );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_5_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalParameterVariableNoDel &closure_self, PyObjectLocalVariable &closure_z );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_6_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_x );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_7_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_x );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_8_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_x );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_9_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_x );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_10_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_dash_itags, PyObjectLocalVariable &closure_x );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_11_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_dash_itags, PyObjectLocalVariable &closure_x );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_12_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_x );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_13_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_x );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_16_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_x );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_17_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_x );


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_7___repr___of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_info, PyObjectLocalVariable &closure_k );


static PyObject *MAKE_FUNCTION_function_10__extract_dash_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_10_audiostreams_of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_10_extension_of_class_24_Stream_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_11__extract_function_from_js_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_11_bitrate_of_class_24_Stream_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_11_videostreams_of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_12__extract_dictfunc_from_js_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_12_mediatype_of_class_24_Stream_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_12_oggstreams_of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_13__get_mainfunc_from_js_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_13_m4astreams_of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_13_notes_of_class_24_Stream_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_14__get_other_funcs_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_14_filename_of_class_24_Stream_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_14_title_of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_15__getval_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_15_author_of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_15_url_of_class_24_Stream_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_16__get_func_from_call_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_16_rating_of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_16_url_https_of_class_24_Stream_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_17___repr___of_class_24_Stream_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_17__solve_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_17_length_of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_18__decodesig_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_18_get_filesize_of_class_24_Stream_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_18_viewcount_of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_19_bigthumb_of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_19_cancel_of_class_24_Stream_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_19_remux_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_1___init___of_class_24_Stream_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_1__get_lst_of_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_1__sortkey_of_function_30_getbest_of_class_25_Pafy_of_module_pafy( PyObjectSharedLocalVariable &closure_ftypestrict, PyObjectSharedLocalVariable &closure_preftype );


// This structure is for attachment as self of function_1__sortkey_of_function_30_getbest_of_class_25_Pafy_of_module_pafy.
// It is allocated at the time the function object is created.
struct _context_function_1__sortkey_of_function_30_getbest_of_class_25_Pafy_of_module_pafy_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable closure_ftypestrict;
    PyObjectClosureVariable closure_preftype;
};

static void _context_function_1__sortkey_of_function_30_getbest_of_class_25_Pafy_of_module_pafy_destructor( void *context_voidptr )
{
    _context_function_1__sortkey_of_function_30_getbest_of_class_25_Pafy_of_module_pafy_t *_python_context = (_context_function_1__sortkey_of_function_30_getbest_of_class_25_Pafy_of_module_pafy_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_1__sortkey_of_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy( PyObjectSharedLocalVariable &closure_ftypestrict, PyObjectSharedLocalVariable &closure_preftype );


// This structure is for attachment as self of function_1__sortkey_of_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy.
// It is allocated at the time the function object is created.
struct _context_function_1__sortkey_of_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy_t
{
    // The function can access a read-only closure of the creator.
    PyObjectClosureVariable closure_ftypestrict;
    PyObjectClosureVariable closure_preftype;
};

static void _context_function_1__sortkey_of_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy_destructor( void *context_voidptr )
{
    _context_function_1__sortkey_of_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy_t *_python_context = (_context_function_1__sortkey_of_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy_t *)context_voidptr;



    delete _python_context;
}


static PyObject *MAKE_FUNCTION_function_1_parseqs_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_20_bigthumbhd_of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_20_fetch_cached_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_21_download_of_class_24_Stream_of_module_pafy( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_21_prune_files_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_21_thumb_of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_22_duration_of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_22_get_js_sm_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_23__make_url_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_23_keywords_of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_24_category_of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_25_description_of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_26_username_of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_27_get_playlist_of_module_pafy( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_27_published_of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_28_likes_of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_29_dislikes_of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_2___init___of_class_25_Pafy_of_module_pafy( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_2_fetch_decode_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_2_generate_filename_of_class_24_Stream_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_30_getbest_of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_32_populate_from_playlist_of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_3_fetch_basic_of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_3_rawbitrate_of_class_24_Stream_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_4_new_of_module_pafy( PyObject *defaults );


static PyObject *MAKE_FUNCTION_function_4_threed_of_class_24_Stream_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_5__fetch_gdata_of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_5_get_video_info_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_5_itag_of_class_24_Stream_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_6__process_streams_of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_6_get_video_gdata_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_6_resolution_of_class_24_Stream_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_7___repr___of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_7_dimensions_of_class_24_Stream_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_7_extract_video_id_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_8_quality_of_class_24_Stream_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_8_streams_of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_9__extract_smap_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_9_allstreams_of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_function_9_title_of_class_24_Stream_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_lambda_14_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_lambda_15_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_lambda_1_lambda_of_class_25_Pafy_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_lambda_1_lambda_of_function_21_prune_files_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_lambda_20_lambda_of_class_24_Stream_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_lambda_26_lambda_of_module_pafy(  );


static PyObject *MAKE_FUNCTION_lambda_3_lambda_of_module_pafy(  );


// The module function definitions.
static PyObject *impl_function_1_parseqs_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_data )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_data( const_str_plain_data, _python_par_data );
    PyObjectLocalVariable var_out( const_str_plain_out );
    PyObjectLocalVariable var_k( const_str_plain_k );
    PyObjectLocalVariable var_v( const_str_plain_v );
    PyObjectLocalVariable var_x( const_str_plain_x );
    PyObjectTempVariable tmp_for_loop_1__iter_value;
    PyObjectTempVariable tmp_tuple_unpack_1__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_1__element_1;
    PyObjectTempVariable tmp_tuple_unpack_1__element_2;

    // Actual function code.
    static PyFrameObject *frame_function_1_parseqs_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_1_parseqs_of_module_pafy ) )
    {
        if ( frame_function_1_parseqs_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1_parseqs_of_module_pafy" );
#endif
            Py_DECREF( frame_function_1_parseqs_of_module_pafy );
        }

        frame_function_1_parseqs_of_module_pafy = MAKE_FRAME( codeobj_e23049321c8daec7a6d5c75b9ed7c2c3, module_pafy );
    }

    FrameGuard frame_guard( frame_function_1_parseqs_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_1_parseqs_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 70 );
        {
            PyObjectTempKeeper1 cmp1;
            if ( ( cmp1.assign( BUILTIN_TYPE1( par_data.asObject0() ) ), RICH_COMPARE_BOOL_EQ( cmp1.asObject0(), GET_MODULE_VALUE0( const_str_plain_uni ) ) ) )
            {
                frame_guard.setLineNumber( 71 );
                {
                    PyObjectTempKeeper0 call1;
                    return ( call1.assign( GET_MODULE_VALUE0( const_str_plain_parse_qs ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), par_data.asObject0() ) );
                }
            }
            else
            {
                frame_guard.setLineNumber( 73 );
                if ( RICH_COMPARE_BOOL_EQ( GET_MODULE_VALUE0( const_str_plain_pyver ), const_int_pos_3 ) )
                {
                    frame_guard.setLineNumber( 74 );
                    par_data.assign1( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_data.asObject0(), const_str_plain_decode ) ).asObject0(), const_unicode_plain_utf8 ) );
                    frame_guard.setLineNumber( 75 );
                    {
                        PyObjectTempKeeper0 call1;
                        par_data.assign1( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_parse_qs ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), par_data.asObject0() ) ) );
                    }
                }
                else
                {
                    frame_guard.setLineNumber( 78 );
                    {
                        PyObjectTempKeeper0 call1;
                        par_data.assign1( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_parse_qs ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), par_data.asObject0() ) ) );
                    }
                    var_out.assign1( PyDict_New() );
                    frame_guard.setLineNumber( 81 );
                    PyObjectTemporaryWithDel tmp_for_loop_1__for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_data.asObject0(), const_str_plain_items ) ).asObject0() ) ).asObject0() ) );
                    PythonExceptionKeeper _caught_1;
#if PYTHON_VERSION < 300
                    int _at_lineno_1 = 0;
#endif


                    try
                    {
                        // Tried block:
                        while( true )
                        {
                            frame_guard.setLineNumber( 81 );
                            PyObject *_tmp_unpack_2 = ITERATOR_NEXT( tmp_for_loop_1__for_iterator.asObject0() );

                            if ( _tmp_unpack_2 == NULL )
                            {
                                break;
                            }
                            tmp_for_loop_1__iter_value.assign1( _tmp_unpack_2 );
                            PythonExceptionKeeper _caught_3;
#if PYTHON_VERSION < 300
                            int _at_lineno_3 = 0;
#endif


                            try
                            {
                                // Tried block:
                                tmp_tuple_unpack_1__source_iter.assign1( MAKE_ITERATOR( tmp_for_loop_1__iter_value.asObject0() ) );
                                tmp_tuple_unpack_1__element_1.assign1( UNPACK_NEXT( tmp_tuple_unpack_1__source_iter.asObject0(), 0 ) );
                                tmp_tuple_unpack_1__element_2.assign1( UNPACK_NEXT( tmp_tuple_unpack_1__source_iter.asObject0(), 1 ) );
                                UNPACK_ITERATOR_CHECK( tmp_tuple_unpack_1__source_iter.asObject0(), 2 );
                                var_k.assign0( tmp_tuple_unpack_1__element_1.asObject0() );
                                var_v.assign0( tmp_tuple_unpack_1__element_2.asObject0() );
                            }
                            catch ( PythonException &_exception )
                            {
#if PYTHON_VERSION >= 300
                                if ( !_exception.hasTraceback() )
                                {
                                    _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                                }
                                else
                                {
                                    _exception.addTraceback( frame_guard.getFrame0() );
                                }
#else
                                _at_lineno_3 = frame_guard.getLineNumber();
#endif

                                _caught_3.save( _exception );

#if PYTHON_VERSION >= 300
                                frame_guard.preserveExistingException();

                                _exception.toExceptionHandler();
#endif
                            }

                            // Final block:
                            tmp_tuple_unpack_1__source_iter.del( true );
                            tmp_tuple_unpack_1__element_1.del( true );
                            tmp_tuple_unpack_1__element_2.del( true );
#if PYTHON_VERSION < 300
                            if ( _at_lineno_3 != 0 )
                            {
                               frame_guard.setLineNumber( _at_lineno_3 );
                            }
#endif
                            _caught_3.rethrow();
                            // Final end
                            frame_guard.setLineNumber( 82 );
                            var_k.assign1( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_k.asObject0(), const_str_plain_decode ) ).asObject0(), const_unicode_plain_utf8 ) );
                            frame_guard.setLineNumber( 83 );
                            {
                                PyObjectTemporary tmp_identifier( impl_listcontr_1_of_function_1_parseqs_of_module_pafy( MAKE_ITERATOR( var_v.asObject0() ), var_x ) );
                                PyObject *tmp_subscribed = var_out.asObject0();
                                SET_SUBSCRIPT( tmp_identifier.asObject0(), tmp_subscribed, var_k.asObject0() );
                            }
                            frame_guard.setLineNumber( 84 );
                            par_data.assign0( var_out.asObject0() );

                            CONSIDER_THREADING();
                        }
                    }
                    catch ( PythonException &_exception )
                    {
#if PYTHON_VERSION >= 300
                        if ( !_exception.hasTraceback() )
                        {
                            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                        }
                        else
                        {
                            _exception.addTraceback( frame_guard.getFrame0() );
                        }
#else
                        _at_lineno_1 = frame_guard.getLineNumber();
#endif

                        _caught_1.save( _exception );

#if PYTHON_VERSION >= 300
                        frame_guard.preserveExistingException();

                        _exception.toExceptionHandler();
#endif
                    }

                    // Final block:
                    tmp_for_loop_1__iter_value.del( true );
                    tmp_for_loop_1__for_iterator.del( false );
#if PYTHON_VERSION < 300
                    if ( _at_lineno_1 != 0 )
                    {
                       frame_guard.setLineNumber( _at_lineno_1 );
                    }
#endif
                    _caught_1.rethrow();
                    // Final end
                }
            }
        }
        frame_guard.setLineNumber( 86 );
        return par_data.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_data.updateLocalsDict( var_x.updateLocalsDict( var_v.updateLocalsDict( var_k.updateLocalsDict( var_out.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1_parseqs_of_module_pafy )
        {
           Py_DECREF( frame_function_1_parseqs_of_module_pafy );
           frame_function_1_parseqs_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1_parseqs_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_data = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "parseqs() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_data == key )
            {
                assert( _python_par_data == NULL );
                _python_par_data = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_data, key ) )
            {
                assert( _python_par_data == NULL );
                _python_par_data = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "parseqs() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_data != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_data = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_data == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_data = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_data == NULL ))
    {
        PyObject *values[] = { _python_par_data };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_1_parseqs_of_module_pafy( self, _python_par_data );

error_exit:;

    Py_XDECREF( _python_par_data );

    return NULL;
}

static PyObject *dparse_function_1_parseqs_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_1_parseqs_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1_parseqs_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_1_parseqs_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par___iterator( const_str_plain___iterator, _python_par___iterator );
    PyObjectTempVariable tmp_iter_value_0;

    // Actual function code.
    PyObjectTemporary tmp_result( PyList_New( 0 ) );
    FrameGuardVeryLight frame_guard;

    frame_guard.setLineNumber( 83 );
    PyObject *tmp_contraction_iter_0 = par___iterator.asObject0();
    while( true )
    {
        frame_guard.setLineNumber( 83 );
        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( tmp_contraction_iter_0 );

        if ( _tmp_unpack_1 == NULL )
        {
            break;
        }
        tmp_iter_value_0.assign1( _tmp_unpack_1 );
        closure_x.assign0( tmp_iter_value_0.asObject0() );
        APPEND_TO_LIST( tmp_result.asObject0(), PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( closure_x.asObject0(), const_str_plain_decode ) ).asObject0(), const_unicode_plain_utf8 ) ).asObject0() ), Py_None;

        CONSIDER_THREADING();
    }
    tmp_contraction_iter_0 = NULL;
    return tmp_result.asObject1();
}


static PyObject *impl_function_2_fetch_decode_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_url, PyObject *_python_par_encoding )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_url( const_str_plain_url, _python_par_url );
    PyObjectLocalParameterVariableNoDel par_encoding( const_str_plain_encoding, _python_par_encoding );
    PyObjectLocalVariable var_req( const_str_plain_req );
    PyObjectLocalVariable var_ct( const_str_plain_ct );

    // Actual function code.
    static PyFrameObject *frame_function_2_fetch_decode_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_2_fetch_decode_of_module_pafy ) )
    {
        if ( frame_function_2_fetch_decode_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_fetch_decode_of_module_pafy" );
#endif
            Py_DECREF( frame_function_2_fetch_decode_of_module_pafy );
        }

        frame_function_2_fetch_decode_of_module_pafy = MAKE_FRAME( codeobj_b7e4a575fd0c43e0bbc5307bb1445687, module_pafy );
    }

    FrameGuard frame_guard( frame_function_2_fetch_decode_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_2_fetch_decode_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 91 );
        {
            PyObjectTempKeeper1 call1;
            var_req.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_g ), const_str_plain_opener ) ).asObject0(), const_str_plain_open ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), par_url.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 92 );
        var_ct.assign1( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_req.asObject0(), const_str_plain_headers ) ).asObject0(), const_unicode_digest_cc0af601bfd673427a8abb171f62c707 ) );
        frame_guard.setLineNumber( 94 );
        if ( CHECK_IF_TRUE( par_encoding.asObject0() ) )
        {
            frame_guard.setLineNumber( 95 );
            {
                PyObjectTempKeeper1 call1;
                return ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_req.asObject0(), const_str_plain_read ) ).asObject0() ) ).asObject0(), const_str_plain_decode ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), par_encoding.asObject0() ) );
            }
        }
        else
        {
            frame_guard.setLineNumber( 97 );
            if ( SEQUENCE_CONTAINS_BOOL( const_unicode_digest_11cbe3b0f2400e85aadba3d1eef170cb, var_ct.asObject0() ) )
            {
                frame_guard.setLineNumber( 98 );
                {
                    PyObjectTempKeeper1 call1;
                    par_encoding.assign1( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_re ), const_str_plain_search ) ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), const_unicode_digest_4870d8937b742e5165e8fc322eda7b0c, var_ct.asObject0() ) ) ).asObject0(), const_str_plain_group ) ).asObject0(), const_int_pos_1 ) );
                }
                frame_guard.setLineNumber( 99 );
                {
                    PyObjectTempKeeper0 call1;
                    DECREASE_REFCOUNT( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_dbg ) ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), const_unicode_digest_9912de03e61d6e65369b3189b4114e95, var_ct.asObject0() ) ) );
                }
                frame_guard.setLineNumber( 100 );
                {
                    PyObjectTempKeeper1 call1;
                    return ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_req.asObject0(), const_str_plain_read ) ).asObject0() ) ).asObject0(), const_str_plain_decode ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), par_encoding.asObject0() ) );
                }
            }
            else
            {
                frame_guard.setLineNumber( 103 );
                DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS1( GET_MODULE_VALUE0( const_str_plain_dbg ), const_unicode_digest_031dc0df5ccb1700996e90bb7950db02 ) );
                frame_guard.setLineNumber( 104 );
                return CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_req.asObject0(), const_str_plain_read ) ).asObject0() );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_encoding.updateLocalsDict( par_url.updateLocalsDict( var_ct.updateLocalsDict( var_req.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_fetch_decode_of_module_pafy )
        {
           Py_DECREF( frame_function_2_fetch_decode_of_module_pafy );
           frame_function_2_fetch_decode_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_fetch_decode_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_url = NULL;
    PyObject *_python_par_encoding = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "fetch_decode() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_url == key )
            {
                assert( _python_par_url == NULL );
                _python_par_url = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_encoding == key )
            {
                assert( _python_par_encoding == NULL );
                _python_par_encoding = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_url, key ) )
            {
                assert( _python_par_url == NULL );
                _python_par_url = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_encoding, key ) )
            {
                assert( _python_par_encoding == NULL );
                _python_par_encoding = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "fetch_decode() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_url != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_url = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_url == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_url = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_encoding != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_encoding = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_encoding == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_encoding = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_url == NULL || _python_par_encoding == NULL ))
    {
        PyObject *values[] = { _python_par_url, _python_par_encoding };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_2_fetch_decode_of_module_pafy( self, _python_par_url, _python_par_encoding );

error_exit:;

    Py_XDECREF( _python_par_url );
    Py_XDECREF( _python_par_encoding );

    return NULL;
}

static PyObject *dparse_function_2_fetch_decode_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_2_fetch_decode_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_fetch_decode_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_lambda_3_lambda_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_x( const_str_plain_x, _python_par_x );

    // Actual function code.
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_lambda_3_lambda_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_x = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_x == key )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_x, key ) )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "<lambda>() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_x != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_x = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_x == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_x = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_x == NULL ))
    {
        PyObject *values[] = { _python_par_x };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_lambda_3_lambda_of_module_pafy( self, _python_par_x );

error_exit:;

    Py_XDECREF( _python_par_x );

    return NULL;
}

static PyObject *dparse_lambda_3_lambda_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_lambda_3_lambda_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_lambda_3_lambda_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_new_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_url, PyObject *_python_par_basic, PyObject *_python_par_gdata, PyObject *_python_par_signature, PyObject *_python_par_size, PyObject *_python_par_callback )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_url( const_str_plain_url, _python_par_url );
    PyObjectLocalParameterVariableNoDel par_basic( const_str_plain_basic, _python_par_basic );
    PyObjectLocalParameterVariableNoDel par_gdata( const_str_plain_gdata, _python_par_gdata );
    PyObjectLocalParameterVariableNoDel par_signature( const_str_plain_signature, _python_par_signature );
    PyObjectLocalParameterVariableNoDel par_size( const_str_plain_size, _python_par_size );
    PyObjectLocalParameterVariableNoDel par_callback( const_str_plain_callback, _python_par_callback );

    // Actual function code.
    static PyFrameObject *frame_function_4_new_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_4_new_of_module_pafy ) )
    {
        if ( frame_function_4_new_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_new_of_module_pafy" );
#endif
            Py_DECREF( frame_function_4_new_of_module_pafy );
        }

        frame_function_4_new_of_module_pafy = MAKE_FRAME( codeobj_3cba3e365665caf82af8c76715344ca1, module_pafy );
    }

    FrameGuard frame_guard( frame_function_4_new_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_4_new_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 134 );
        if ( (!( CHECK_IF_TRUE( par_signature.asObject0() ) )) )
        {
            frame_guard.setLineNumber( 135 );
            DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_logging ), const_str_plain_warning ) ).asObject0(), const_unicode_digest_ba14b6960f6cd0d9b7c11d713bee73d7 ) );
        }
        frame_guard.setLineNumber( 138 );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper0 call2;
            PyObjectTempKeeper0 call3;
            PyObjectTempKeeper0 call4;
            PyObjectTempKeeper0 call5;
            PyObjectTempKeeper0 call6;
            return ( call1.assign( GET_MODULE_VALUE0( const_str_plain_Pafy ) ), call2.assign( par_url.asObject0() ), call3.assign( par_basic.asObject0() ), call4.assign( par_gdata.asObject0() ), call5.assign( par_signature.asObject0() ), call6.assign( par_size.asObject0() ), CALL_FUNCTION_WITH_ARGS6( call1.asObject0(), call2.asObject0(), call3.asObject0(), call4.asObject0(), call5.asObject0(), call6.asObject0(), par_callback.asObject0() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_callback.updateLocalsDict( par_size.updateLocalsDict( par_signature.updateLocalsDict( par_gdata.updateLocalsDict( par_basic.updateLocalsDict( par_url.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_4_new_of_module_pafy )
        {
           Py_DECREF( frame_function_4_new_of_module_pafy );
           frame_function_4_new_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_new_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_url = NULL;
    PyObject *_python_par_basic = NULL;
    PyObject *_python_par_gdata = NULL;
    PyObject *_python_par_signature = NULL;
    PyObject *_python_par_size = NULL;
    PyObject *_python_par_callback = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "new() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_url == key )
            {
                assert( _python_par_url == NULL );
                _python_par_url = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_basic == key )
            {
                assert( _python_par_basic == NULL );
                _python_par_basic = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_gdata == key )
            {
                assert( _python_par_gdata == NULL );
                _python_par_gdata = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_signature == key )
            {
                assert( _python_par_signature == NULL );
                _python_par_signature = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_size == key )
            {
                assert( _python_par_size == NULL );
                _python_par_size = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_callback == key )
            {
                assert( _python_par_callback == NULL );
                _python_par_callback = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_url, key ) )
            {
                assert( _python_par_url == NULL );
                _python_par_url = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_basic, key ) )
            {
                assert( _python_par_basic == NULL );
                _python_par_basic = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_gdata, key ) )
            {
                assert( _python_par_gdata == NULL );
                _python_par_gdata = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_signature, key ) )
            {
                assert( _python_par_signature == NULL );
                _python_par_signature = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_size, key ) )
            {
                assert( _python_par_size == NULL );
                _python_par_size = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_callback, key ) )
            {
                assert( _python_par_callback == NULL );
                _python_par_callback = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "new() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 6 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_url != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_url = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_url == NULL )
    {
        if ( 0 + self->m_defaults_given >= 6  )
        {
            _python_par_url = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_basic != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_basic = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_basic == NULL )
    {
        if ( 1 + self->m_defaults_given >= 6  )
        {
            _python_par_basic = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_gdata != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_gdata = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_gdata == NULL )
    {
        if ( 2 + self->m_defaults_given >= 6  )
        {
            _python_par_gdata = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 3 < args_given ))
    {
         if (unlikely( _python_par_signature != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 3 );
             goto error_exit;
         }

        _python_par_signature = INCREASE_REFCOUNT( args[ 3 ] );
    }
    else if ( _python_par_signature == NULL )
    {
        if ( 3 + self->m_defaults_given >= 6  )
        {
            _python_par_signature = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 3 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 4 < args_given ))
    {
         if (unlikely( _python_par_size != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 4 );
             goto error_exit;
         }

        _python_par_size = INCREASE_REFCOUNT( args[ 4 ] );
    }
    else if ( _python_par_size == NULL )
    {
        if ( 4 + self->m_defaults_given >= 6  )
        {
            _python_par_size = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 4 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 5 < args_given ))
    {
         if (unlikely( _python_par_callback != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 5 );
             goto error_exit;
         }

        _python_par_callback = INCREASE_REFCOUNT( args[ 5 ] );
    }
    else if ( _python_par_callback == NULL )
    {
        if ( 5 + self->m_defaults_given >= 6  )
        {
            _python_par_callback = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 5 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_url == NULL || _python_par_basic == NULL || _python_par_gdata == NULL || _python_par_signature == NULL || _python_par_size == NULL || _python_par_callback == NULL ))
    {
        PyObject *values[] = { _python_par_url, _python_par_basic, _python_par_gdata, _python_par_signature, _python_par_size, _python_par_callback };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_4_new_of_module_pafy( self, _python_par_url, _python_par_basic, _python_par_gdata, _python_par_signature, _python_par_size, _python_par_callback );

error_exit:;

    Py_XDECREF( _python_par_url );
    Py_XDECREF( _python_par_basic );
    Py_XDECREF( _python_par_gdata );
    Py_XDECREF( _python_par_signature );
    Py_XDECREF( _python_par_size );
    Py_XDECREF( _python_par_callback );

    return NULL;
}

static PyObject *dparse_function_4_new_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 6 )
    {
        return impl_function_4_new_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_new_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_get_video_info_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_video_id, PyObject *_python_par_newurl )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_video_id( const_str_plain_video_id, _python_par_video_id );
    PyObjectLocalParameterVariableNoDel par_newurl( const_str_plain_newurl, _python_par_newurl );
    PyObjectLocalVariable var_url( const_str_plain_url );
    PyObjectLocalVariable var_info( const_str_plain_info );
    PyObjectLocalVariable var_reason( const_str_plain_reason );

    // Actual function code.
    static PyFrameObject *frame_function_5_get_video_info_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_5_get_video_info_of_module_pafy ) )
    {
        if ( frame_function_5_get_video_info_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_get_video_info_of_module_pafy" );
#endif
            Py_DECREF( frame_function_5_get_video_info_of_module_pafy );
        }

        frame_function_5_get_video_info_of_module_pafy = MAKE_FRAME( codeobj_8d2a8f3e4c50bce1d7884ea4103cc3f5, module_pafy );
    }

    FrameGuard frame_guard( frame_function_5_get_video_info_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_5_get_video_info_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 143 );
        {
            PyObjectTempKeeper1 op1;
            var_url.assign1( ( op1.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_g ), const_str_plain_urls ) ).asObject0(), const_unicode_plain_vidinfo ) ), BINARY_OPERATION_REMAINDER( op1.asObject0(), par_video_id.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 144 );
        var_url.assign0( ( CHECK_IF_TRUE( par_newurl.asObject0() ) ? par_newurl.asObject0() : var_url.asObject0() ) );
        frame_guard.setLineNumber( 145 );
        {
            PyObjectTempKeeper0 call1;
            var_info.assign1( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_fetch_decode ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), var_url.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 146 );
        {
            PyObjectTempKeeper0 call1;
            var_info.assign1( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_parseqs ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), var_info.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 147 );
        DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS1( GET_MODULE_VALUE0( const_str_plain_dbg ), const_unicode_digest_f1cd22c05f35176a25182a57ce7772d9 ) );
        frame_guard.setLineNumber( 149 );
        if ( RICH_COMPARE_BOOL_EQ( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( LOOKUP_SUBSCRIPT( var_info.asObject0(), const_unicode_plain_status ) ).asObject0(), const_int_0, 0 ) ).asObject0(), const_unicode_plain_fail ) )
        {
            frame_guard.setLineNumber( 150 );
            {
                PyObjectTempKeeper1 keeper_0;
                var_reason.assign0( ( CHECK_IF_TRUE( keeper_0.assign( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( LOOKUP_SUBSCRIPT( var_info.asObject0(), const_unicode_plain_reason ) ).asObject0(), const_int_0, 0 ) ) ) ? PyObjectTemporary( keeper_0.asObject1() ).asObject0() : const_unicode_digest_323ea845ecdc4454af9b36d25ef68096 ) );
            }
            frame_guard.setLineNumber( 151 );
            {
                PyObjectTempKeeper0 make_tuple1;
                RAISE_EXCEPTION_WITH_TYPE( PyObjectTemporary( CALL_FUNCTION_WITH_POSARGS( PyExc_IOError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( const_unicode_digest_5dc009d3daba3e47cd0798a3dce1d299, PyObjectTemporary( ( make_tuple1.assign( var_reason.asObject0() ), MAKE_TUPLE2( make_tuple1.asObject0(), par_video_id.asObject0() ) ) ).asObject0() ) ).asObject0() ) ).asObject0() ) ).asObject0(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject0() );
            }
        }
        frame_guard.setLineNumber( 153 );
        return var_info.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_newurl.updateLocalsDict( par_video_id.updateLocalsDict( var_reason.updateLocalsDict( var_info.updateLocalsDict( var_url.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_5_get_video_info_of_module_pafy )
        {
           Py_DECREF( frame_function_5_get_video_info_of_module_pafy );
           frame_function_5_get_video_info_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_get_video_info_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_video_id = NULL;
    PyObject *_python_par_newurl = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_video_info() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_video_id == key )
            {
                assert( _python_par_video_id == NULL );
                _python_par_video_id = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_newurl == key )
            {
                assert( _python_par_newurl == NULL );
                _python_par_newurl = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_video_id, key ) )
            {
                assert( _python_par_video_id == NULL );
                _python_par_video_id = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_newurl, key ) )
            {
                assert( _python_par_newurl == NULL );
                _python_par_newurl = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_video_info() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_video_id != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_video_id = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_video_id == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_video_id = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_newurl != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_newurl = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_newurl == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_newurl = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_video_id == NULL || _python_par_newurl == NULL ))
    {
        PyObject *values[] = { _python_par_video_id, _python_par_newurl };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_5_get_video_info_of_module_pafy( self, _python_par_video_id, _python_par_newurl );

error_exit:;

    Py_XDECREF( _python_par_video_id );
    Py_XDECREF( _python_par_newurl );

    return NULL;
}

static PyObject *dparse_function_5_get_video_info_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_5_get_video_info_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5_get_video_info_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6_get_video_gdata_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_video_id )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_video_id( const_str_plain_video_id, _python_par_video_id );
    PyObjectLocalVariable var_url( const_str_plain_url );
    PyObjectLocalVariable var_gdata( const_str_plain_gdata );

    // Actual function code.
    static PyFrameObject *frame_function_6_get_video_gdata_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_6_get_video_gdata_of_module_pafy ) )
    {
        if ( frame_function_6_get_video_gdata_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6_get_video_gdata_of_module_pafy" );
#endif
            Py_DECREF( frame_function_6_get_video_gdata_of_module_pafy );
        }

        frame_function_6_get_video_gdata_of_module_pafy = MAKE_FRAME( codeobj_152d45bfe6d0414beb14294012a1bafd, module_pafy );
    }

    FrameGuard frame_guard( frame_function_6_get_video_gdata_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_6_get_video_gdata_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 158 );
        DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_new ), const_str_plain_callback ) ).asObject0(), const_unicode_digest_f3d0551f96d9a5f3398ebfef91283de0 ) );
        frame_guard.setLineNumber( 159 );
        {
            PyObjectTempKeeper1 op1;
            var_url.assign1( ( op1.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_g ), const_str_plain_urls ) ).asObject0(), const_unicode_plain_gdata ) ), BINARY_OPERATION_REMAINDER( op1.asObject0(), par_video_id.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 160 );
        {
            PyObjectTempKeeper0 call1;
            var_gdata.assign1( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_fetch_decode ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), var_url.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 161 );
        DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS1( GET_MODULE_VALUE0( const_str_plain_dbg ), const_unicode_digest_0f4c5889eb763d723c2562b30f9809e2 ) );
        frame_guard.setLineNumber( 162 );
        DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_new ), const_str_plain_callback ) ).asObject0(), const_unicode_digest_0f4c5889eb763d723c2562b30f9809e2 ) );
        frame_guard.setLineNumber( 163 );
        return var_gdata.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_video_id.updateLocalsDict( var_gdata.updateLocalsDict( var_url.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_6_get_video_gdata_of_module_pafy )
        {
           Py_DECREF( frame_function_6_get_video_gdata_of_module_pafy );
           frame_function_6_get_video_gdata_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_6_get_video_gdata_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_video_id = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_video_gdata() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_video_id == key )
            {
                assert( _python_par_video_id == NULL );
                _python_par_video_id = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_video_id, key ) )
            {
                assert( _python_par_video_id == NULL );
                _python_par_video_id = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_video_gdata() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_video_id != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_video_id = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_video_id == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_video_id = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_video_id == NULL ))
    {
        PyObject *values[] = { _python_par_video_id };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_6_get_video_gdata_of_module_pafy( self, _python_par_video_id );

error_exit:;

    Py_XDECREF( _python_par_video_id );

    return NULL;
}

static PyObject *dparse_function_6_get_video_gdata_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_6_get_video_gdata_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6_get_video_gdata_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_7_extract_video_id_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_url )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_url( const_str_plain_url, _python_par_url );
    PyObjectLocalVariable var_ok( const_str_plain_ok );
    PyObjectLocalVariable var_regx( const_str_plain_regx );
    PyObjectLocalVariable var_m( const_str_plain_m );
    PyObjectLocalVariable var_err( const_str_plain_err );
    PyObjectLocalVariable var_vidid( const_str_plain_vidid );

    // Actual function code.
    var_ok.assign0( const_tuple_bf31d0b73dd43f74fdaa4bdcb31dc1ad_tuple );
    static PyFrameObject *frame_function_7_extract_video_id_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_7_extract_video_id_of_module_pafy ) )
    {
        if ( frame_function_7_extract_video_id_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_7_extract_video_id_of_module_pafy" );
#endif
            Py_DECREF( frame_function_7_extract_video_id_of_module_pafy );
        }

        frame_function_7_extract_video_id_of_module_pafy = MAKE_FRAME( codeobj_fe433bff9bf50889b3d8854690290777, module_pafy );
    }

    FrameGuard frame_guard( frame_function_7_extract_video_id_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_7_extract_video_id_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 169 );
        {
            PyObjectTempKeeper1 call1;
            var_regx.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_re ), const_str_plain_compile ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( const_unicode_digest_e13a609bf8c10c04ae78fc6a0cecca72, var_ok.asObject0() ) ).asObject0() ) ) );
        }
        frame_guard.setLineNumber( 170 );
        par_url.assign1( TO_STR( par_url.asObject0() ) );
        frame_guard.setLineNumber( 171 );
        {
            PyObjectTempKeeper1 call1;
            var_m.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( var_regx.asObject0(), const_str_plain_search ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), par_url.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 173 );
        if ( (!( CHECK_IF_TRUE( var_m.asObject0() ) )) )
        {
            var_err.assign0( const_unicode_digest_ba825fa6c8307a430d1ef76a8754b3c8 );
            frame_guard.setLineNumber( 175 );
            {
                PyObjectTempKeeper0 op1;
                RAISE_EXCEPTION_WITH_TYPE( PyObjectTemporary( CALL_FUNCTION_WITH_POSARGS( PyExc_ValueError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( ( op1.assign( var_err.asObject0() ), BINARY_OPERATION_REMAINDER( op1.asObject0(), par_url.asObject0() ) ) ).asObject0() ) ).asObject0() ) ).asObject0(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject0() );
            }
        }
        frame_guard.setLineNumber( 177 );
        var_vidid.assign1( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_m.asObject0(), const_str_plain_group ) ).asObject0(), const_int_pos_1 ) );
        frame_guard.setLineNumber( 178 );
        return var_vidid.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_url.updateLocalsDict( var_vidid.updateLocalsDict( var_err.updateLocalsDict( var_m.updateLocalsDict( var_regx.updateLocalsDict( var_ok.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_7_extract_video_id_of_module_pafy )
        {
           Py_DECREF( frame_function_7_extract_video_id_of_module_pafy );
           frame_function_7_extract_video_id_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }
}
static PyObject *fparse_function_7_extract_video_id_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_url = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "extract_video_id() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_url == key )
            {
                assert( _python_par_url == NULL );
                _python_par_url = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_url, key ) )
            {
                assert( _python_par_url == NULL );
                _python_par_url = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "extract_video_id() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_url != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_url = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_url == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_url = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_url == NULL ))
    {
        PyObject *values[] = { _python_par_url };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_7_extract_video_id_of_module_pafy( self, _python_par_url );

error_exit:;

    Py_XDECREF( _python_par_url );

    return NULL;
}

static PyObject *dparse_function_7_extract_video_id_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_7_extract_video_id_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_7_extract_video_id_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_8_g_of_module_pafy(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable var___module__( const_str_plain___module__ );
    PyObjectLocalVariable var___doc__( const_str_plain___doc__ );
    PyObjectLocalVariable var_urls( const_str_plain_urls );
    PyObjectLocalVariable var_user_agent( const_str_plain_user_agent );
    PyObjectLocalVariable var_UEFSM( const_str_plain_UEFSM );
    PyObjectLocalVariable var_AF( const_str_plain_AF );
    PyObjectLocalVariable var_jsplayer( const_str_plain_jsplayer );
    PyObjectLocalVariable var_lifespan( const_str_plain_lifespan );
    PyObjectLocalVariable var_opener( const_str_plain_opener );
    PyObjectLocalVariable var_itags( const_str_plain_itags );

    // Actual function code.
    var___module__.assign0( const_str_plain_pafy );
    var___doc__.assign0( const_unicode_digest_5e46b3420c00646effc012158be08f8e );
    var_urls.assign1( PyDict_Copy( const_dict_2c839f3853d1bfaacde1bf9edde8c8d9 ) );
    static PyFrameObject *frame_class_8_g_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_class_8_g_of_module_pafy ) )
    {
        if ( frame_class_8_g_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_8_g_of_module_pafy" );
#endif
            Py_DECREF( frame_class_8_g_of_module_pafy );
        }

        frame_class_8_g_of_module_pafy = MAKE_FRAME( codeobj_248dbc4a2afe1c40374e082e16913702, module_pafy );
    }

    FrameGuard frame_guard( frame_class_8_g_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_class_8_g_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 195 );
        var_user_agent.assign1( BINARY_OPERATION_ADD( const_unicode_digest_478d96c635aaf4601b31a61fce8acd0b, GET_MODULE_VALUE0( const_str_plain___version__ ) ) );
        var_UEFSM.assign0( const_unicode_plain_url_encoded_fmt_stream_map );
        var_AF.assign0( const_unicode_plain_adaptive_fmts );
        var_jsplayer.assign0( const_unicode_digest_73dc06e5b416f95bfea1704ba75db1ce );
        var_lifespan.assign0( const_int_pos_18000 );
        frame_guard.setLineNumber( 200 );
        var_opener.assign1( CALL_FUNCTION_NO_ARGS( GET_MODULE_VALUE0( const_str_plain_build_opener ) ) );
        frame_guard.setLineNumber( 201 );
        {
            PyObjectTemporary tmp_identifier( MAKE_LIST1( MAKE_TUPLE2( const_unicode_digest_fb831f965a1e3f3ee3af2b3c2de8be12, var_user_agent.asObject0() ) ) );
            SET_ATTRIBUTE( tmp_identifier.asObject0(), var_opener.asObject0(), const_str_plain_addheaders );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = var_itags.updateLocalsDict( var_opener.updateLocalsDict( var_lifespan.updateLocalsDict( var_jsplayer.updateLocalsDict( var_AF.updateLocalsDict( var_UEFSM.updateLocalsDict( var_user_agent.updateLocalsDict( var_urls.updateLocalsDict( var___doc__.updateLocalsDict( var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_8_g_of_module_pafy )
        {
           Py_DECREF( frame_class_8_g_of_module_pafy );
           frame_class_8_g_of_module_pafy = NULL;
        }

        throw;
    }
    var_itags.assign1( PyDict_Copy( const_dict_a8825eb29999a487b0dd9b9bc1bfbac9 ) );
    return var_itags.updateLocalsDict( var_opener.updateLocalsDict( var_lifespan.updateLocalsDict( var_jsplayer.updateLocalsDict( var_AF.updateLocalsDict( var_UEFSM.updateLocalsDict( var_user_agent.updateLocalsDict( var_urls.updateLocalsDict( var___doc__.updateLocalsDict( var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_9__extract_smap_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_map_name, PyObject *_python_par_dic, PyObject *_python_par_zero_idx )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_map_name( const_str_plain_map_name, _python_par_map_name );
    PyObjectLocalParameterVariableNoDel par_dic( const_str_plain_dic, _python_par_dic );
    PyObjectLocalParameterVariableNoDel par_zero_idx( const_str_plain_zero_idx, _python_par_zero_idx );
    PyObjectLocalVariable var_smap( const_str_plain_smap );
    PyObjectLocalVariable var_x( const_str_plain_x );

    // Actual function code.
    static PyFrameObject *frame_function_9__extract_smap_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_9__extract_smap_of_module_pafy ) )
    {
        if ( frame_function_9__extract_smap_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_9__extract_smap_of_module_pafy" );
#endif
            Py_DECREF( frame_function_9__extract_smap_of_module_pafy );
        }

        frame_function_9__extract_smap_of_module_pafy = MAKE_FRAME( codeobj_36e1e7d333bc20d53f4f4e7c936d0c76, module_pafy );
    }

    FrameGuard frame_guard( frame_function_9__extract_smap_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_9__extract_smap_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 265 );
        {
            PyObjectTempKeeper0 cmp1;
            if ( ( cmp1.assign( par_map_name.asObject0() ), SEQUENCE_CONTAINS_BOOL( cmp1.asObject0(), par_dic.asObject0() ) ) )
            {
                frame_guard.setLineNumber( 266 );
                {
                    PyObjectTempKeeper1 call1;
                    var_smap.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( par_dic.asObject0(), const_str_plain_get ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), par_map_name.asObject0() ) ) );
                }
                frame_guard.setLineNumber( 267 );
                var_smap.assign1( ( CHECK_IF_TRUE( par_zero_idx.asObject0() ) ? LOOKUP_SUBSCRIPT_CONST( var_smap.asObject0(), const_int_0, 0 ) : var_smap.asObject1() ) );
                frame_guard.setLineNumber( 268 );
                var_smap.assign1( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_smap.asObject0(), const_str_plain_split ) ).asObject0(), const_unicode_chr_44 ) );
                frame_guard.setLineNumber( 269 );
                var_smap.assign1( impl_listcontr_1_of_function_9__extract_smap_of_module_pafy( MAKE_ITERATOR( var_smap.asObject0() ), var_x ) );
                frame_guard.setLineNumber( 270 );
                return impl_listcontr_2_of_function_9__extract_smap_of_module_pafy( MAKE_ITERATOR( var_smap.asObject0() ), var_x );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_zero_idx.updateLocalsDict( par_dic.updateLocalsDict( par_map_name.updateLocalsDict( var_x.updateLocalsDict( var_smap.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_9__extract_smap_of_module_pafy )
        {
           Py_DECREF( frame_function_9__extract_smap_of_module_pafy );
           frame_function_9__extract_smap_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return PyList_New( 0 );
}
static PyObject *fparse_function_9__extract_smap_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_map_name = NULL;
    PyObject *_python_par_dic = NULL;
    PyObject *_python_par_zero_idx = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_extract_smap() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_map_name == key )
            {
                assert( _python_par_map_name == NULL );
                _python_par_map_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_dic == key )
            {
                assert( _python_par_dic == NULL );
                _python_par_dic = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_zero_idx == key )
            {
                assert( _python_par_zero_idx == NULL );
                _python_par_zero_idx = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_map_name, key ) )
            {
                assert( _python_par_map_name == NULL );
                _python_par_map_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_dic, key ) )
            {
                assert( _python_par_dic == NULL );
                _python_par_dic = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_zero_idx, key ) )
            {
                assert( _python_par_zero_idx == NULL );
                _python_par_zero_idx = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_extract_smap() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_map_name != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_map_name = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_map_name == NULL )
    {
        if ( 0 + self->m_defaults_given >= 3  )
        {
            _python_par_map_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_dic != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_dic = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_dic == NULL )
    {
        if ( 1 + self->m_defaults_given >= 3  )
        {
            _python_par_dic = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_zero_idx != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_zero_idx = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_zero_idx == NULL )
    {
        if ( 2 + self->m_defaults_given >= 3  )
        {
            _python_par_zero_idx = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_map_name == NULL || _python_par_dic == NULL || _python_par_zero_idx == NULL ))
    {
        PyObject *values[] = { _python_par_map_name, _python_par_dic, _python_par_zero_idx };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_9__extract_smap_of_module_pafy( self, _python_par_map_name, _python_par_dic, _python_par_zero_idx );

error_exit:;

    Py_XDECREF( _python_par_map_name );
    Py_XDECREF( _python_par_dic );
    Py_XDECREF( _python_par_zero_idx );

    return NULL;
}

static PyObject *dparse_function_9__extract_smap_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3 )
    {
        return impl_function_9__extract_smap_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_9__extract_smap_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_9__extract_smap_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par___iterator( const_str_plain___iterator, _python_par___iterator );
    PyObjectTempVariable tmp_iter_value_0;

    // Actual function code.
    PyObjectTemporary tmp_result( PyList_New( 0 ) );
    FrameGuardVeryLight frame_guard;

    frame_guard.setLineNumber( 269 );
    PyObject *tmp_contraction_iter_0 = par___iterator.asObject0();
    while( true )
    {
        frame_guard.setLineNumber( 269 );
        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( tmp_contraction_iter_0 );

        if ( _tmp_unpack_1 == NULL )
        {
            break;
        }
        tmp_iter_value_0.assign1( _tmp_unpack_1 );
        closure_x.assign0( tmp_iter_value_0.asObject0() );
        {
            PyObjectTempKeeper0 call1;
            APPEND_TO_LIST( tmp_result.asObject0(), PyObjectTemporary( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_parseqs ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), closure_x.asObject0() ) ) ).asObject0() ), Py_None;
        }

        CONSIDER_THREADING();
    }
    tmp_contraction_iter_0 = NULL;
    return tmp_result.asObject1();
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_9__extract_smap_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par___iterator( const_str_plain___iterator, _python_par___iterator );
    PyObjectTempVariable tmp_iter_value_0;

    // Actual function code.
    PyObjectTemporary tmp_result( PyList_New( 0 ) );
    FrameGuardVeryLight frame_guard;

    frame_guard.setLineNumber( 270 );
    PyObject *tmp_contraction_iter_0 = par___iterator.asObject0();
    while( true )
    {
        frame_guard.setLineNumber( 270 );
        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( tmp_contraction_iter_0 );

        if ( _tmp_unpack_1 == NULL )
        {
            break;
        }
        tmp_iter_value_0.assign1( _tmp_unpack_1 );
        closure_x.assign0( tmp_iter_value_0.asObject0() );
        APPEND_TO_LIST( tmp_result.asObject0(), PyObjectTemporary( TO_DICT( PyObjectTemporary( impl_genexpr_1_of_listcontr_2_of_function_9__extract_smap_of_module_pafy( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( closure_x.asObject0(), const_str_plain_items ) ).asObject0() ) ).asObject0() ) ) ).asObject0(), NULL ) ).asObject0() ), Py_None;

        CONSIDER_THREADING();
    }
    tmp_contraction_iter_0 = NULL;
    return tmp_result.asObject1();
}



struct _context_generator_genexpr_1_of_listcontr_2_of_function_9__extract_smap_of_module_pafy_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectLocalParameterVariableNoDel par___iterator;
    PyObjectLocalVariable var_k;
    PyObjectLocalVariable var_v;
    PyObjectTempVariable tmp_iter_value_0;
    PyObjectTempVariable tmp_tuple_unpack_1__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_1__element_1;
    PyObjectTempVariable tmp_tuple_unpack_1__element_2;
};

static void _context_generator_genexpr_1_of_listcontr_2_of_function_9__extract_smap_of_module_pafy_destructor( void *context_voidptr )
{
    _context_generator_genexpr_1_of_listcontr_2_of_function_9__extract_smap_of_module_pafy_t *_python_context = (struct _context_generator_genexpr_1_of_listcontr_2_of_function_9__extract_smap_of_module_pafy_t *)context_voidptr;

    delete _python_context;
}

static void genexpr_1_of_listcontr_2_of_function_9__extract_smap_of_module_pafy_context( Nuitka_GeneratorObject *generator )
{
    try
    {
        // Make context accessible if one is used.

        NUITKA_MAY_BE_UNUSED struct _context_generator_genexpr_1_of_listcontr_2_of_function_9__extract_smap_of_module_pafy_t *_python_context = (_context_generator_genexpr_1_of_listcontr_2_of_function_9__extract_smap_of_module_pafy_t *)generator->m_context;


        // Local variable inits
        _python_context->var_k.setVariableName( const_str_plain_k );
        _python_context->var_v.setVariableName( const_str_plain_v );

        // Actual function code.
        static PyFrameObject *frame_genexpr_1_of_listcontr_2_of_function_9__extract_smap_of_module_pafy = NULL;

        // Must be inside block, or else its d-tor will not be run.
        if ( isFrameUnusable( frame_genexpr_1_of_listcontr_2_of_function_9__extract_smap_of_module_pafy ) )
        {
            if ( frame_genexpr_1_of_listcontr_2_of_function_9__extract_smap_of_module_pafy )
            {
#if _DEBUG_REFRAME
                puts( "reframe for genexpr_1_of_listcontr_2_of_function_9__extract_smap_of_module_pafy" );
#endif
                Py_DECREF( frame_genexpr_1_of_listcontr_2_of_function_9__extract_smap_of_module_pafy );
            }

            frame_genexpr_1_of_listcontr_2_of_function_9__extract_smap_of_module_pafy = MAKE_FRAME( codeobj_1956bae82195b15ff05c1dfd6ea41cc5, module_pafy );
        }

        Py_INCREF( frame_genexpr_1_of_listcontr_2_of_function_9__extract_smap_of_module_pafy );
        generator->m_frame = frame_genexpr_1_of_listcontr_2_of_function_9__extract_smap_of_module_pafy;

        Py_CLEAR( generator->m_frame->f_back );

        generator->m_frame->f_back = PyThreadState_GET()->frame;
        Py_INCREF( generator->m_frame->f_back );

        PyThreadState_GET()->frame = generator->m_frame;

        FrameGuardLight frame_guard( &generator->m_frame );

        // TODO: The inject of the exception through C++ is very non-optimal, this flag
        // now indicates only if the exception occurs initially as supposed, or during
        // life, this could and should be shortcut.
        bool traceback;

        try
        {
            // TODO: In case we don't raise exceptions ourselves, we would still have to do this, so
            // beware to not optimize this away for generators without a replacement.
            traceback = true;
            CHECK_EXCEPTION( generator );
            traceback = false;

            PyObject *tmp_contraction_iter_0 = _python_context->par___iterator.asObject0();
            while( true )
            {
                frame_guard.setLineNumber( 270 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( tmp_contraction_iter_0 );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                _python_context->tmp_iter_value_0.assign1( _tmp_unpack_1 );
                PythonExceptionKeeper _caught_2;
#if PYTHON_VERSION < 300
                int _at_lineno_2 = 0;
#endif


                try
                {
                    // Tried block:
                    _python_context->tmp_tuple_unpack_1__source_iter.assign1( MAKE_ITERATOR( _python_context->tmp_iter_value_0.asObject0() ) );
                    _python_context->tmp_tuple_unpack_1__element_1.assign1( UNPACK_NEXT( _python_context->tmp_tuple_unpack_1__source_iter.asObject0(), 0 ) );
                    _python_context->tmp_tuple_unpack_1__element_2.assign1( UNPACK_NEXT( _python_context->tmp_tuple_unpack_1__source_iter.asObject0(), 1 ) );
                    UNPACK_ITERATOR_CHECK( _python_context->tmp_tuple_unpack_1__source_iter.asObject0(), 2 );
                    _python_context->var_k.assign0( _python_context->tmp_tuple_unpack_1__element_1.asObject0() );
                    _python_context->var_v.assign0( _python_context->tmp_tuple_unpack_1__element_2.asObject0() );
                }
                catch ( PythonException &_exception )
                {
#if PYTHON_VERSION >= 300
                    if ( !_exception.hasTraceback() )
                    {
                        _exception.setTraceback( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) );
                    }
                    else
                    {
                        _exception.addTraceback( frame_guard.getFrame0() );
                    }
#else
                    _at_lineno_2 = frame_guard.getLineNumber();
#endif

                    _caught_2.save( _exception );

#if PYTHON_VERSION >= 300
                    frame_guard.preserveExistingException();

                    _exception.toExceptionHandler();
#endif
                }

                // Final block:
                _python_context->tmp_tuple_unpack_1__source_iter.del( true );
                _python_context->tmp_tuple_unpack_1__element_1.del( true );
                _python_context->tmp_tuple_unpack_1__element_2.del( true );
#if PYTHON_VERSION < 300
                if ( _at_lineno_2 != 0 )
                {
                   frame_guard.setLineNumber( _at_lineno_2 );
                }
#endif
                _caught_2.rethrow();
                // Final end
                {
                    PyObjectTempKeeper0 make_tuple1;
                    YIELD( generator, ( make_tuple1.assign( _python_context->var_k.asObject0() ), MAKE_TUPLE2( make_tuple1.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( _python_context->var_v.asObject0(), const_int_0, 0 ) ).asObject0() ) ) );
                }

                CONSIDER_THREADING();
            }
            tmp_contraction_iter_0 = NULL;

            PyErr_SetObject( PyExc_StopIteration, (PyObject *)NULL );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) );
            }
            else if ( traceback == false )
            {
                _exception.addTraceback( generator->m_frame );
            }
            _exception.toPython();

            // TODO: Moving this code is not allowed yet.
            generator->m_yielded = NULL;
        }
    }
    catch( ReturnValueException &e )
    {
        PyErr_SetObject( PyExc_StopIteration, e.getValue0() );
    }

    assert( ERROR_OCCURED() );

    // TODO: Won't return, we should tell the compiler about that.
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );
}

static PyObject *impl_genexpr_1_of_listcontr_2_of_function_9__extract_smap_of_module_pafy( PyObject *_python_par___iterator )
{
    // Create context if any
    struct _context_generator_genexpr_1_of_listcontr_2_of_function_9__extract_smap_of_module_pafy_t *_python_context = new _context_generator_genexpr_1_of_listcontr_2_of_function_9__extract_smap_of_module_pafy_t;

    try
    {
        PyObject *result = Nuitka_Generator_New(
            genexpr_1_of_listcontr_2_of_function_9__extract_smap_of_module_pafy_context,
            const_str_angle_genexpr,
            codeobj_1bc6beaaace22a1fcd520883bbe43a4c,
            _python_context,
            _context_generator_genexpr_1_of_listcontr_2_of_function_9__extract_smap_of_module_pafy_destructor
        );

        if (unlikely( result == NULL ))
        {
            PyErr_Format( PyExc_RuntimeError, "cannot create function <genexpr>" );
            return NULL;
        }

        // Copy to context parameter values and closured variables if any.
        _python_context->par___iterator.setVariableNameAndValue( const_str_plain___iterator, _python_par___iterator );

        return result;
    }
    catch ( PythonException &_exception )
    {
        _exception.toPython();

        return NULL;
    }
}


static PyObject *impl_function_10__extract_dash_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_dashurl )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_dashurl( const_str_plain_dashurl, _python_par_dashurl );
    PyObjectLocalVariable var_dashdata( const_str_plain_dashdata );
    PyObjectLocalVariable var_ns( const_str_plain_ns );
    PyObjectLocalVariable var_ytns( const_str_plain_ytns );
    PyObjectLocalVariable var_tree( const_str_plain_tree );
    PyObjectLocalVariable var_tlist( const_str_plain_tlist );
    PyObjectLocalVariable var_dashmap( const_str_plain_dashmap );
    PyObjectLocalVariable var_x( const_str_plain_x );
    PyObjectLocalVariable var_baseurl( const_str_plain_baseurl );
    PyObjectLocalVariable var_url( const_str_plain_url );
    PyObjectLocalVariable var_size( const_str_plain_size );
    PyObjectLocalVariable var_bitrate( const_str_plain_bitrate );
    PyObjectLocalVariable var_itag( const_str_plain_itag );
    PyObjectLocalVariable var_width( const_str_plain_width );
    PyObjectLocalVariable var_height( const_str_plain_height );
    PyObjectLocalVariable var_type_( const_str_plain_type_ );
    PyObjectTempVariable tmp_for_loop_1__iter_value;

    // Actual function code.
    static PyFrameObject *frame_function_10__extract_dash_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_10__extract_dash_of_module_pafy ) )
    {
        if ( frame_function_10__extract_dash_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_10__extract_dash_of_module_pafy" );
#endif
            Py_DECREF( frame_function_10__extract_dash_of_module_pafy );
        }

        frame_function_10__extract_dash_of_module_pafy = MAKE_FRAME( codeobj_0d077233a875609cac6b0bba8b3a7387, module_pafy );
    }

    FrameGuard frame_guard( frame_function_10__extract_dash_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_10__extract_dash_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 278 );
        DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS1( GET_MODULE_VALUE0( const_str_plain_dbg ), const_unicode_digest_79b0ec380f9703a06fe22e55485879c9 ) );
        frame_guard.setLineNumber( 279 );
        {
            PyObjectTempKeeper0 call1;
            var_dashdata.assign1( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_fetch_decode ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), par_dashurl.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 280 );
        DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS1( GET_MODULE_VALUE0( const_str_plain_dbg ), const_unicode_digest_841dcf49334b76649f0cd133e811a52a ) );
        var_ns.assign0( const_unicode_digest_4160d9a158c34781f79aaf6cced613ef );
        var_ytns.assign0( const_unicode_digest_c646ee3f5d1a243e97806097ee4a2da5 );
        frame_guard.setLineNumber( 283 );
        {
            PyObjectTempKeeper1 call1;
            var_tree.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_ElementTree ), const_str_plain_fromstring ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), var_dashdata.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 284 );
        {
            PyObjectTempKeeper1 call1;
            var_tlist.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( var_tree.asObject0(), const_str_plain_findall ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( const_unicode_digest_51e8640a8bc74c66bd5b402b377baad1, var_ns.asObject0() ) ).asObject0() ) ) );
        }
        var_dashmap.assign1( PyList_New( 0 ) );
        frame_guard.setLineNumber( 287 );
        PyObjectTemporaryWithDel tmp_for_loop_1__for_iterator( MAKE_ITERATOR( var_tlist.asObject0() ) );
        PythonExceptionKeeper _caught_1;
#if PYTHON_VERSION < 300
        int _at_lineno_1 = 0;
#endif


        try
        {
            // Tried block:
            while( true )
            {
                frame_guard.setLineNumber( 287 );
                PyObject *_tmp_unpack_2 = ITERATOR_NEXT( tmp_for_loop_1__for_iterator.asObject0() );

                if ( _tmp_unpack_2 == NULL )
                {
                    break;
                }
                tmp_for_loop_1__iter_value.assign1( _tmp_unpack_2 );
                var_x.assign0( tmp_for_loop_1__iter_value.asObject0() );
                frame_guard.setLineNumber( 288 );
                {
                    PyObjectTempKeeper1 call1;
                    var_baseurl.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( var_x.asObject0(), const_str_plain_find ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( const_unicode_digest_540df358bf654c3c109f238c7f3b2cb6, var_ns.asObject0() ) ).asObject0() ) ) );
                }
                frame_guard.setLineNumber( 289 );
                var_url.assign1( LOOKUP_ATTRIBUTE( var_baseurl.asObject0(), const_str_plain_text ) );
                frame_guard.setLineNumber( 290 );
                {
                    PyObjectTempKeeper1 subscr1;
                    var_size.assign1( ( subscr1.assign( LOOKUP_ATTRIBUTE( var_baseurl.asObject0(), const_str_plain_attrib ) ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( const_unicode_digest_6c24098afa6b05b095938cfd57249178, var_ytns.asObject0() ) ).asObject0() ) ) );
                }
                frame_guard.setLineNumber( 291 );
                var_bitrate.assign1( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_x.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_bandwidth ) );
                frame_guard.setLineNumber( 292 );
                {
                    PyObjectTempKeeper0 call1;
                    var_itag.assign1( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_uni ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_x.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_id ) ).asObject0() ) ) );
                }
                frame_guard.setLineNumber( 293 );
                {
                    PyObjectTempKeeper0 call1;
                    var_width.assign1( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_uni ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_x.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_width ) ).asObject0() ) ) );
                }
                frame_guard.setLineNumber( 294 );
                {
                    PyObjectTempKeeper0 call1;
                    var_height.assign1( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_uni ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_x.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_height ) ).asObject0() ) ) );
                }
                frame_guard.setLineNumber( 295 );
                {
                    PyObjectTempKeeper1 call1;
                    var_type_.assign1( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_re ), const_str_plain_search ) ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), const_unicode_digest_4650291d7076de17e0039881d452cbd3, var_url.asObject0() ) ) ).asObject0(), const_str_plain_group ) ).asObject0(), const_int_pos_1 ) );
                }
                frame_guard.setLineNumber( 296 );
                {
                    PyObjectTempKeeper1 call1;
                    PyObjectTempKeeper0 make_dict1;
                    PyObjectTempKeeper0 make_dict2;
                    PyObjectTempKeeper0 make_dict3;
                    PyObjectTempKeeper0 make_dict4;
                    PyObjectTempKeeper0 make_dict5;
                    PyObjectTempKeeper0 make_dict6;
                    DECREASE_REFCOUNT( ( frame_guard.setLineNumber( 296 ), call1.assign( LOOKUP_ATTRIBUTE( var_dashmap.asObject0(), const_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( ( make_dict1.assign( var_bitrate.asObject0() ), frame_guard.setLineNumber( 298 ), make_dict2.assign( var_itag.asObject0() ), frame_guard.setLineNumber( 299 ), make_dict3.assign( var_width.asObject0() ), frame_guard.setLineNumber( 300 ), make_dict4.assign( var_height.asObject0() ), frame_guard.setLineNumber( 301 ), make_dict5.assign( var_url.asObject0() ), frame_guard.setLineNumber( 302 ), make_dict6.assign( var_size.asObject0() ), frame_guard.setLineNumber( 303 ), MAKE_DICT8( make_dict1.asObject0(), const_str_plain_bitrate, Py_True, const_str_plain_dash, make_dict2.asObject0(), const_str_plain_itag, make_dict3.asObject0(), const_str_plain_width, make_dict4.asObject0(), const_str_plain_height, make_dict5.asObject0(), const_str_plain_url, make_dict6.asObject0(), const_str_plain_size, var_type_.asObject0(), const_str_plain_type ) ) ).asObject0() ) ) );
                }

                CONSIDER_THREADING();
            }
        }
        catch ( PythonException &_exception )
        {
#if PYTHON_VERSION >= 300
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }
#else
            _at_lineno_1 = frame_guard.getLineNumber();
#endif

            _caught_1.save( _exception );

#if PYTHON_VERSION >= 300
            frame_guard.preserveExistingException();

            _exception.toExceptionHandler();
#endif
        }

        // Final block:
        tmp_for_loop_1__iter_value.del( true );
        tmp_for_loop_1__for_iterator.del( false );
#if PYTHON_VERSION < 300
        if ( _at_lineno_1 != 0 )
        {
           frame_guard.setLineNumber( _at_lineno_1 );
        }
#endif
        _caught_1.rethrow();
        // Final end
        frame_guard.setLineNumber( 304 );
        return var_dashmap.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_dashurl.updateLocalsDict( var_type_.updateLocalsDict( var_height.updateLocalsDict( var_width.updateLocalsDict( var_itag.updateLocalsDict( var_bitrate.updateLocalsDict( var_size.updateLocalsDict( var_url.updateLocalsDict( var_baseurl.updateLocalsDict( var_x.updateLocalsDict( var_dashmap.updateLocalsDict( var_tlist.updateLocalsDict( var_tree.updateLocalsDict( var_ytns.updateLocalsDict( var_ns.updateLocalsDict( var_dashdata.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_10__extract_dash_of_module_pafy )
        {
           Py_DECREF( frame_function_10__extract_dash_of_module_pafy );
           frame_function_10__extract_dash_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_10__extract_dash_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_dashurl = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_extract_dash() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_dashurl == key )
            {
                assert( _python_par_dashurl == NULL );
                _python_par_dashurl = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_dashurl, key ) )
            {
                assert( _python_par_dashurl == NULL );
                _python_par_dashurl = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_extract_dash() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_dashurl != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_dashurl = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_dashurl == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_dashurl = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_dashurl == NULL ))
    {
        PyObject *values[] = { _python_par_dashurl };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_10__extract_dash_of_module_pafy( self, _python_par_dashurl );

error_exit:;

    Py_XDECREF( _python_par_dashurl );

    return NULL;
}

static PyObject *dparse_function_10__extract_dash_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_10__extract_dash_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_10__extract_dash_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_11__extract_function_from_js_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_name, PyObject *_python_par_js )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_name( const_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel par_js( const_str_plain_js, _python_par_js );
    PyObjectLocalVariable var_fpattern( const_str_plain_fpattern );
    PyObjectLocalVariable var_m( const_str_plain_m );
    PyObjectLocalVariable var_args( const_str_plain_args );
    PyObjectLocalVariable var_body( const_str_plain_body );
    PyObjectLocalVariable var_func( const_str_plain_func );
    PyObjectTempVariable tmp_tuple_unpack_1__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_1__element_1;
    PyObjectTempVariable tmp_tuple_unpack_1__element_2;

    // Actual function code.
    static PyFrameObject *frame_function_11__extract_function_from_js_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_11__extract_function_from_js_of_module_pafy ) )
    {
        if ( frame_function_11__extract_function_from_js_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_11__extract_function_from_js_of_module_pafy" );
#endif
            Py_DECREF( frame_function_11__extract_function_from_js_of_module_pafy );
        }

        frame_function_11__extract_function_from_js_of_module_pafy = MAKE_FRAME( codeobj_24caeff870e873374d138794aec4a98a, module_pafy );
    }

    FrameGuard frame_guard( frame_function_11__extract_function_from_js_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_11__extract_function_from_js_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 313 );
        {
            PyObjectTempKeeper0 call1;
            DECREASE_REFCOUNT( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_dbg ) ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), const_unicode_digest_02d1538a8c5fdc5223018c2cff2ef81a, par_name.asObject0() ) ) );
        }
        var_fpattern.assign0( const_unicode_digest_7dc248cd36099ade618f2c702450c7ef );
        frame_guard.setLineNumber( 315 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper1 call2;
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper0 op1;
            var_m.assign1( ( call2.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_re ), const_str_plain_search ) ), call3.assign( ( op1.assign( var_fpattern.asObject0() ), BINARY_OPERATION_REMAINDER( op1.asObject0(), PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_re ), const_str_plain_escape ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), par_name.asObject0() ) ) ).asObject0() ) ) ), CALL_FUNCTION_WITH_ARGS2( call2.asObject0(), call3.asObject0(), par_js.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 316 );
        PythonExceptionKeeper _caught_1;
#if PYTHON_VERSION < 300
        int _at_lineno_1 = 0;
#endif


        try
        {
            // Tried block:
            tmp_tuple_unpack_1__source_iter.assign1( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_m.asObject0(), const_str_plain_groups ) ).asObject0() ) ).asObject0() ) );
            tmp_tuple_unpack_1__element_1.assign1( UNPACK_NEXT( tmp_tuple_unpack_1__source_iter.asObject0(), 0 ) );
            tmp_tuple_unpack_1__element_2.assign1( UNPACK_NEXT( tmp_tuple_unpack_1__source_iter.asObject0(), 1 ) );
            UNPACK_ITERATOR_CHECK( tmp_tuple_unpack_1__source_iter.asObject0(), 2 );
            var_args.assign0( tmp_tuple_unpack_1__element_1.asObject0() );
            var_body.assign0( tmp_tuple_unpack_1__element_2.asObject0() );
        }
        catch ( PythonException &_exception )
        {
#if PYTHON_VERSION >= 300
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }
#else
            _at_lineno_1 = frame_guard.getLineNumber();
#endif

            _caught_1.save( _exception );

#if PYTHON_VERSION >= 300
            frame_guard.preserveExistingException();

            _exception.toExceptionHandler();
#endif
        }

        // Final block:
        tmp_tuple_unpack_1__source_iter.del( true );
        tmp_tuple_unpack_1__element_1.del( true );
        tmp_tuple_unpack_1__element_2.del( true );
#if PYTHON_VERSION < 300
        if ( _at_lineno_1 != 0 )
        {
           frame_guard.setLineNumber( _at_lineno_1 );
        }
#endif
        _caught_1.rethrow();
        // Final end
        frame_guard.setLineNumber( 317 );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper0 call2;
            PyObjectTempKeeper0 call3;
            DECREASE_REFCOUNT( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_dbg ) ), call2.assign( par_name.asObject0() ), call3.assign( var_args.asObject0() ), CALL_FUNCTION_WITH_ARGS4( call1.asObject0(), const_unicode_digest_f67ba74e3fc35b422681509c74ba502d, call2.asObject0(), call3.asObject0(), var_body.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 318 );
        {
            PyObjectTempKeeper0 make_dict1;
            PyObjectTempKeeper1 make_dict2;
            var_func.assign1( ( make_dict1.assign( par_name.asObject0() ), make_dict2.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_args.asObject0(), const_str_plain_split ) ).asObject0(), const_unicode_chr_44 ) ), MAKE_DICT3( make_dict1.asObject0(), const_unicode_plain_name, make_dict2.asObject0(), const_unicode_plain_parameters, var_body.asObject0(), const_unicode_plain_body ) ) );
        }
        frame_guard.setLineNumber( 319 );
        return var_func.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_js.updateLocalsDict( par_name.updateLocalsDict( var_func.updateLocalsDict( var_body.updateLocalsDict( var_args.updateLocalsDict( var_m.updateLocalsDict( var_fpattern.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_11__extract_function_from_js_of_module_pafy )
        {
           Py_DECREF( frame_function_11__extract_function_from_js_of_module_pafy );
           frame_function_11__extract_function_from_js_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_11__extract_function_from_js_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_js = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_extract_function_from_js() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_name == key )
            {
                assert( _python_par_name == NULL );
                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_js == key )
            {
                assert( _python_par_js == NULL );
                _python_par_js = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_name, key ) )
            {
                assert( _python_par_name == NULL );
                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_js, key ) )
            {
                assert( _python_par_js == NULL );
                _python_par_js = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_extract_function_from_js() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_name == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_js != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_js = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_js == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_js = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_name == NULL || _python_par_js == NULL ))
    {
        PyObject *values[] = { _python_par_name, _python_par_js };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_11__extract_function_from_js_of_module_pafy( self, _python_par_name, _python_par_js );

error_exit:;

    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_js );

    return NULL;
}

static PyObject *dparse_function_11__extract_function_from_js_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_11__extract_function_from_js_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_11__extract_function_from_js_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_12__extract_dictfunc_from_js_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_name, PyObject *_python_par_js )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_name( const_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel par_js( const_str_plain_js, _python_par_js );
    PyObjectLocalVariable var_var( const_str_plain_var );
    PyObjectLocalVariable var__( const_str_plain__ );
    PyObjectLocalVariable var_fname( const_str_plain_fname );
    PyObjectLocalVariable var_fpattern( const_str_plain_fpattern );
    PyObjectLocalVariable var_m( const_str_plain_m );
    PyObjectLocalVariable var_args( const_str_plain_args );
    PyObjectLocalVariable var_body( const_str_plain_body );
    PyObjectLocalVariable var_func( const_str_plain_func );
    PyObjectTempVariable tmp_tuple_unpack_1__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_1__element_1;
    PyObjectTempVariable tmp_tuple_unpack_1__element_2;
    PyObjectTempVariable tmp_tuple_unpack_1__element_3;
    PyObjectTempVariable tmp_tuple_unpack_2__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_2__element_1;
    PyObjectTempVariable tmp_tuple_unpack_2__element_2;

    // Actual function code.
    static PyFrameObject *frame_function_12__extract_dictfunc_from_js_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_12__extract_dictfunc_from_js_of_module_pafy ) )
    {
        if ( frame_function_12__extract_dictfunc_from_js_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_12__extract_dictfunc_from_js_of_module_pafy" );
#endif
            Py_DECREF( frame_function_12__extract_dictfunc_from_js_of_module_pafy );
        }

        frame_function_12__extract_dictfunc_from_js_of_module_pafy = MAKE_FRAME( codeobj_8f7287bb172d01dc84de29cb279cb80e, module_pafy );
    }

    FrameGuard frame_guard( frame_function_12__extract_dictfunc_from_js_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_12__extract_dictfunc_from_js_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 324 );
        {
            PyObjectTempKeeper0 call1;
            DECREASE_REFCOUNT( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_dbg ) ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), const_unicode_digest_02d1538a8c5fdc5223018c2cff2ef81a, par_name.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 325 );
        PythonExceptionKeeper _caught_1;
#if PYTHON_VERSION < 300
        int _at_lineno_1 = 0;
#endif


        try
        {
            // Tried block:
            tmp_tuple_unpack_1__source_iter.assign1( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_name.asObject0(), const_str_plain_partition ) ).asObject0(), const_unicode_dot ) ).asObject0() ) );
            tmp_tuple_unpack_1__element_1.assign1( UNPACK_NEXT( tmp_tuple_unpack_1__source_iter.asObject0(), 0 ) );
            tmp_tuple_unpack_1__element_2.assign1( UNPACK_NEXT( tmp_tuple_unpack_1__source_iter.asObject0(), 1 ) );
            tmp_tuple_unpack_1__element_3.assign1( UNPACK_NEXT( tmp_tuple_unpack_1__source_iter.asObject0(), 2 ) );
            UNPACK_ITERATOR_CHECK( tmp_tuple_unpack_1__source_iter.asObject0(), 3 );
            var_var.assign0( tmp_tuple_unpack_1__element_1.asObject0() );
            var__.assign0( tmp_tuple_unpack_1__element_2.asObject0() );
            var_fname.assign0( tmp_tuple_unpack_1__element_3.asObject0() );
        }
        catch ( PythonException &_exception )
        {
#if PYTHON_VERSION >= 300
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }
#else
            _at_lineno_1 = frame_guard.getLineNumber();
#endif

            _caught_1.save( _exception );

#if PYTHON_VERSION >= 300
            frame_guard.preserveExistingException();

            _exception.toExceptionHandler();
#endif
        }

        // Final block:
        tmp_tuple_unpack_1__source_iter.del( true );
        tmp_tuple_unpack_1__element_1.del( true );
        tmp_tuple_unpack_1__element_2.del( true );
        tmp_tuple_unpack_1__element_3.del( true );
#if PYTHON_VERSION < 300
        if ( _at_lineno_1 != 0 )
        {
           frame_guard.setLineNumber( _at_lineno_1 );
        }
#endif
        _caught_1.rethrow();
        // Final end
        var_fpattern.assign0( const_unicode_digest_43ff502db641c68f50b7a580dde8c37c );
        frame_guard.setLineNumber( 328 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper1 call2;
            PyObjectTempKeeper1 call3;
            PyObjectTempKeeper1 call4;
            PyObjectTempKeeper1 make_tuple1;
            PyObjectTempKeeper0 op1;
            var_m.assign1( ( call3.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_re ), const_str_plain_search ) ), call4.assign( ( op1.assign( var_fpattern.asObject0() ), BINARY_OPERATION_REMAINDER( op1.asObject0(), PyObjectTemporary( ( make_tuple1.assign( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_re ), const_str_plain_escape ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), var_var.asObject0() ) ) ), MAKE_TUPLE2( make_tuple1.asObject0(), PyObjectTemporary( ( call2.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_re ), const_str_plain_escape ) ), CALL_FUNCTION_WITH_ARGS1( call2.asObject0(), var_fname.asObject0() ) ) ).asObject0() ) ) ).asObject0() ) ) ), CALL_FUNCTION_WITH_ARGS2( call3.asObject0(), call4.asObject0(), par_js.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 329 );
        PythonExceptionKeeper _caught_2;
#if PYTHON_VERSION < 300
        int _at_lineno_2 = 0;
#endif


        try
        {
            // Tried block:
            tmp_tuple_unpack_2__source_iter.assign1( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_m.asObject0(), const_str_plain_groups ) ).asObject0() ) ).asObject0() ) );
            tmp_tuple_unpack_2__element_1.assign1( UNPACK_NEXT( tmp_tuple_unpack_2__source_iter.asObject0(), 0 ) );
            tmp_tuple_unpack_2__element_2.assign1( UNPACK_NEXT( tmp_tuple_unpack_2__source_iter.asObject0(), 1 ) );
            UNPACK_ITERATOR_CHECK( tmp_tuple_unpack_2__source_iter.asObject0(), 2 );
            var_args.assign0( tmp_tuple_unpack_2__element_1.asObject0() );
            var_body.assign0( tmp_tuple_unpack_2__element_2.asObject0() );
        }
        catch ( PythonException &_exception )
        {
#if PYTHON_VERSION >= 300
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }
#else
            _at_lineno_2 = frame_guard.getLineNumber();
#endif

            _caught_2.save( _exception );

#if PYTHON_VERSION >= 300
            frame_guard.preserveExistingException();

            _exception.toExceptionHandler();
#endif
        }

        // Final block:
        tmp_tuple_unpack_2__source_iter.del( true );
        tmp_tuple_unpack_2__element_1.del( true );
        tmp_tuple_unpack_2__element_2.del( true );
#if PYTHON_VERSION < 300
        if ( _at_lineno_2 != 0 )
        {
           frame_guard.setLineNumber( _at_lineno_2 );
        }
#endif
        _caught_2.rethrow();
        // Final end
        frame_guard.setLineNumber( 330 );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper0 call2;
            PyObjectTempKeeper0 call3;
            DECREASE_REFCOUNT( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_dbg ) ), call2.assign( par_name.asObject0() ), call3.assign( var_args.asObject0() ), CALL_FUNCTION_WITH_ARGS4( call1.asObject0(), const_unicode_digest_e197ed13f2396b27e0ae4341b45a35bf, call2.asObject0(), call3.asObject0(), var_body.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 331 );
        {
            PyObjectTempKeeper0 make_dict1;
            PyObjectTempKeeper1 make_dict2;
            var_func.assign1( ( make_dict1.assign( par_name.asObject0() ), make_dict2.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_args.asObject0(), const_str_plain_split ) ).asObject0(), const_unicode_chr_44 ) ), MAKE_DICT3( make_dict1.asObject0(), const_unicode_plain_name, make_dict2.asObject0(), const_unicode_plain_parameters, var_body.asObject0(), const_unicode_plain_body ) ) );
        }
        frame_guard.setLineNumber( 332 );
        return var_func.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_js.updateLocalsDict( par_name.updateLocalsDict( var_func.updateLocalsDict( var_body.updateLocalsDict( var_args.updateLocalsDict( var_m.updateLocalsDict( var_fpattern.updateLocalsDict( var_fname.updateLocalsDict( var__.updateLocalsDict( var_var.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_12__extract_dictfunc_from_js_of_module_pafy )
        {
           Py_DECREF( frame_function_12__extract_dictfunc_from_js_of_module_pafy );
           frame_function_12__extract_dictfunc_from_js_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_12__extract_dictfunc_from_js_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_js = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_extract_dictfunc_from_js() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_name == key )
            {
                assert( _python_par_name == NULL );
                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_js == key )
            {
                assert( _python_par_js == NULL );
                _python_par_js = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_name, key ) )
            {
                assert( _python_par_name == NULL );
                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_js, key ) )
            {
                assert( _python_par_js == NULL );
                _python_par_js = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_extract_dictfunc_from_js() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_name == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_js != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_js = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_js == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_js = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_name == NULL || _python_par_js == NULL ))
    {
        PyObject *values[] = { _python_par_name, _python_par_js };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_12__extract_dictfunc_from_js_of_module_pafy( self, _python_par_name, _python_par_js );

error_exit:;

    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_js );

    return NULL;
}

static PyObject *dparse_function_12__extract_dictfunc_from_js_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_12__extract_dictfunc_from_js_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_12__extract_dictfunc_from_js_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_13__get_mainfunc_from_js_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_js )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_js( const_str_plain_js, _python_par_js );
    PyObjectLocalVariable var_m( const_str_plain_m );
    PyObjectLocalVariable var_funcname( const_str_plain_funcname );
    PyObjectLocalVariable var_function( const_str_plain_function );

    // Actual function code.
    static PyFrameObject *frame_function_13__get_mainfunc_from_js_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_13__get_mainfunc_from_js_of_module_pafy ) )
    {
        if ( frame_function_13__get_mainfunc_from_js_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_13__get_mainfunc_from_js_of_module_pafy" );
#endif
            Py_DECREF( frame_function_13__get_mainfunc_from_js_of_module_pafy );
        }

        frame_function_13__get_mainfunc_from_js_of_module_pafy = MAKE_FRAME( codeobj_6e2463dd5dd34e1f69d520b91f11a794, module_pafy );
    }

    FrameGuard frame_guard( frame_function_13__get_mainfunc_from_js_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_13__get_mainfunc_from_js_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 337 );
        DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS1( GET_MODULE_VALUE0( const_str_plain_dbg ), const_unicode_digest_07667886fc6912dc145eb457d2098248 ) );
        frame_guard.setLineNumber( 338 );
        {
            PyObjectTempKeeper1 call1;
            var_m.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_re ), const_str_plain_search ) ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), const_unicode_digest_b3a2595e5c301dafcad41555d7340a99, par_js.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 339 );
        var_funcname.assign1( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_m.asObject0(), const_str_plain_group ) ).asObject0(), const_int_pos_1 ) );
        frame_guard.setLineNumber( 340 );
        {
            PyObjectTempKeeper0 call1;
            DECREASE_REFCOUNT( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_dbg ) ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), const_unicode_digest_2cb13719bc93f5a320925b3d8a1b84b5, var_funcname.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 341 );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper0 call2;
            var_function.assign1( ( call1.assign( GET_MODULE_VALUE0( const_str_plain__extract_function_from_js ) ), call2.assign( var_funcname.asObject0() ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), call2.asObject0(), par_js.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 342 );
        return var_function.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_js.updateLocalsDict( var_function.updateLocalsDict( var_funcname.updateLocalsDict( var_m.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_13__get_mainfunc_from_js_of_module_pafy )
        {
           Py_DECREF( frame_function_13__get_mainfunc_from_js_of_module_pafy );
           frame_function_13__get_mainfunc_from_js_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_13__get_mainfunc_from_js_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_js = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_get_mainfunc_from_js() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_js == key )
            {
                assert( _python_par_js == NULL );
                _python_par_js = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_js, key ) )
            {
                assert( _python_par_js == NULL );
                _python_par_js = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_get_mainfunc_from_js() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_js != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_js = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_js == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_js = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_js == NULL ))
    {
        PyObject *values[] = { _python_par_js };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_13__get_mainfunc_from_js_of_module_pafy( self, _python_par_js );

error_exit:;

    Py_XDECREF( _python_par_js );

    return NULL;
}

static PyObject *dparse_function_13__get_mainfunc_from_js_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_13__get_mainfunc_from_js_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_13__get_mainfunc_from_js_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_14__get_other_funcs_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_primary_func, PyObject *_python_par_js )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_primary_func( const_str_plain_primary_func, _python_par_primary_func );
    PyObjectLocalParameterVariableNoDel par_js( const_str_plain_js, _python_par_js );
    PyObjectLocalVariable var_body( const_str_plain_body );
    PyObjectLocalVariable var_call( const_str_plain_call );
    PyObjectLocalVariable var_dotcall( const_str_plain_dotcall );
    PyObjectLocalVariable var_functions( const_str_plain_functions );
    PyObjectLocalVariable var_part( const_str_plain_part );
    PyObjectLocalVariable var_match( const_str_plain_match );
    PyObjectLocalVariable var_name( const_str_plain_name );
    PyObjectTempVariable tmp_for_loop_1__iter_value;

    // Actual function code.
    static PyFrameObject *frame_function_14__get_other_funcs_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_14__get_other_funcs_of_module_pafy ) )
    {
        if ( frame_function_14__get_other_funcs_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_14__get_other_funcs_of_module_pafy" );
#endif
            Py_DECREF( frame_function_14__get_other_funcs_of_module_pafy );
        }

        frame_function_14__get_other_funcs_of_module_pafy = MAKE_FRAME( codeobj_b0d4b5193670c898b8dc08845675be54, module_pafy );
    }

    FrameGuard frame_guard( frame_function_14__get_other_funcs_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_14__get_other_funcs_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 347 );
        DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS1( GET_MODULE_VALUE0( const_str_plain_dbg ), const_unicode_digest_9a4cb3d0e5ce2abc2a26fe45cc9ade64 ) );
        frame_guard.setLineNumber( 348 );
        var_body.assign1( LOOKUP_SUBSCRIPT( par_primary_func.asObject0(), const_unicode_plain_body ) );
        frame_guard.setLineNumber( 349 );
        var_body.assign1( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_body.asObject0(), const_str_plain_split ) ).asObject0(), const_unicode_chr_59 ) );
        frame_guard.setLineNumber( 351 );
        var_call.assign1( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_re ), const_str_plain_compile ) ).asObject0(), const_unicode_digest_9363bdfa53cbf8285ac84d6323c75946 ) );
        frame_guard.setLineNumber( 354 );
        var_dotcall.assign1( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_re ), const_str_plain_compile ) ).asObject0(), const_unicode_digest_78812d87eaec274caee109f0f7f3d7e6 ) );
        var_functions.assign1( PyDict_New() );
        frame_guard.setLineNumber( 358 );
        PyObjectTemporaryWithDel tmp_for_loop_1__for_iterator( MAKE_ITERATOR( var_body.asObject0() ) );
        PythonExceptionKeeper _caught_1;
#if PYTHON_VERSION < 300
        int _at_lineno_1 = 0;
#endif


        try
        {
            // Tried block:
            while( true )
            {
                frame_guard.setLineNumber( 358 );
                PyObject *_tmp_unpack_2 = ITERATOR_NEXT( tmp_for_loop_1__for_iterator.asObject0() );

                if ( _tmp_unpack_2 == NULL )
                {
                    break;
                }
                tmp_for_loop_1__iter_value.assign1( _tmp_unpack_2 );
                var_part.assign0( tmp_for_loop_1__iter_value.asObject0() );
                frame_guard.setLineNumber( 361 );
                {
                    PyObjectTempKeeper1 call1;
                    if ( CHECK_IF_TRUE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( var_call.asObject0(), const_str_plain_match ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), var_part.asObject0() ) ) ).asObject0() ) )
                    {
                        frame_guard.setLineNumber( 362 );
                        {
                            PyObjectTempKeeper1 call1;
                            var_match.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( var_call.asObject0(), const_str_plain_match ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), var_part.asObject0() ) ) );
                        }
                        frame_guard.setLineNumber( 363 );
                        var_name.assign1( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_match.asObject0(), const_str_plain_group ) ).asObject0(), const_int_pos_1 ) );
                        frame_guard.setLineNumber( 366 );
                        {
                            PyObjectTempKeeper0 cmp1;
                            if ( ( cmp1.assign( var_name.asObject0() ), SEQUENCE_CONTAINS_NOT_BOOL( cmp1.asObject0(), var_functions.asObject0() ) ) )
                            {
                                frame_guard.setLineNumber( 368 );
                                {
                                    PyObjectTempKeeper0 call1;
                                    PyObjectTempKeeper0 call2;
                                    {
                                        PyObjectTemporary tmp_identifier( ( call1.assign( GET_MODULE_VALUE0( const_str_plain__extract_function_from_js ) ), call2.assign( var_name.asObject0() ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), call2.asObject0(), par_js.asObject0() ) ) );
                                        PyObject *tmp_subscribed = var_functions.asObject0();
                                        SET_SUBSCRIPT( tmp_identifier.asObject0(), tmp_subscribed, var_name.asObject0() );
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        frame_guard.setLineNumber( 372 );
                        {
                            PyObjectTempKeeper1 call1;
                            if ( CHECK_IF_TRUE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( var_dotcall.asObject0(), const_str_plain_match ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), var_part.asObject0() ) ) ).asObject0() ) )
                            {
                                frame_guard.setLineNumber( 374 );
                                {
                                    PyObjectTempKeeper1 call1;
                                    var_match.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( var_dotcall.asObject0(), const_str_plain_match ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), var_part.asObject0() ) ) );
                                }
                                frame_guard.setLineNumber( 375 );
                                {
                                    PyObjectTempKeeper1 make_tuple1;
                                    var_name.assign1( BINARY_OPERATION_REMAINDER( const_unicode_digest_fffb2b4b5e45eb8109d63f2497fbdbc1, PyObjectTemporary( ( make_tuple1.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_match.asObject0(), const_str_plain_group ) ).asObject0(), const_int_pos_1 ) ), MAKE_TUPLE2( make_tuple1.asObject0(), PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_match.asObject0(), const_str_plain_group ) ).asObject0(), const_int_pos_2 ) ).asObject0() ) ) ).asObject0() ) );
                                }
                                frame_guard.setLineNumber( 378 );
                                if ( SEQUENCE_CONTAINS_BOOL( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_match.asObject0(), const_str_plain_group ) ).asObject0(), const_int_pos_2 ) ).asObject0(), PyObjectTemporary( LIST_COPY( const_list_unicode_plain_slice_unicode_plain_splice_list ) ).asObject0() ) )
                                {
                                    frame_guard.setLineNumber( 379 );
                                    CONSIDER_THREADING(); continue;
                                }
                                frame_guard.setLineNumber( 381 );
                                {
                                    PyObjectTempKeeper0 cmp1;
                                    if ( ( cmp1.assign( var_name.asObject0() ), SEQUENCE_CONTAINS_NOT_BOOL( cmp1.asObject0(), var_functions.asObject0() ) ) )
                                    {
                                        frame_guard.setLineNumber( 382 );
                                        {
                                            PyObjectTempKeeper0 call1;
                                            PyObjectTempKeeper0 call2;
                                            {
                                                PyObjectTemporary tmp_identifier( ( call1.assign( GET_MODULE_VALUE0( const_str_plain__extract_dictfunc_from_js ) ), call2.assign( var_name.asObject0() ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), call2.asObject0(), par_js.asObject0() ) ) );
                                                PyObject *tmp_subscribed = var_functions.asObject0();
                                                SET_SUBSCRIPT( tmp_identifier.asObject0(), tmp_subscribed, var_name.asObject0() );
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                CONSIDER_THREADING();
            }
        }
        catch ( PythonException &_exception )
        {
#if PYTHON_VERSION >= 300
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }
#else
            _at_lineno_1 = frame_guard.getLineNumber();
#endif

            _caught_1.save( _exception );

#if PYTHON_VERSION >= 300
            frame_guard.preserveExistingException();

            _exception.toExceptionHandler();
#endif
        }

        // Final block:
        tmp_for_loop_1__iter_value.del( true );
        tmp_for_loop_1__for_iterator.del( false );
#if PYTHON_VERSION < 300
        if ( _at_lineno_1 != 0 )
        {
           frame_guard.setLineNumber( _at_lineno_1 );
        }
#endif
        _caught_1.rethrow();
        // Final end
        frame_guard.setLineNumber( 384 );
        return var_functions.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_js.updateLocalsDict( par_primary_func.updateLocalsDict( var_name.updateLocalsDict( var_match.updateLocalsDict( var_part.updateLocalsDict( var_functions.updateLocalsDict( var_dotcall.updateLocalsDict( var_call.updateLocalsDict( var_body.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_14__get_other_funcs_of_module_pafy )
        {
           Py_DECREF( frame_function_14__get_other_funcs_of_module_pafy );
           frame_function_14__get_other_funcs_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_14__get_other_funcs_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_primary_func = NULL;
    PyObject *_python_par_js = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_get_other_funcs() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_primary_func == key )
            {
                assert( _python_par_primary_func == NULL );
                _python_par_primary_func = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_js == key )
            {
                assert( _python_par_js == NULL );
                _python_par_js = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_primary_func, key ) )
            {
                assert( _python_par_primary_func == NULL );
                _python_par_primary_func = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_js, key ) )
            {
                assert( _python_par_js == NULL );
                _python_par_js = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_get_other_funcs() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_primary_func != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_primary_func = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_primary_func == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_primary_func = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_js != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_js = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_js == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_js = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_primary_func == NULL || _python_par_js == NULL ))
    {
        PyObject *values[] = { _python_par_primary_func, _python_par_js };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_14__get_other_funcs_of_module_pafy( self, _python_par_primary_func, _python_par_js );

error_exit:;

    Py_XDECREF( _python_par_primary_func );
    Py_XDECREF( _python_par_js );

    return NULL;
}

static PyObject *dparse_function_14__get_other_funcs_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_14__get_other_funcs_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_14__get_other_funcs_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_15__getval_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_val, PyObject *_python_par_argsdict )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_val( const_str_plain_val, _python_par_val );
    PyObjectLocalParameterVariableNoDel par_argsdict( const_str_plain_argsdict, _python_par_argsdict );
    PyObjectLocalVariable var_m( const_str_plain_m );

    // Actual function code.
    static PyFrameObject *frame_function_15__getval_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_15__getval_of_module_pafy ) )
    {
        if ( frame_function_15__getval_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_15__getval_of_module_pafy" );
#endif
            Py_DECREF( frame_function_15__getval_of_module_pafy );
        }

        frame_function_15__getval_of_module_pafy = MAKE_FRAME( codeobj_5dadda9c95c767a38596a2cae308063a, module_pafy );
    }

    FrameGuard frame_guard( frame_function_15__getval_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_15__getval_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 389 );
        {
            PyObjectTempKeeper1 call1;
            var_m.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_re ), const_str_plain_match ) ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), const_unicode_digest_02021d7bcd3a391ee8ba2e87386e2a4a, par_val.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 391 );
        if ( CHECK_IF_TRUE( var_m.asObject0() ) )
        {
            frame_guard.setLineNumber( 392 );
            return TO_INT( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_m.asObject0(), const_str_plain_group ) ).asObject0(), const_int_pos_1 ) ).asObject0() );
        }
        else
        {
            frame_guard.setLineNumber( 394 );
            {
                PyObjectTempKeeper0 cmp1;
                if ( ( cmp1.assign( par_val.asObject0() ), SEQUENCE_CONTAINS_BOOL( cmp1.asObject0(), par_argsdict.asObject0() ) ) )
                {
                    frame_guard.setLineNumber( 395 );
                    {
                        PyObjectTempKeeper0 subscr1;
                        return ( subscr1.assign( par_argsdict.asObject0() ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), par_val.asObject0() ) );
                    }
                }
                else
                {
                    frame_guard.setLineNumber( 398 );
                    {
                        PyObjectTempKeeper0 make_tuple1;
                        RAISE_EXCEPTION_WITH_TYPE( PyObjectTemporary( CALL_FUNCTION_WITH_POSARGS( PyExc_IOError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( const_unicode_digest_2dff7f8fed1a6c84c4c2b44b6fd91e21, PyObjectTemporary( ( make_tuple1.assign( par_val.asObject0() ), MAKE_TUPLE2( make_tuple1.asObject0(), par_argsdict.asObject0() ) ) ).asObject0() ) ).asObject0() ) ).asObject0() ) ).asObject0(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject0() );
                    }
                }
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_argsdict.updateLocalsDict( par_val.updateLocalsDict( var_m.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_15__getval_of_module_pafy )
        {
           Py_DECREF( frame_function_15__getval_of_module_pafy );
           frame_function_15__getval_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_15__getval_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_val = NULL;
    PyObject *_python_par_argsdict = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_getval() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_val == key )
            {
                assert( _python_par_val == NULL );
                _python_par_val = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_argsdict == key )
            {
                assert( _python_par_argsdict == NULL );
                _python_par_argsdict = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_val, key ) )
            {
                assert( _python_par_val == NULL );
                _python_par_val = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_argsdict, key ) )
            {
                assert( _python_par_argsdict == NULL );
                _python_par_argsdict = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_getval() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_val != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_val = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_val == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_val = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_argsdict != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_argsdict = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_argsdict == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_argsdict = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_val == NULL || _python_par_argsdict == NULL ))
    {
        PyObject *values[] = { _python_par_val, _python_par_argsdict };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_15__getval_of_module_pafy( self, _python_par_val, _python_par_argsdict );

error_exit:;

    Py_XDECREF( _python_par_val );
    Py_XDECREF( _python_par_argsdict );

    return NULL;
}

static PyObject *dparse_function_15__getval_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_15__getval_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_15__getval_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_16__get_func_from_call_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_caller, PyObject *_python_par_name, PyObject *_python_par_arguments, PyObject *_python_par_js_url )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_caller( const_str_plain_caller, _python_par_caller );
    PyObjectLocalParameterVariableNoDel par_name( const_str_plain_name, _python_par_name );
    PyObjectLocalParameterVariableNoDel par_arguments( const_str_plain_arguments, _python_par_arguments );
    PyObjectLocalParameterVariableNoDel par_js_url( const_str_plain_js_url, _python_par_js_url );
    PyObjectLocalVariable var_newfunction( const_str_plain_newfunction );
    PyObjectLocalVariable var_n( const_str_plain_n );
    PyObjectLocalVariable var_arg( const_str_plain_arg );
    PyObjectLocalVariable var_value( const_str_plain_value );
    PyObjectLocalVariable var_param( const_str_plain_param );
    PyObjectTempVariable tmp_for_loop_1__iter_value;
    PyObjectTempVariable tmp_tuple_unpack_1__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_1__element_1;
    PyObjectTempVariable tmp_tuple_unpack_1__element_2;

    // Actual function code.
    static PyFrameObject *frame_function_16__get_func_from_call_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_16__get_func_from_call_of_module_pafy ) )
    {
        if ( frame_function_16__get_func_from_call_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_16__get_func_from_call_of_module_pafy" );
#endif
            Py_DECREF( frame_function_16__get_func_from_call_of_module_pafy );
        }

        frame_function_16__get_func_from_call_of_module_pafy = MAKE_FRAME( codeobj_7458bb613e1aea4875a6692a816f2794, module_pafy );
    }

    FrameGuard frame_guard( frame_function_16__get_func_from_call_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_16__get_func_from_call_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 410 );
        {
            PyObjectTempKeeper1 subscr1;
            PyObjectTempKeeper1 subscr2;
            var_newfunction.assign1( ( subscr2.assign( ( subscr1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_Pafy ), const_str_plain_funcmap ) ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), par_js_url.asObject0() ) ) ), LOOKUP_SUBSCRIPT( subscr2.asObject0(), par_name.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 411 );
        SET_SUBSCRIPT( PyObjectTemporary( PyDict_New() ).asObject0(), var_newfunction.asObject0(), const_unicode_plain_args );
        frame_guard.setLineNumber( 413 );
        PyObjectTemporaryWithDel tmp_for_loop_1__for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_enumerate ), par_arguments.asObject0() ) ).asObject0() ) );
        PythonExceptionKeeper _caught_1;
#if PYTHON_VERSION < 300
        int _at_lineno_1 = 0;
#endif


        try
        {
            // Tried block:
            while( true )
            {
                frame_guard.setLineNumber( 413 );
                PyObject *_tmp_unpack_2 = ITERATOR_NEXT( tmp_for_loop_1__for_iterator.asObject0() );

                if ( _tmp_unpack_2 == NULL )
                {
                    break;
                }
                tmp_for_loop_1__iter_value.assign1( _tmp_unpack_2 );
                PythonExceptionKeeper _caught_3;
#if PYTHON_VERSION < 300
                int _at_lineno_3 = 0;
#endif


                try
                {
                    // Tried block:
                    tmp_tuple_unpack_1__source_iter.assign1( MAKE_ITERATOR( tmp_for_loop_1__iter_value.asObject0() ) );
                    tmp_tuple_unpack_1__element_1.assign1( UNPACK_NEXT( tmp_tuple_unpack_1__source_iter.asObject0(), 0 ) );
                    tmp_tuple_unpack_1__element_2.assign1( UNPACK_NEXT( tmp_tuple_unpack_1__source_iter.asObject0(), 1 ) );
                    UNPACK_ITERATOR_CHECK( tmp_tuple_unpack_1__source_iter.asObject0(), 2 );
                    var_n.assign0( tmp_tuple_unpack_1__element_1.asObject0() );
                    var_arg.assign0( tmp_tuple_unpack_1__element_2.asObject0() );
                }
                catch ( PythonException &_exception )
                {
#if PYTHON_VERSION >= 300
                    if ( !_exception.hasTraceback() )
                    {
                        _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                    }
                    else
                    {
                        _exception.addTraceback( frame_guard.getFrame0() );
                    }
#else
                    _at_lineno_3 = frame_guard.getLineNumber();
#endif

                    _caught_3.save( _exception );

#if PYTHON_VERSION >= 300
                    frame_guard.preserveExistingException();

                    _exception.toExceptionHandler();
#endif
                }

                // Final block:
                tmp_tuple_unpack_1__source_iter.del( true );
                tmp_tuple_unpack_1__element_1.del( true );
                tmp_tuple_unpack_1__element_2.del( true );
#if PYTHON_VERSION < 300
                if ( _at_lineno_3 != 0 )
                {
                   frame_guard.setLineNumber( _at_lineno_3 );
                }
#endif
                _caught_3.rethrow();
                // Final end
                frame_guard.setLineNumber( 414 );
                {
                    PyObjectTempKeeper0 call1;
                    PyObjectTempKeeper0 call2;
                    var_value.assign1( ( call1.assign( GET_MODULE_VALUE0( const_str_plain__getval ) ), call2.assign( var_arg.asObject0() ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), call2.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( par_caller.asObject0(), const_unicode_plain_args ) ).asObject0() ) ) );
                }
                frame_guard.setLineNumber( 417 );
                {
                    PyObjectTempKeeper0 cmp1;
                    if ( ( cmp1.assign( var_n.asObject0() ), RICH_COMPARE_BOOL_LT( cmp1.asObject0(), PyObjectTemporary( BUILTIN_LEN( PyObjectTemporary( LOOKUP_SUBSCRIPT( var_newfunction.asObject0(), const_unicode_plain_parameters ) ).asObject0() ) ).asObject0() ) ) )
                    {
                        frame_guard.setLineNumber( 418 );
                        {
                            PyObjectTempKeeper1 subscr1;
                            var_param.assign1( ( subscr1.assign( LOOKUP_SUBSCRIPT( var_newfunction.asObject0(), const_unicode_plain_parameters ) ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), var_n.asObject0() ) ) );
                        }
                        frame_guard.setLineNumber( 419 );
                        {
                            PyObject *tmp_identifier = var_value.asObject0();
                            PyObjectTemporary tmp_subscribed( LOOKUP_SUBSCRIPT( var_newfunction.asObject0(), const_unicode_plain_args ) );
                            SET_SUBSCRIPT( tmp_identifier, tmp_subscribed.asObject0(), var_param.asObject0() );
                        }
                    }
                }

                CONSIDER_THREADING();
            }
        }
        catch ( PythonException &_exception )
        {
#if PYTHON_VERSION >= 300
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }
#else
            _at_lineno_1 = frame_guard.getLineNumber();
#endif

            _caught_1.save( _exception );

#if PYTHON_VERSION >= 300
            frame_guard.preserveExistingException();

            _exception.toExceptionHandler();
#endif
        }

        // Final block:
        tmp_for_loop_1__iter_value.del( true );
        tmp_for_loop_1__for_iterator.del( false );
#if PYTHON_VERSION < 300
        if ( _at_lineno_1 != 0 )
        {
           frame_guard.setLineNumber( _at_lineno_1 );
        }
#endif
        _caught_1.rethrow();
        // Final end
        frame_guard.setLineNumber( 421 );
        return var_newfunction.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_js_url.updateLocalsDict( par_arguments.updateLocalsDict( par_name.updateLocalsDict( par_caller.updateLocalsDict( var_param.updateLocalsDict( var_value.updateLocalsDict( var_arg.updateLocalsDict( var_n.updateLocalsDict( var_newfunction.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_16__get_func_from_call_of_module_pafy )
        {
           Py_DECREF( frame_function_16__get_func_from_call_of_module_pafy );
           frame_function_16__get_func_from_call_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_16__get_func_from_call_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_caller = NULL;
    PyObject *_python_par_name = NULL;
    PyObject *_python_par_arguments = NULL;
    PyObject *_python_par_js_url = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_get_func_from_call() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_caller == key )
            {
                assert( _python_par_caller == NULL );
                _python_par_caller = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_name == key )
            {
                assert( _python_par_name == NULL );
                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_arguments == key )
            {
                assert( _python_par_arguments == NULL );
                _python_par_arguments = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_js_url == key )
            {
                assert( _python_par_js_url == NULL );
                _python_par_js_url = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_caller, key ) )
            {
                assert( _python_par_caller == NULL );
                _python_par_caller = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_name, key ) )
            {
                assert( _python_par_name == NULL );
                _python_par_name = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_arguments, key ) )
            {
                assert( _python_par_arguments == NULL );
                _python_par_arguments = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_js_url, key ) )
            {
                assert( _python_par_js_url == NULL );
                _python_par_js_url = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_get_func_from_call() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_caller != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_caller = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_caller == NULL )
    {
        if ( 0 + self->m_defaults_given >= 4  )
        {
            _python_par_caller = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_name != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_name = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_name == NULL )
    {
        if ( 1 + self->m_defaults_given >= 4  )
        {
            _python_par_name = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_arguments != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_arguments = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_arguments == NULL )
    {
        if ( 2 + self->m_defaults_given >= 4  )
        {
            _python_par_arguments = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 3 < args_given ))
    {
         if (unlikely( _python_par_js_url != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 3 );
             goto error_exit;
         }

        _python_par_js_url = INCREASE_REFCOUNT( args[ 3 ] );
    }
    else if ( _python_par_js_url == NULL )
    {
        if ( 3 + self->m_defaults_given >= 4  )
        {
            _python_par_js_url = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 3 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_caller == NULL || _python_par_name == NULL || _python_par_arguments == NULL || _python_par_js_url == NULL ))
    {
        PyObject *values[] = { _python_par_caller, _python_par_name, _python_par_arguments, _python_par_js_url };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_16__get_func_from_call_of_module_pafy( self, _python_par_caller, _python_par_name, _python_par_arguments, _python_par_js_url );

error_exit:;

    Py_XDECREF( _python_par_caller );
    Py_XDECREF( _python_par_name );
    Py_XDECREF( _python_par_arguments );
    Py_XDECREF( _python_par_js_url );

    return NULL;
}

static PyObject *dparse_function_16__get_func_from_call_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4 )
    {
        return impl_function_16__get_func_from_call_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_16__get_func_from_call_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_17__solve_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_f, PyObject *_python_par_js_url, PyObject *_python_par_returns )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_f( const_str_plain_f, _python_par_f );
    PyObjectLocalParameterVariableNoDel par_js_url( const_str_plain_js_url, _python_par_js_url );
    PyObjectLocalParameterVariableNoDel par_returns( const_str_plain_returns, _python_par_returns );
    PyObjectLocalVariable var_resv( const_str_plain_resv );
    PyObjectLocalVariable var_patterns( const_str_plain_patterns );
    PyObjectLocalVariable var_parts( const_str_plain_parts );
    PyObjectLocalVariable var_part( const_str_plain_part );
    PyObjectLocalVariable var_name( const_str_plain_name );
    PyObjectLocalVariable var_n( const_str_plain_n );
    PyObjectLocalVariable var_p( const_str_plain_p );
    PyObjectLocalVariable var_m( const_str_plain_m );
    PyObjectLocalVariable var_lhs( const_str_plain_lhs );
    PyObjectLocalVariable var_dic( const_str_plain_dic );
    PyObjectLocalVariable var_key( const_str_plain_key );
    PyObjectLocalVariable var_args( const_str_plain_args );
    PyObjectLocalVariable var_funcname( const_str_plain_funcname );
    PyObjectLocalVariable var_newfunc( const_str_plain_newfunc );
    PyObjectLocalVariable var_changed_args( const_str_plain_changed_args );
    PyObjectLocalVariable var_arg( const_str_plain_arg );
    PyObjectLocalVariable var_b( const_str_plain_b );
    PyObjectLocalVariable var_c( const_str_plain_c );
    PyObjectLocalVariable var_vals( const_str_plain_vals );
    PyObjectLocalVariable var_a( const_str_plain_a );
    PyObjectLocalVariable var_d( const_str_plain_d );
    PyObjectLocalVariable var_e( const_str_plain_e );
    PyObjectLocalVariable var_x( const_str_plain_x );
    PyObjectTempVariable tmp_for_loop_1__iter_value;
    PyObjectTempVariable tmp_for_loop_2__iter_value;
    PyObjectTempVariable tmp_tuple_unpack_1__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_1__element_1;
    PyObjectTempVariable tmp_tuple_unpack_1__element_2;
    PyObjectTempVariable tmp_tuple_unpack_2__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_2__element_1;
    PyObjectTempVariable tmp_tuple_unpack_2__element_2;
    PyObjectTempVariable tmp_tuple_unpack_3__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_3__element_1;
    PyObjectTempVariable tmp_tuple_unpack_3__element_2;
    PyObjectTempVariable tmp_tuple_unpack_3__element_3;
    PyObjectTempVariable tmp_tuple_unpack_3__element_4;
    PyObjectTempVariable tmp_tuple_unpack_4__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_4__element_1;
    PyObjectTempVariable tmp_tuple_unpack_4__element_2;
    PyObjectTempVariable tmp_tuple_unpack_4__element_3;
    PyObjectTempVariable tmp_for_loop_3__iter_value;
    PyObjectTempVariable tmp_tuple_unpack_5__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_5__element_1;
    PyObjectTempVariable tmp_tuple_unpack_5__element_2;
    PyObjectTempVariable tmp_tuple_unpack_5__element_3;
    PyObjectTempVariable tmp_tuple_unpack_6__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_6__element_1;
    PyObjectTempVariable tmp_tuple_unpack_6__element_2;
    PyObjectTempVariable tmp_tuple_unpack_7__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_7__element_1;
    PyObjectTempVariable tmp_tuple_unpack_7__element_2;
    PyObjectTempVariable tmp_tuple_unpack_7__element_3;
    PyObjectTempVariable tmp_tuple_unpack_7__element_4;
    PyObjectTempVariable tmp_tuple_unpack_7__element_5;
    PyObjectTempVariable tmp_tuple_unpack_8__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_8__element_1;
    PyObjectTempVariable tmp_tuple_unpack_8__element_2;
    PyObjectTempVariable tmp_tuple_unpack_8__element_3;
    PyObjectTempVariable tmp_tuple_unpack_9__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_9__element_1;
    PyObjectTempVariable tmp_tuple_unpack_9__element_2;
    PyObjectTempVariable tmp_tuple_unpack_9__element_3;
    PyObjectTempVariable tmp_tuple_unpack_10__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_10__element_1;
    PyObjectTempVariable tmp_tuple_unpack_10__element_2;
    PyObjectTempVariable tmp_tuple_unpack_11__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_11__element_1;
    PyObjectTempVariable tmp_tuple_unpack_11__element_2;
    PyObjectTempVariable tmp_tuple_unpack_11__element_3;

    // Actual function code.
    var_resv.assign0( const_unicode_digest_f7b5cebdc8f7710e84dbaf9218aea971 );
    static PyFrameObject *frame_function_17__solve_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_17__solve_of_module_pafy ) )
    {
        if ( frame_function_17__solve_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_17__solve_of_module_pafy" );
#endif
            Py_DECREF( frame_function_17__solve_of_module_pafy );
        }

        frame_function_17__solve_of_module_pafy = MAKE_FRAME( codeobj_9870a17a09fb79250efa3555bfea250a, module_pafy );
    }

    FrameGuard frame_guard( frame_function_17__solve_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_17__solve_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 428 );
        {
            PyObjectTempKeeper1 make_dict1;
            var_patterns.assign1( ( frame_guard.setLineNumber( 441 ), make_dict1.assign( BINARY_OPERATION_REMAINDER( const_unicode_digest_319c0933321df1b8b2599ca22f93bd3c, var_resv.asObject0() ) ), frame_guard.setLineNumber( 443 ), MAKE_DICT14( const_unicode_digest_ee966f4fad10435575ca7caa00705cc6, const_unicode_plain_split_or_join, const_unicode_digest_841bcf6696eeb1e595c509c6f757a593, const_unicode_plain_func_call, const_unicode_digest_24f01439674880eae26db45f81fc4cac, const_unicode_plain_x1, const_unicode_digest_fd17debea66723b96b730c3d9b314601, const_unicode_plain_x2, const_unicode_digest_60b5bb1428684b9ec891688bb858ae7e, const_unicode_plain_x3, const_unicode_digest_532e9ab52f3c3b27341fe728e2027da6, const_unicode_plain_return, const_unicode_digest_03615701c23661a8ad80ff19754ebee5, const_unicode_plain_reverse, const_unicode_digest_79dd3ca457f20a1f63ef3c52f631b151, const_unicode_plain_reverse_noass, const_unicode_digest_be8e182cf6a542e03f4ca6fc67103bd8, const_unicode_plain_return_reverse, const_unicode_digest_42ded5c8691dac2ea20c455826cc7318, const_unicode_plain_slice, const_unicode_digest_87a6f211fcdfb89a59f2f8733771f879, const_unicode_plain_splice_noass, const_unicode_digest_da1cff02ae62cb18210e7caa724f44e3, const_unicode_plain_return_slice, make_dict1.asObject0(), const_unicode_plain_func_call_dict, PyObjectTemporary( BINARY_OPERATION_REMAINDER( const_unicode_digest_4913ef04e441f9b28ad1ffd80ffd644d, var_resv.asObject0() ) ).asObject0(), const_unicode_plain_func_call_dict_noret ) ) );
        }
        frame_guard.setLineNumber( 447 );
        var_parts.assign1( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_SUBSCRIPT( par_f.asObject0(), const_unicode_plain_body ) ).asObject0(), const_str_plain_split ) ).asObject0(), const_unicode_chr_59 ) );
        frame_guard.setLineNumber( 449 );
        PyObjectTemporaryWithDel tmp_for_loop_1__for_iterator( MAKE_ITERATOR( var_parts.asObject0() ) );
        PythonExceptionKeeper _caught_1;
#if PYTHON_VERSION < 300
        int _at_lineno_1 = 0;
#endif

        PyObjectTempKeeper1 _return_value_1;

        try
        {
            // Tried block:
            while( true )
            {
                frame_guard.setLineNumber( 449 );
                PyObject *_tmp_unpack_2 = ITERATOR_NEXT( tmp_for_loop_1__for_iterator.asObject0() );

                if ( _tmp_unpack_2 == NULL )
                {
                    break;
                }
                tmp_for_loop_1__iter_value.assign1( _tmp_unpack_2 );
                var_part.assign0( tmp_for_loop_1__iter_value.asObject0() );
                var_name.assign0( const_unicode_empty );
                PyObject *tmp_for_loop_2__break_indicator = Py_False;
                frame_guard.setLineNumber( 454 );
                PyObjectTemporaryWithDel tmp_for_loop_2__for_iterator( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_patterns.asObject0(), const_str_plain_items ) ).asObject0() ) ).asObject0() ) );
                PythonExceptionKeeper _caught_3;
#if PYTHON_VERSION < 300
                int _at_lineno_3 = 0;
#endif


                try
                {
                    // Tried block:
                    while( true )
                    {
                        frame_guard.setLineNumber( 454 );
                        PyObject *_tmp_unpack_4 = ITERATOR_NEXT( tmp_for_loop_2__for_iterator.asObject0() );

                        if ( _tmp_unpack_4 == NULL )
                        {
                            tmp_for_loop_2__break_indicator = Py_True;
                            break;
                        }
                        tmp_for_loop_2__iter_value.assign1( _tmp_unpack_4 );
                        PythonExceptionKeeper _caught_5;
#if PYTHON_VERSION < 300
                        int _at_lineno_5 = 0;
#endif


                        try
                        {
                            // Tried block:
                            tmp_tuple_unpack_1__source_iter.assign1( MAKE_ITERATOR( tmp_for_loop_2__iter_value.asObject0() ) );
                            tmp_tuple_unpack_1__element_1.assign1( UNPACK_NEXT( tmp_tuple_unpack_1__source_iter.asObject0(), 0 ) );
                            tmp_tuple_unpack_1__element_2.assign1( UNPACK_NEXT( tmp_tuple_unpack_1__source_iter.asObject0(), 1 ) );
                            UNPACK_ITERATOR_CHECK( tmp_tuple_unpack_1__source_iter.asObject0(), 2 );
                            var_n.assign0( tmp_tuple_unpack_1__element_1.asObject0() );
                            var_p.assign0( tmp_tuple_unpack_1__element_2.asObject0() );
                        }
                        catch ( PythonException &_exception )
                        {
#if PYTHON_VERSION >= 300
                            if ( !_exception.hasTraceback() )
                            {
                                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                            }
                            else
                            {
                                _exception.addTraceback( frame_guard.getFrame0() );
                            }
#else
                            _at_lineno_5 = frame_guard.getLineNumber();
#endif

                            _caught_5.save( _exception );

#if PYTHON_VERSION >= 300
                            frame_guard.preserveExistingException();

                            _exception.toExceptionHandler();
#endif
                        }

                        // Final block:
                        tmp_tuple_unpack_1__source_iter.del( true );
                        tmp_tuple_unpack_1__element_1.del( true );
                        tmp_tuple_unpack_1__element_2.del( true );
#if PYTHON_VERSION < 300
                        if ( _at_lineno_5 != 0 )
                        {
                           frame_guard.setLineNumber( _at_lineno_5 );
                        }
#endif
                        _caught_5.rethrow();
                        // Final end
                        frame_guard.setLineNumber( 455 );
                        PythonExceptionKeeper _caught_6;
#if PYTHON_VERSION < 300
                        int _at_lineno_6 = 0;
#endif


                        try
                        {
                            // Tried block:
                            {
                                PyObjectTempKeeper1 call1;
                                PyObjectTempKeeper0 call2;
                                PyObjectTempKeeper1 make_tuple1;
                                tmp_tuple_unpack_2__source_iter.assign1( MAKE_ITERATOR( PyObjectTemporary( ( make_tuple1.assign( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_re ), const_str_plain_match ) ), call2.assign( var_p.asObject0() ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), call2.asObject0(), var_part.asObject0() ) ) ), MAKE_TUPLE2( make_tuple1.asObject0(), var_n.asObject0() ) ) ).asObject0() ) );
                            }
                            tmp_tuple_unpack_2__element_1.assign1( UNPACK_NEXT( tmp_tuple_unpack_2__source_iter.asObject0(), 0 ) );
                            tmp_tuple_unpack_2__element_2.assign1( UNPACK_NEXT( tmp_tuple_unpack_2__source_iter.asObject0(), 1 ) );
                            UNPACK_ITERATOR_CHECK( tmp_tuple_unpack_2__source_iter.asObject0(), 2 );
                            var_m.assign0( tmp_tuple_unpack_2__element_1.asObject0() );
                            var_name.assign0( tmp_tuple_unpack_2__element_2.asObject0() );
                        }
                        catch ( PythonException &_exception )
                        {
#if PYTHON_VERSION >= 300
                            if ( !_exception.hasTraceback() )
                            {
                                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                            }
                            else
                            {
                                _exception.addTraceback( frame_guard.getFrame0() );
                            }
#else
                            _at_lineno_6 = frame_guard.getLineNumber();
#endif

                            _caught_6.save( _exception );

#if PYTHON_VERSION >= 300
                            frame_guard.preserveExistingException();

                            _exception.toExceptionHandler();
#endif
                        }

                        // Final block:
                        tmp_tuple_unpack_2__source_iter.del( true );
                        tmp_tuple_unpack_2__element_1.del( true );
                        tmp_tuple_unpack_2__element_2.del( true );
#if PYTHON_VERSION < 300
                        if ( _at_lineno_6 != 0 )
                        {
                           frame_guard.setLineNumber( _at_lineno_6 );
                        }
#endif
                        _caught_6.rethrow();
                        // Final end
                        frame_guard.setLineNumber( 457 );
                        if ( CHECK_IF_TRUE( var_m.asObject0() ) )
                        {
                            frame_guard.setLineNumber( 458 );
                            break;
                        }

                        CONSIDER_THREADING();
                    }
                }
                catch ( PythonException &_exception )
                {
#if PYTHON_VERSION >= 300
                    if ( !_exception.hasTraceback() )
                    {
                        _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                    }
                    else
                    {
                        _exception.addTraceback( frame_guard.getFrame0() );
                    }
#else
                    _at_lineno_3 = frame_guard.getLineNumber();
#endif

                    _caught_3.save( _exception );

#if PYTHON_VERSION >= 300
                    frame_guard.preserveExistingException();

                    _exception.toExceptionHandler();
#endif
                }

                // Final block:
                tmp_for_loop_2__iter_value.del( true );
                tmp_for_loop_2__for_iterator.del( false );
#if PYTHON_VERSION < 300
                if ( _at_lineno_3 != 0 )
                {
                   frame_guard.setLineNumber( _at_lineno_3 );
                }
#endif
                _caught_3.rethrow();
                // Final end
                frame_guard.setLineNumber( 454 );
                if ( ( tmp_for_loop_2__break_indicator == Py_True ) )
                {
                    frame_guard.setLineNumber( 460 );
                    RAISE_EXCEPTION_WITH_TYPE( PyObjectTemporary( CALL_FUNCTION_WITH_POSARGS( PyExc_IOError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( const_unicode_digest_c1a38f4c0ed304eb8f4a1d8c25915194, var_part.asObject0() ) ).asObject0() ) ).asObject0() ) ).asObject0(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject0() );
                }
                frame_guard.setLineNumber( 462 );
                if ( (!( RICH_COMPARE_BOOL_EQ( var_name.asObject0(), const_unicode_plain_split_or_join ) )) )
                {
                    frame_guard.setLineNumber( 465 );
                    if ( RICH_COMPARE_BOOL_EQ( var_name.asObject0(), const_unicode_plain_func_call_dict ) )
                    {
                        frame_guard.setLineNumber( 466 );
                        PythonExceptionKeeper _caught_7;
#if PYTHON_VERSION < 300
                        int _at_lineno_7 = 0;
#endif


                        try
                        {
                            // Tried block:
                            tmp_tuple_unpack_3__source_iter.assign1( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS4( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_m.asObject0(), const_str_plain_group ) ).asObject0(), const_int_pos_1, const_int_pos_2, const_int_pos_3, const_int_pos_4 ) ).asObject0() ) );
                            tmp_tuple_unpack_3__element_1.assign1( UNPACK_NEXT( tmp_tuple_unpack_3__source_iter.asObject0(), 0 ) );
                            tmp_tuple_unpack_3__element_2.assign1( UNPACK_NEXT( tmp_tuple_unpack_3__source_iter.asObject0(), 1 ) );
                            tmp_tuple_unpack_3__element_3.assign1( UNPACK_NEXT( tmp_tuple_unpack_3__source_iter.asObject0(), 2 ) );
                            tmp_tuple_unpack_3__element_4.assign1( UNPACK_NEXT( tmp_tuple_unpack_3__source_iter.asObject0(), 3 ) );
                            UNPACK_ITERATOR_CHECK( tmp_tuple_unpack_3__source_iter.asObject0(), 4 );
                            var_lhs.assign0( tmp_tuple_unpack_3__element_1.asObject0() );
                            var_dic.assign0( tmp_tuple_unpack_3__element_2.asObject0() );
                            var_key.assign0( tmp_tuple_unpack_3__element_3.asObject0() );
                            var_args.assign0( tmp_tuple_unpack_3__element_4.asObject0() );
                        }
                        catch ( PythonException &_exception )
                        {
#if PYTHON_VERSION >= 300
                            if ( !_exception.hasTraceback() )
                            {
                                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                            }
                            else
                            {
                                _exception.addTraceback( frame_guard.getFrame0() );
                            }
#else
                            _at_lineno_7 = frame_guard.getLineNumber();
#endif

                            _caught_7.save( _exception );

#if PYTHON_VERSION >= 300
                            frame_guard.preserveExistingException();

                            _exception.toExceptionHandler();
#endif
                        }

                        // Final block:
                        tmp_tuple_unpack_3__source_iter.del( true );
                        tmp_tuple_unpack_3__element_1.del( true );
                        tmp_tuple_unpack_3__element_2.del( true );
                        tmp_tuple_unpack_3__element_3.del( true );
                        tmp_tuple_unpack_3__element_4.del( true );
#if PYTHON_VERSION < 300
                        if ( _at_lineno_7 != 0 )
                        {
                           frame_guard.setLineNumber( _at_lineno_7 );
                        }
#endif
                        _caught_7.rethrow();
                        // Final end
                        frame_guard.setLineNumber( 467 );
                        {
                            PyObjectTempKeeper0 make_tuple1;
                            var_funcname.assign1( BINARY_OPERATION_REMAINDER( const_unicode_digest_fffb2b4b5e45eb8109d63f2497fbdbc1, PyObjectTemporary( ( make_tuple1.assign( var_dic.asObject0() ), MAKE_TUPLE2( make_tuple1.asObject0(), var_key.asObject0() ) ) ).asObject0() ) );
                        }
                        frame_guard.setLineNumber( 468 );
                        {
                            PyObjectTempKeeper0 call1;
                            PyObjectTempKeeper0 call2;
                            PyObjectTempKeeper0 call3;
                            PyObjectTempKeeper1 call4;
                            var_newfunc.assign1( ( call1.assign( GET_MODULE_VALUE0( const_str_plain__get_func_from_call ) ), call2.assign( par_f.asObject0() ), call3.assign( var_funcname.asObject0() ), call4.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_args.asObject0(), const_str_plain_split ) ).asObject0(), const_unicode_chr_44 ) ), CALL_FUNCTION_WITH_ARGS4( call1.asObject0(), call2.asObject0(), call3.asObject0(), call4.asObject0(), par_js_url.asObject0() ) ) );
                        }
                        frame_guard.setLineNumber( 469 );
                        {
                            PyObjectTempKeeper0 call1;
                            PyObjectTempKeeper0 call2;
                            {
                                PyObjectTemporary tmp_identifier( ( call1.assign( GET_MODULE_VALUE0( const_str_plain__solve ) ), call2.assign( var_newfunc.asObject0() ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), call2.asObject0(), par_js_url.asObject0() ) ) );
                                PyObjectTemporary tmp_subscribed( LOOKUP_SUBSCRIPT( par_f.asObject0(), const_unicode_plain_args ) );
                                SET_SUBSCRIPT( tmp_identifier.asObject0(), tmp_subscribed.asObject0(), var_lhs.asObject0() );
                            }
                        }
                    }
                    else
                    {
                        frame_guard.setLineNumber( 471 );
                        if ( RICH_COMPARE_BOOL_EQ( var_name.asObject0(), const_unicode_plain_func_call_dict_noret ) )
                        {
                            frame_guard.setLineNumber( 472 );
                            PythonExceptionKeeper _caught_8;
#if PYTHON_VERSION < 300
                            int _at_lineno_8 = 0;
#endif


                            try
                            {
                                // Tried block:
                                tmp_tuple_unpack_4__source_iter.assign1( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS3( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_m.asObject0(), const_str_plain_group ) ).asObject0(), const_int_pos_1, const_int_pos_2, const_int_pos_3 ) ).asObject0() ) );
                                tmp_tuple_unpack_4__element_1.assign1( UNPACK_NEXT( tmp_tuple_unpack_4__source_iter.asObject0(), 0 ) );
                                tmp_tuple_unpack_4__element_2.assign1( UNPACK_NEXT( tmp_tuple_unpack_4__source_iter.asObject0(), 1 ) );
                                tmp_tuple_unpack_4__element_3.assign1( UNPACK_NEXT( tmp_tuple_unpack_4__source_iter.asObject0(), 2 ) );
                                UNPACK_ITERATOR_CHECK( tmp_tuple_unpack_4__source_iter.asObject0(), 3 );
                                var_dic.assign0( tmp_tuple_unpack_4__element_1.asObject0() );
                                var_key.assign0( tmp_tuple_unpack_4__element_2.asObject0() );
                                var_args.assign0( tmp_tuple_unpack_4__element_3.asObject0() );
                            }
                            catch ( PythonException &_exception )
                            {
#if PYTHON_VERSION >= 300
                                if ( !_exception.hasTraceback() )
                                {
                                    _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                                }
                                else
                                {
                                    _exception.addTraceback( frame_guard.getFrame0() );
                                }
#else
                                _at_lineno_8 = frame_guard.getLineNumber();
#endif

                                _caught_8.save( _exception );

#if PYTHON_VERSION >= 300
                                frame_guard.preserveExistingException();

                                _exception.toExceptionHandler();
#endif
                            }

                            // Final block:
                            tmp_tuple_unpack_4__source_iter.del( true );
                            tmp_tuple_unpack_4__element_1.del( true );
                            tmp_tuple_unpack_4__element_2.del( true );
                            tmp_tuple_unpack_4__element_3.del( true );
#if PYTHON_VERSION < 300
                            if ( _at_lineno_8 != 0 )
                            {
                               frame_guard.setLineNumber( _at_lineno_8 );
                            }
#endif
                            _caught_8.rethrow();
                            // Final end
                            frame_guard.setLineNumber( 473 );
                            {
                                PyObjectTempKeeper0 make_tuple1;
                                var_funcname.assign1( BINARY_OPERATION_REMAINDER( const_unicode_digest_fffb2b4b5e45eb8109d63f2497fbdbc1, PyObjectTemporary( ( make_tuple1.assign( var_dic.asObject0() ), MAKE_TUPLE2( make_tuple1.asObject0(), var_key.asObject0() ) ) ).asObject0() ) );
                            }
                            frame_guard.setLineNumber( 474 );
                            {
                                PyObjectTempKeeper0 call1;
                                PyObjectTempKeeper0 call2;
                                PyObjectTempKeeper0 call3;
                                PyObjectTempKeeper1 call4;
                                var_newfunc.assign1( ( call1.assign( GET_MODULE_VALUE0( const_str_plain__get_func_from_call ) ), call2.assign( par_f.asObject0() ), call3.assign( var_funcname.asObject0() ), call4.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_args.asObject0(), const_str_plain_split ) ).asObject0(), const_unicode_chr_44 ) ), CALL_FUNCTION_WITH_ARGS4( call1.asObject0(), call2.asObject0(), call3.asObject0(), call4.asObject0(), par_js_url.asObject0() ) ) );
                            }
                            frame_guard.setLineNumber( 475 );
                            {
                                PyObjectTempKeeper0 call1;
                                PyObjectTempKeeper0 make_tuple1;
                                var_changed_args.assign1( ( call1.assign( GET_MODULE_VALUE0( const_str_plain__solve ) ), CALL_FUNCTION( call1.asObject0(), PyObjectTemporary( ( make_tuple1.assign( var_newfunc.asObject0() ), MAKE_TUPLE2( make_tuple1.asObject0(), par_js_url.asObject0() ) ) ).asObject0(), PyObjectTemporary( PyDict_Copy( const_dict_f3e321b3a150ab5289533a275c949f1a ) ).asObject0() ) ) );
                            }
                            frame_guard.setLineNumber( 477 );
                            PyObjectTemporaryWithDel tmp_for_loop_3__for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_SUBSCRIPT( par_f.asObject0(), const_unicode_plain_args ) ).asObject0() ) );
                            PythonExceptionKeeper _caught_9;
#if PYTHON_VERSION < 300
                            int _at_lineno_9 = 0;
#endif


                            try
                            {
                                // Tried block:
                                while( true )
                                {
                                    frame_guard.setLineNumber( 477 );
                                    PyObject *_tmp_unpack_10 = ITERATOR_NEXT( tmp_for_loop_3__for_iterator.asObject0() );

                                    if ( _tmp_unpack_10 == NULL )
                                    {
                                        break;
                                    }
                                    tmp_for_loop_3__iter_value.assign1( _tmp_unpack_10 );
                                    var_arg.assign0( tmp_for_loop_3__iter_value.asObject0() );
                                    frame_guard.setLineNumber( 479 );
                                    {
                                        PyObjectTempKeeper0 cmp1;
                                        if ( ( cmp1.assign( var_arg.asObject0() ), SEQUENCE_CONTAINS_BOOL( cmp1.asObject0(), var_changed_args.asObject0() ) ) )
                                        {
                                            frame_guard.setLineNumber( 480 );
                                            {
                                                PyObjectTempKeeper0 subscr1;
                                                {
                                                    PyObjectTemporary tmp_identifier( ( subscr1.assign( var_changed_args.asObject0() ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), var_arg.asObject0() ) ) );
                                                    PyObjectTemporary tmp_subscribed( LOOKUP_SUBSCRIPT( par_f.asObject0(), const_unicode_plain_args ) );
                                                    SET_SUBSCRIPT( tmp_identifier.asObject0(), tmp_subscribed.asObject0(), var_arg.asObject0() );
                                                }
                                            }
                                        }
                                    }

                                    CONSIDER_THREADING();
                                }
                            }
                            catch ( PythonException &_exception )
                            {
#if PYTHON_VERSION >= 300
                                if ( !_exception.hasTraceback() )
                                {
                                    _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                                }
                                else
                                {
                                    _exception.addTraceback( frame_guard.getFrame0() );
                                }
#else
                                _at_lineno_9 = frame_guard.getLineNumber();
#endif

                                _caught_9.save( _exception );

#if PYTHON_VERSION >= 300
                                frame_guard.preserveExistingException();

                                _exception.toExceptionHandler();
#endif
                            }

                            // Final block:
                            tmp_for_loop_3__iter_value.del( true );
                            tmp_for_loop_3__for_iterator.del( false );
#if PYTHON_VERSION < 300
                            if ( _at_lineno_9 != 0 )
                            {
                               frame_guard.setLineNumber( _at_lineno_9 );
                            }
#endif
                            _caught_9.rethrow();
                            // Final end
                        }
                        else
                        {
                            frame_guard.setLineNumber( 482 );
                            if ( RICH_COMPARE_BOOL_EQ( var_name.asObject0(), const_unicode_plain_func_call ) )
                            {
                                frame_guard.setLineNumber( 483 );
                                PythonExceptionKeeper _caught_11;
#if PYTHON_VERSION < 300
                                int _at_lineno_11 = 0;
#endif


                                try
                                {
                                    // Tried block:
                                    tmp_tuple_unpack_5__source_iter.assign1( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS3( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_m.asObject0(), const_str_plain_group ) ).asObject0(), const_int_pos_1, const_int_pos_2, const_int_pos_3 ) ).asObject0() ) );
                                    tmp_tuple_unpack_5__element_1.assign1( UNPACK_NEXT( tmp_tuple_unpack_5__source_iter.asObject0(), 0 ) );
                                    tmp_tuple_unpack_5__element_2.assign1( UNPACK_NEXT( tmp_tuple_unpack_5__source_iter.asObject0(), 1 ) );
                                    tmp_tuple_unpack_5__element_3.assign1( UNPACK_NEXT( tmp_tuple_unpack_5__source_iter.asObject0(), 2 ) );
                                    UNPACK_ITERATOR_CHECK( tmp_tuple_unpack_5__source_iter.asObject0(), 3 );
                                    var_lhs.assign0( tmp_tuple_unpack_5__element_1.asObject0() );
                                    var_funcname.assign0( tmp_tuple_unpack_5__element_2.asObject0() );
                                    var_args.assign0( tmp_tuple_unpack_5__element_3.asObject0() );
                                }
                                catch ( PythonException &_exception )
                                {
#if PYTHON_VERSION >= 300
                                    if ( !_exception.hasTraceback() )
                                    {
                                        _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                                    }
                                    else
                                    {
                                        _exception.addTraceback( frame_guard.getFrame0() );
                                    }
#else
                                    _at_lineno_11 = frame_guard.getLineNumber();
#endif

                                    _caught_11.save( _exception );

#if PYTHON_VERSION >= 300
                                    frame_guard.preserveExistingException();

                                    _exception.toExceptionHandler();
#endif
                                }

                                // Final block:
                                tmp_tuple_unpack_5__source_iter.del( true );
                                tmp_tuple_unpack_5__element_1.del( true );
                                tmp_tuple_unpack_5__element_2.del( true );
                                tmp_tuple_unpack_5__element_3.del( true );
#if PYTHON_VERSION < 300
                                if ( _at_lineno_11 != 0 )
                                {
                                   frame_guard.setLineNumber( _at_lineno_11 );
                                }
#endif
                                _caught_11.rethrow();
                                // Final end
                                frame_guard.setLineNumber( 484 );
                                {
                                    PyObjectTempKeeper0 call1;
                                    PyObjectTempKeeper0 call2;
                                    PyObjectTempKeeper0 call3;
                                    PyObjectTempKeeper1 call4;
                                    var_newfunc.assign1( ( call1.assign( GET_MODULE_VALUE0( const_str_plain__get_func_from_call ) ), call2.assign( par_f.asObject0() ), call3.assign( var_funcname.asObject0() ), call4.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_args.asObject0(), const_str_plain_split ) ).asObject0(), const_unicode_chr_44 ) ), CALL_FUNCTION_WITH_ARGS4( call1.asObject0(), call2.asObject0(), call3.asObject0(), call4.asObject0(), par_js_url.asObject0() ) ) );
                                }
                                frame_guard.setLineNumber( 485 );
                                {
                                    PyObjectTempKeeper0 call1;
                                    PyObjectTempKeeper0 call2;
                                    {
                                        PyObjectTemporary tmp_identifier( ( call1.assign( GET_MODULE_VALUE0( const_str_plain__solve ) ), call2.assign( var_newfunc.asObject0() ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), call2.asObject0(), par_js_url.asObject0() ) ) );
                                        PyObjectTemporary tmp_subscribed( LOOKUP_SUBSCRIPT( par_f.asObject0(), const_unicode_plain_args ) );
                                        SET_SUBSCRIPT( tmp_identifier.asObject0(), tmp_subscribed.asObject0(), var_lhs.asObject0() );
                                    }
                                }
                            }
                            else
                            {
                                frame_guard.setLineNumber( 488 );
                                if ( RICH_COMPARE_BOOL_EQ( var_name.asObject0(), const_unicode_plain_x1 ) )
                                {
                                    frame_guard.setLineNumber( 489 );
                                    PythonExceptionKeeper _caught_12;
#if PYTHON_VERSION < 300
                                    int _at_lineno_12 = 0;
#endif


                                    try
                                    {
                                        // Tried block:
                                        tmp_tuple_unpack_6__source_iter.assign1( MAKE_ITERATOR( PyObjectTemporary( impl_listcontr_1_of_function_17__solve_of_module_pafy( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS2( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_m.asObject0(), const_str_plain_group ) ).asObject0(), const_int_pos_2, const_int_pos_3 ) ).asObject0() ), par_f, var_x ) ).asObject0() ) );
                                        tmp_tuple_unpack_6__element_1.assign1( UNPACK_NEXT( tmp_tuple_unpack_6__source_iter.asObject0(), 0 ) );
                                        tmp_tuple_unpack_6__element_2.assign1( UNPACK_NEXT( tmp_tuple_unpack_6__source_iter.asObject0(), 1 ) );
                                        UNPACK_ITERATOR_CHECK( tmp_tuple_unpack_6__source_iter.asObject0(), 2 );
                                        var_b.assign0( tmp_tuple_unpack_6__element_1.asObject0() );
                                        var_c.assign0( tmp_tuple_unpack_6__element_2.asObject0() );
                                    }
                                    catch ( PythonException &_exception )
                                    {
#if PYTHON_VERSION >= 300
                                        if ( !_exception.hasTraceback() )
                                        {
                                            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                                        }
                                        else
                                        {
                                            _exception.addTraceback( frame_guard.getFrame0() );
                                        }
#else
                                        _at_lineno_12 = frame_guard.getLineNumber();
#endif

                                        _caught_12.save( _exception );

#if PYTHON_VERSION >= 300
                                        frame_guard.preserveExistingException();

                                        _exception.toExceptionHandler();
#endif
                                    }

                                    // Final block:
                                    tmp_tuple_unpack_6__source_iter.del( true );
                                    tmp_tuple_unpack_6__element_1.del( true );
                                    tmp_tuple_unpack_6__element_2.del( true );
#if PYTHON_VERSION < 300
                                    if ( _at_lineno_12 != 0 )
                                    {
                                       frame_guard.setLineNumber( _at_lineno_12 );
                                    }
#endif
                                    _caught_12.rethrow();
                                    // Final end
                                    frame_guard.setLineNumber( 490 );
                                    {
                                        PyObjectTempKeeper0 subscr1;
                                        {
                                            PyObjectTemporary tmp_identifier( ( subscr1.assign( var_b.asObject0() ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), var_c.asObject0() ) ) );
                                            PyObjectTemporary tmp_subscribed( LOOKUP_SUBSCRIPT( par_f.asObject0(), const_unicode_plain_args ) );
                                            SET_SUBSCRIPT( tmp_identifier.asObject0(), tmp_subscribed.asObject0(), PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_m.asObject0(), const_str_plain_group ) ).asObject0(), const_int_pos_1 ) ).asObject0() );
                                        }
                                    }
                                }
                                else
                                {
                                    frame_guard.setLineNumber( 493 );
                                    if ( RICH_COMPARE_BOOL_EQ( var_name.asObject0(), const_unicode_plain_x2 ) )
                                    {
                                        frame_guard.setLineNumber( 494 );
                                        var_vals.assign1( impl_function_1_complex_call_helper_star_list_of_module___internal__( LOOKUP_ATTRIBUTE( var_m.asObject0(), const_str_plain_group ), LIST_COPY( const_list_int_pos_1_int_pos_2_int_pos_3_int_pos_4_int_pos_5_list ) ) );
                                        frame_guard.setLineNumber( 495 );
                                        PythonExceptionKeeper _caught_13;
#if PYTHON_VERSION < 300
                                        int _at_lineno_13 = 0;
#endif


                                        try
                                        {
                                            // Tried block:
                                            tmp_tuple_unpack_7__source_iter.assign1( MAKE_ITERATOR( PyObjectTemporary( impl_listcontr_2_of_function_17__solve_of_module_pafy( MAKE_ITERATOR( var_vals.asObject0() ), par_f, var_x ) ).asObject0() ) );
                                            tmp_tuple_unpack_7__element_1.assign1( UNPACK_NEXT( tmp_tuple_unpack_7__source_iter.asObject0(), 0 ) );
                                            tmp_tuple_unpack_7__element_2.assign1( UNPACK_NEXT( tmp_tuple_unpack_7__source_iter.asObject0(), 1 ) );
                                            tmp_tuple_unpack_7__element_3.assign1( UNPACK_NEXT( tmp_tuple_unpack_7__source_iter.asObject0(), 2 ) );
                                            tmp_tuple_unpack_7__element_4.assign1( UNPACK_NEXT( tmp_tuple_unpack_7__source_iter.asObject0(), 3 ) );
                                            tmp_tuple_unpack_7__element_5.assign1( UNPACK_NEXT( tmp_tuple_unpack_7__source_iter.asObject0(), 4 ) );
                                            UNPACK_ITERATOR_CHECK( tmp_tuple_unpack_7__source_iter.asObject0(), 5 );
                                            var_a.assign0( tmp_tuple_unpack_7__element_1.asObject0() );
                                            var_b.assign0( tmp_tuple_unpack_7__element_2.asObject0() );
                                            var_c.assign0( tmp_tuple_unpack_7__element_3.asObject0() );
                                            var_d.assign0( tmp_tuple_unpack_7__element_4.asObject0() );
                                            var_e.assign0( tmp_tuple_unpack_7__element_5.asObject0() );
                                        }
                                        catch ( PythonException &_exception )
                                        {
#if PYTHON_VERSION >= 300
                                            if ( !_exception.hasTraceback() )
                                            {
                                                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                                            }
                                            else
                                            {
                                                _exception.addTraceback( frame_guard.getFrame0() );
                                            }
#else
                                            _at_lineno_13 = frame_guard.getLineNumber();
#endif

                                            _caught_13.save( _exception );

#if PYTHON_VERSION >= 300
                                            frame_guard.preserveExistingException();

                                            _exception.toExceptionHandler();
#endif
                                        }

                                        // Final block:
                                        tmp_tuple_unpack_7__source_iter.del( true );
                                        tmp_tuple_unpack_7__element_1.del( true );
                                        tmp_tuple_unpack_7__element_2.del( true );
                                        tmp_tuple_unpack_7__element_3.del( true );
                                        tmp_tuple_unpack_7__element_4.del( true );
                                        tmp_tuple_unpack_7__element_5.del( true );
#if PYTHON_VERSION < 300
                                        if ( _at_lineno_13 != 0 )
                                        {
                                           frame_guard.setLineNumber( _at_lineno_13 );
                                        }
#endif
                                        _caught_13.rethrow();
                                        // Final end
                                        frame_guard.setLineNumber( 496 );
                                        {
                                            PyObjectTempKeeper0 op1;
                                            PyObjectTempKeeper1 op2;
                                            PyObjectTempKeeper1 op3;
                                            PyObjectTempKeeper0 slice1;
                                            PyObjectTempKeeper0 slice2;
                                            PyObjectTempKeeper0 subscr1;
                                            {
                                                PyObjectTemporary tmp_identifier( ( op3.assign( ( op2.assign( ( slice1.assign( var_a.asObject0() ), LOOKUP_SLICE( slice1.asObject0(), Py_None, var_b.asObject0() ) ) ), BINARY_OPERATION_ADD( op2.asObject0(), PyObjectTemporary( ( subscr1.assign( var_c.asObject0() ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), PyObjectTemporary( ( op1.assign( var_d.asObject0() ), BINARY_OPERATION_REMAINDER( op1.asObject0(), PyObjectTemporary( BUILTIN_LEN( var_e.asObject0() ) ).asObject0() ) ) ).asObject0() ) ) ).asObject0() ) ) ), BINARY_OPERATION_ADD( op3.asObject0(), PyObjectTemporary( ( slice2.assign( var_a.asObject0() ), LOOKUP_SLICE( slice2.asObject0(), PyObjectTemporary( BINARY_OPERATION_ADD( var_b.asObject0(), const_int_pos_1 ) ).asObject0(), Py_None ) ) ).asObject0() ) ) );
                                                PyObjectTemporary tmp_subscribed( LOOKUP_SUBSCRIPT( par_f.asObject0(), const_unicode_plain_args ) );
                                                SET_SUBSCRIPT( tmp_identifier.asObject0(), tmp_subscribed.asObject0(), PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_m.asObject0(), const_str_plain_group ) ).asObject0(), const_int_pos_1 ) ).asObject0() );
                                            }
                                        }
                                    }
                                    else
                                    {
                                        frame_guard.setLineNumber( 499 );
                                        if ( RICH_COMPARE_BOOL_EQ( var_name.asObject0(), const_unicode_plain_x3 ) )
                                        {
                                            frame_guard.setLineNumber( 500 );
                                            PythonExceptionKeeper _caught_14;
#if PYTHON_VERSION < 300
                                            int _at_lineno_14 = 0;
#endif


                                            try
                                            {
                                                // Tried block:
                                                tmp_tuple_unpack_8__source_iter.assign1( MAKE_ITERATOR( PyObjectTemporary( impl_listcontr_3_of_function_17__solve_of_module_pafy( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS3( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_m.asObject0(), const_str_plain_group ) ).asObject0(), const_int_pos_1, const_int_pos_2, const_int_pos_3 ) ).asObject0() ), par_f, var_x ) ).asObject0() ) );
                                                tmp_tuple_unpack_8__element_1.assign1( UNPACK_NEXT( tmp_tuple_unpack_8__source_iter.asObject0(), 0 ) );
                                                tmp_tuple_unpack_8__element_2.assign1( UNPACK_NEXT( tmp_tuple_unpack_8__source_iter.asObject0(), 1 ) );
                                                tmp_tuple_unpack_8__element_3.assign1( UNPACK_NEXT( tmp_tuple_unpack_8__source_iter.asObject0(), 2 ) );
                                                UNPACK_ITERATOR_CHECK( tmp_tuple_unpack_8__source_iter.asObject0(), 3 );
                                                var_a.assign0( tmp_tuple_unpack_8__element_1.asObject0() );
                                                var_b.assign0( tmp_tuple_unpack_8__element_2.asObject0() );
                                                var_c.assign0( tmp_tuple_unpack_8__element_3.asObject0() );
                                            }
                                            catch ( PythonException &_exception )
                                            {
#if PYTHON_VERSION >= 300
                                                if ( !_exception.hasTraceback() )
                                                {
                                                    _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                                                }
                                                else
                                                {
                                                    _exception.addTraceback( frame_guard.getFrame0() );
                                                }
#else
                                                _at_lineno_14 = frame_guard.getLineNumber();
#endif

                                                _caught_14.save( _exception );

#if PYTHON_VERSION >= 300
                                                frame_guard.preserveExistingException();

                                                _exception.toExceptionHandler();
#endif
                                            }

                                            // Final block:
                                            tmp_tuple_unpack_8__source_iter.del( true );
                                            tmp_tuple_unpack_8__element_1.del( true );
                                            tmp_tuple_unpack_8__element_2.del( true );
                                            tmp_tuple_unpack_8__element_3.del( true );
#if PYTHON_VERSION < 300
                                            if ( _at_lineno_14 != 0 )
                                            {
                                               frame_guard.setLineNumber( _at_lineno_14 );
                                            }
#endif
                                            _caught_14.rethrow();
                                            // Final end
                                            frame_guard.setLineNumber( 501 );
                                            {
                                                PyObjectTempKeeper1 op1;
                                                PyObjectTempKeeper1 op2;
                                                PyObjectTempKeeper0 slice1;
                                                PyObjectTempKeeper0 slice2;
                                                {
                                                    PyObjectTemporary tmp_identifier( ( op2.assign( ( op1.assign( ( slice1.assign( var_a.asObject0() ), LOOKUP_SLICE( slice1.asObject0(), Py_None, var_b.asObject0() ) ) ), BINARY_OPERATION_ADD( op1.asObject0(), var_c.asObject0() ) ) ), BINARY_OPERATION_ADD( op2.asObject0(), PyObjectTemporary( ( slice2.assign( var_a.asObject0() ), LOOKUP_SLICE( slice2.asObject0(), PyObjectTemporary( BINARY_OPERATION_ADD( var_b.asObject0(), const_int_pos_1 ) ).asObject0(), Py_None ) ) ).asObject0() ) ) );
                                                    PyObjectTemporary tmp_subscribed( LOOKUP_SUBSCRIPT( par_f.asObject0(), const_unicode_plain_args ) );
                                                    SET_SUBSCRIPT( tmp_identifier.asObject0(), tmp_subscribed.asObject0(), PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_m.asObject0(), const_str_plain_group ) ).asObject0(), const_int_pos_1 ) ).asObject0() );
                                                }
                                            }
                                        }
                                        else
                                        {
                                            frame_guard.setLineNumber( 503 );
                                            if ( RICH_COMPARE_BOOL_EQ( var_name.asObject0(), const_unicode_plain_return ) )
                                            {
                                                frame_guard.setLineNumber( 504 );
                                                {
                                                    PyObjectTempKeeper1 subscr1;
                                                    throw ReturnValueException( ( subscr1.assign( LOOKUP_SUBSCRIPT( par_f.asObject0(), const_unicode_plain_args ) ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_m.asObject0(), const_str_plain_group ) ).asObject0(), const_int_pos_1 ) ).asObject0() ) ) );
                                                }
                                            }
                                            else
                                            {
                                                frame_guard.setLineNumber( 506 );
                                                if ( RICH_COMPARE_BOOL_EQ( var_name.asObject0(), const_unicode_plain_reverse ) )
                                                {
                                                    frame_guard.setLineNumber( 507 );
                                                    {
                                                        PyObjectTempKeeper0 call1;
                                                        PyObjectTempKeeper1 call2;
                                                        PyObjectTempKeeper1 subscr1;
                                                        {
                                                            PyObjectTemporary tmp_identifier( ( subscr1.assign( ( call1.assign( GET_MODULE_VALUE0( const_str_plain__getval ) ), call2.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_m.asObject0(), const_str_plain_group ) ).asObject0(), const_int_pos_2 ) ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), call2.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( par_f.asObject0(), const_unicode_plain_args ) ).asObject0() ) ) ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), PyObjectTemporary( MAKE_SLICEOBJ( Py_None, Py_None, const_int_neg_1 ) ).asObject0() ) ) );
                                                            PyObjectTemporary tmp_subscribed( LOOKUP_SUBSCRIPT( par_f.asObject0(), const_unicode_plain_args ) );
                                                            SET_SUBSCRIPT( tmp_identifier.asObject0(), tmp_subscribed.asObject0(), PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_m.asObject0(), const_str_plain_group ) ).asObject0(), const_int_pos_1 ) ).asObject0() );
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    frame_guard.setLineNumber( 509 );
                                                    if ( RICH_COMPARE_BOOL_EQ( var_name.asObject0(), const_unicode_plain_reverse_noass ) )
                                                    {
                                                        frame_guard.setLineNumber( 510 );
                                                        {
                                                            PyObjectTempKeeper0 call1;
                                                            PyObjectTempKeeper1 call2;
                                                            PyObjectTempKeeper1 subscr1;
                                                            {
                                                                PyObjectTemporary tmp_identifier( ( subscr1.assign( ( call1.assign( GET_MODULE_VALUE0( const_str_plain__getval ) ), call2.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_m.asObject0(), const_str_plain_group ) ).asObject0(), const_int_pos_1 ) ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), call2.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( par_f.asObject0(), const_unicode_plain_args ) ).asObject0() ) ) ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), PyObjectTemporary( MAKE_SLICEOBJ( Py_None, Py_None, const_int_neg_1 ) ).asObject0() ) ) );
                                                                PyObjectTemporary tmp_subscribed( LOOKUP_SUBSCRIPT( par_f.asObject0(), const_unicode_plain_args ) );
                                                                SET_SUBSCRIPT( tmp_identifier.asObject0(), tmp_subscribed.asObject0(), PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_m.asObject0(), const_str_plain_group ) ).asObject0(), const_int_pos_1 ) ).asObject0() );
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        frame_guard.setLineNumber( 512 );
                                                        if ( RICH_COMPARE_BOOL_EQ( var_name.asObject0(), const_unicode_plain_splice_noass ) )
                                                        {
                                                            frame_guard.setLineNumber( 513 );
                                                            PythonExceptionKeeper _caught_15;
#if PYTHON_VERSION < 300
                                                            int _at_lineno_15 = 0;
#endif


                                                            try
                                                            {
                                                                // Tried block:
                                                                tmp_tuple_unpack_9__source_iter.assign1( MAKE_ITERATOR( PyObjectTemporary( impl_listcontr_4_of_function_17__solve_of_module_pafy( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS3( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_m.asObject0(), const_str_plain_group ) ).asObject0(), const_int_pos_1, const_int_pos_2, const_int_pos_3 ) ).asObject0() ), par_f, var_x ) ).asObject0() ) );
                                                                tmp_tuple_unpack_9__element_1.assign1( UNPACK_NEXT( tmp_tuple_unpack_9__source_iter.asObject0(), 0 ) );
                                                                tmp_tuple_unpack_9__element_2.assign1( UNPACK_NEXT( tmp_tuple_unpack_9__source_iter.asObject0(), 1 ) );
                                                                tmp_tuple_unpack_9__element_3.assign1( UNPACK_NEXT( tmp_tuple_unpack_9__source_iter.asObject0(), 2 ) );
                                                                UNPACK_ITERATOR_CHECK( tmp_tuple_unpack_9__source_iter.asObject0(), 3 );
                                                                var_a.assign0( tmp_tuple_unpack_9__element_1.asObject0() );
                                                                var_b.assign0( tmp_tuple_unpack_9__element_2.asObject0() );
                                                                var_c.assign0( tmp_tuple_unpack_9__element_3.asObject0() );
                                                            }
                                                            catch ( PythonException &_exception )
                                                            {
#if PYTHON_VERSION >= 300
                                                                if ( !_exception.hasTraceback() )
                                                                {
                                                                    _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                                                                }
                                                                else
                                                                {
                                                                    _exception.addTraceback( frame_guard.getFrame0() );
                                                                }
#else
                                                                _at_lineno_15 = frame_guard.getLineNumber();
#endif

                                                                _caught_15.save( _exception );

#if PYTHON_VERSION >= 300
                                                                frame_guard.preserveExistingException();

                                                                _exception.toExceptionHandler();
#endif
                                                            }

                                                            // Final block:
                                                            tmp_tuple_unpack_9__source_iter.del( true );
                                                            tmp_tuple_unpack_9__element_1.del( true );
                                                            tmp_tuple_unpack_9__element_2.del( true );
                                                            tmp_tuple_unpack_9__element_3.del( true );
#if PYTHON_VERSION < 300
                                                            if ( _at_lineno_15 != 0 )
                                                            {
                                                               frame_guard.setLineNumber( _at_lineno_15 );
                                                            }
#endif
                                                            _caught_15.rethrow();
                                                            // Final end
                                                            frame_guard.setLineNumber( 514 );
                                                            {
                                                                PyObjectTempKeeper0 op1;
                                                                PyObjectTempKeeper1 op2;
                                                                PyObjectTempKeeper0 slice1;
                                                                PyObjectTempKeeper0 slice2;
                                                                {
                                                                    PyObjectTemporary tmp_identifier( ( op2.assign( ( slice1.assign( var_a.asObject0() ), LOOKUP_SLICE( slice1.asObject0(), Py_None, var_b.asObject0() ) ) ), BINARY_OPERATION_ADD( op2.asObject0(), PyObjectTemporary( ( slice2.assign( var_a.asObject0() ), LOOKUP_SLICE( slice2.asObject0(), PyObjectTemporary( ( op1.assign( var_b.asObject0() ), BINARY_OPERATION_ADD( op1.asObject0(), var_c.asObject0() ) ) ).asObject0(), Py_None ) ) ).asObject0() ) ) );
                                                                    PyObjectTemporary tmp_subscribed( LOOKUP_SUBSCRIPT( par_f.asObject0(), const_unicode_plain_args ) );
                                                                    SET_SUBSCRIPT( tmp_identifier.asObject0(), tmp_subscribed.asObject0(), PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_m.asObject0(), const_str_plain_group ) ).asObject0(), const_int_pos_1 ) ).asObject0() );
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            frame_guard.setLineNumber( 516 );
                                                            if ( RICH_COMPARE_BOOL_EQ( var_name.asObject0(), const_unicode_plain_return_reverse ) )
                                                            {
                                                                frame_guard.setLineNumber( 517 );
                                                                {
                                                                    PyObjectTempKeeper1 subscr1;
                                                                    PyObjectTempKeeper1 subscr2;
                                                                    throw ReturnValueException( ( subscr2.assign( ( subscr1.assign( LOOKUP_SUBSCRIPT( par_f.asObject0(), const_unicode_plain_args ) ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_m.asObject0(), const_str_plain_group ) ).asObject0(), const_int_pos_1 ) ).asObject0() ) ) ), LOOKUP_SUBSCRIPT( subscr2.asObject0(), PyObjectTemporary( MAKE_SLICEOBJ( Py_None, Py_None, const_int_neg_1 ) ).asObject0() ) ) );
                                                                }
                                                            }
                                                            else
                                                            {
                                                                frame_guard.setLineNumber( 519 );
                                                                if ( RICH_COMPARE_BOOL_EQ( var_name.asObject0(), const_unicode_plain_return_slice ) )
                                                                {
                                                                    frame_guard.setLineNumber( 520 );
                                                                    PythonExceptionKeeper _caught_16;
#if PYTHON_VERSION < 300
                                                                    int _at_lineno_16 = 0;
#endif


                                                                    try
                                                                    {
                                                                        // Tried block:
                                                                        tmp_tuple_unpack_10__source_iter.assign1( MAKE_ITERATOR( PyObjectTemporary( impl_listcontr_5_of_function_17__solve_of_module_pafy( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS2( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_m.asObject0(), const_str_plain_group ) ).asObject0(), const_int_pos_1, const_int_pos_2 ) ).asObject0() ), par_f, var_x ) ).asObject0() ) );
                                                                        tmp_tuple_unpack_10__element_1.assign1( UNPACK_NEXT( tmp_tuple_unpack_10__source_iter.asObject0(), 0 ) );
                                                                        tmp_tuple_unpack_10__element_2.assign1( UNPACK_NEXT( tmp_tuple_unpack_10__source_iter.asObject0(), 1 ) );
                                                                        UNPACK_ITERATOR_CHECK( tmp_tuple_unpack_10__source_iter.asObject0(), 2 );
                                                                        var_a.assign0( tmp_tuple_unpack_10__element_1.asObject0() );
                                                                        var_b.assign0( tmp_tuple_unpack_10__element_2.asObject0() );
                                                                    }
                                                                    catch ( PythonException &_exception )
                                                                    {
#if PYTHON_VERSION >= 300
                                                                        if ( !_exception.hasTraceback() )
                                                                        {
                                                                            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                                                                        }
                                                                        else
                                                                        {
                                                                            _exception.addTraceback( frame_guard.getFrame0() );
                                                                        }
#else
                                                                        _at_lineno_16 = frame_guard.getLineNumber();
#endif

                                                                        _caught_16.save( _exception );

#if PYTHON_VERSION >= 300
                                                                        frame_guard.preserveExistingException();

                                                                        _exception.toExceptionHandler();
#endif
                                                                    }

                                                                    // Final block:
                                                                    tmp_tuple_unpack_10__source_iter.del( true );
                                                                    tmp_tuple_unpack_10__element_1.del( true );
                                                                    tmp_tuple_unpack_10__element_2.del( true );
#if PYTHON_VERSION < 300
                                                                    if ( _at_lineno_16 != 0 )
                                                                    {
                                                                       frame_guard.setLineNumber( _at_lineno_16 );
                                                                    }
#endif
                                                                    _caught_16.rethrow();
                                                                    // Final end
                                                                    frame_guard.setLineNumber( 521 );
                                                                    {
                                                                        PyObjectTempKeeper0 slice1;
                                                                        throw ReturnValueException( ( slice1.assign( var_a.asObject0() ), LOOKUP_SLICE( slice1.asObject0(), var_b.asObject0(), Py_None ) ) );
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    frame_guard.setLineNumber( 523 );
                                                                    if ( RICH_COMPARE_BOOL_EQ( var_name.asObject0(), const_unicode_plain_slice ) )
                                                                    {
                                                                        frame_guard.setLineNumber( 524 );
                                                                        PythonExceptionKeeper _caught_17;
#if PYTHON_VERSION < 300
                                                                        int _at_lineno_17 = 0;
#endif


                                                                        try
                                                                        {
                                                                            // Tried block:
                                                                            tmp_tuple_unpack_11__source_iter.assign1( MAKE_ITERATOR( PyObjectTemporary( impl_listcontr_6_of_function_17__solve_of_module_pafy( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS3( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_m.asObject0(), const_str_plain_group ) ).asObject0(), const_int_pos_1, const_int_pos_2, const_int_pos_3 ) ).asObject0() ), par_f, var_x ) ).asObject0() ) );
                                                                            tmp_tuple_unpack_11__element_1.assign1( UNPACK_NEXT( tmp_tuple_unpack_11__source_iter.asObject0(), 0 ) );
                                                                            tmp_tuple_unpack_11__element_2.assign1( UNPACK_NEXT( tmp_tuple_unpack_11__source_iter.asObject0(), 1 ) );
                                                                            tmp_tuple_unpack_11__element_3.assign1( UNPACK_NEXT( tmp_tuple_unpack_11__source_iter.asObject0(), 2 ) );
                                                                            UNPACK_ITERATOR_CHECK( tmp_tuple_unpack_11__source_iter.asObject0(), 3 );
                                                                            var_a.assign0( tmp_tuple_unpack_11__element_1.asObject0() );
                                                                            var_b.assign0( tmp_tuple_unpack_11__element_2.asObject0() );
                                                                            var_c.assign0( tmp_tuple_unpack_11__element_3.asObject0() );
                                                                        }
                                                                        catch ( PythonException &_exception )
                                                                        {
#if PYTHON_VERSION >= 300
                                                                            if ( !_exception.hasTraceback() )
                                                                            {
                                                                                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                                                                            }
                                                                            else
                                                                            {
                                                                                _exception.addTraceback( frame_guard.getFrame0() );
                                                                            }
#else
                                                                            _at_lineno_17 = frame_guard.getLineNumber();
#endif

                                                                            _caught_17.save( _exception );

#if PYTHON_VERSION >= 300
                                                                            frame_guard.preserveExistingException();

                                                                            _exception.toExceptionHandler();
#endif
                                                                        }

                                                                        // Final block:
                                                                        tmp_tuple_unpack_11__source_iter.del( true );
                                                                        tmp_tuple_unpack_11__element_1.del( true );
                                                                        tmp_tuple_unpack_11__element_2.del( true );
                                                                        tmp_tuple_unpack_11__element_3.del( true );
#if PYTHON_VERSION < 300
                                                                        if ( _at_lineno_17 != 0 )
                                                                        {
                                                                           frame_guard.setLineNumber( _at_lineno_17 );
                                                                        }
#endif
                                                                        _caught_17.rethrow();
                                                                        // Final end
                                                                        frame_guard.setLineNumber( 525 );
                                                                        {
                                                                            PyObjectTempKeeper0 slice1;
                                                                            {
                                                                                PyObjectTemporary tmp_identifier( ( slice1.assign( var_b.asObject0() ), LOOKUP_SLICE( slice1.asObject0(), var_c.asObject0(), Py_None ) ) );
                                                                                PyObjectTemporary tmp_subscribed( LOOKUP_SUBSCRIPT( par_f.asObject0(), const_unicode_plain_args ) );
                                                                                SET_SUBSCRIPT( tmp_identifier.asObject0(), tmp_subscribed.asObject0(), PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_m.asObject0(), const_str_plain_group ) ).asObject0(), const_int_pos_1 ) ).asObject0() );
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                CONSIDER_THREADING();
            }
        }
        catch ( PythonException &_exception )
        {
#if PYTHON_VERSION >= 300
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }
#else
            _at_lineno_1 = frame_guard.getLineNumber();
#endif

            _caught_1.save( _exception );

#if PYTHON_VERSION >= 300
            frame_guard.preserveExistingException();

            _exception.toExceptionHandler();
#endif
        }
        catch ( ReturnValueException const &e )
        {
            _return_value_1.assign( e.getValue1() );
        }

        // Final block:
        tmp_for_loop_1__iter_value.del( true );
        tmp_for_loop_1__for_iterator.del( false );
#if PYTHON_VERSION < 300
        if ( _at_lineno_1 != 0 )
        {
           frame_guard.setLineNumber( _at_lineno_1 );
        }
#endif
        _caught_1.rethrow();
        // Final end
        if ( _return_value_1.isKeeping() )
        {
            return _return_value_1.asObject1();
        }
        frame_guard.setLineNumber( 527 );
        if ( (!( CHECK_IF_TRUE( par_returns.asObject0() ) )) )
        {
            frame_guard.setLineNumber( 529 );
            return LOOKUP_SUBSCRIPT( par_f.asObject0(), const_unicode_plain_args );
        }
        else
        {
            frame_guard.setLineNumber( 532 );
            RAISE_EXCEPTION_WITH_TYPE( PyObjectTemporary( CALL_FUNCTION_WITH_POSARGS( PyExc_IOError, PyObjectTemporary( MAKE_TUPLE1( const_unicode_digest_1d101e2c527ce76f8a7c95b7ac2e810d ) ).asObject0() ) ).asObject0(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject0() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_returns.updateLocalsDict( par_js_url.updateLocalsDict( par_f.updateLocalsDict( var_x.updateLocalsDict( var_e.updateLocalsDict( var_d.updateLocalsDict( var_a.updateLocalsDict( var_vals.updateLocalsDict( var_c.updateLocalsDict( var_b.updateLocalsDict( var_arg.updateLocalsDict( var_changed_args.updateLocalsDict( var_newfunc.updateLocalsDict( var_funcname.updateLocalsDict( var_args.updateLocalsDict( var_key.updateLocalsDict( var_dic.updateLocalsDict( var_lhs.updateLocalsDict( var_m.updateLocalsDict( var_p.updateLocalsDict( var_n.updateLocalsDict( var_name.updateLocalsDict( var_part.updateLocalsDict( var_parts.updateLocalsDict( var_patterns.updateLocalsDict( var_resv.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_17__solve_of_module_pafy )
        {
           Py_DECREF( frame_function_17__solve_of_module_pafy );
           frame_function_17__solve_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }
}
static PyObject *fparse_function_17__solve_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_f = NULL;
    PyObject *_python_par_js_url = NULL;
    PyObject *_python_par_returns = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_solve() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_f == key )
            {
                assert( _python_par_f == NULL );
                _python_par_f = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_js_url == key )
            {
                assert( _python_par_js_url == NULL );
                _python_par_js_url = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_returns == key )
            {
                assert( _python_par_returns == NULL );
                _python_par_returns = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_f, key ) )
            {
                assert( _python_par_f == NULL );
                _python_par_f = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_js_url, key ) )
            {
                assert( _python_par_js_url == NULL );
                _python_par_js_url = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_returns, key ) )
            {
                assert( _python_par_returns == NULL );
                _python_par_returns = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_solve() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_f != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_f = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_f == NULL )
    {
        if ( 0 + self->m_defaults_given >= 3  )
        {
            _python_par_f = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_js_url != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_js_url = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_js_url == NULL )
    {
        if ( 1 + self->m_defaults_given >= 3  )
        {
            _python_par_js_url = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_returns != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_returns = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_returns == NULL )
    {
        if ( 2 + self->m_defaults_given >= 3  )
        {
            _python_par_returns = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_f == NULL || _python_par_js_url == NULL || _python_par_returns == NULL ))
    {
        PyObject *values[] = { _python_par_f, _python_par_js_url, _python_par_returns };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_17__solve_of_module_pafy( self, _python_par_f, _python_par_js_url, _python_par_returns );

error_exit:;

    Py_XDECREF( _python_par_f );
    Py_XDECREF( _python_par_js_url );
    Py_XDECREF( _python_par_returns );

    return NULL;
}

static PyObject *dparse_function_17__solve_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3 )
    {
        return impl_function_17__solve_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_17__solve_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_17__solve_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalParameterVariableNoDel &closure_f, PyObjectLocalVariable &closure_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par___iterator( const_str_plain___iterator, _python_par___iterator );
    PyObjectTempVariable tmp_iter_value_0;

    // Actual function code.
    PyObjectTemporary tmp_result( PyList_New( 0 ) );
    FrameGuardVeryLight frame_guard;

    frame_guard.setLineNumber( 489 );
    PyObject *tmp_contraction_iter_0 = par___iterator.asObject0();
    while( true )
    {
        frame_guard.setLineNumber( 489 );
        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( tmp_contraction_iter_0 );

        if ( _tmp_unpack_1 == NULL )
        {
            break;
        }
        tmp_iter_value_0.assign1( _tmp_unpack_1 );
        closure_x.assign0( tmp_iter_value_0.asObject0() );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper0 call2;
            APPEND_TO_LIST( tmp_result.asObject0(), PyObjectTemporary( ( call1.assign( GET_MODULE_VALUE0( const_str_plain__getval ) ), call2.assign( closure_x.asObject0() ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), call2.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( closure_f.asObject0(), const_unicode_plain_args ) ).asObject0() ) ) ).asObject0() ), Py_None;
        }

        CONSIDER_THREADING();
    }
    tmp_contraction_iter_0 = NULL;
    return tmp_result.asObject1();
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_17__solve_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalParameterVariableNoDel &closure_f, PyObjectLocalVariable &closure_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par___iterator( const_str_plain___iterator, _python_par___iterator );
    PyObjectTempVariable tmp_iter_value_0;

    // Actual function code.
    PyObjectTemporary tmp_result( PyList_New( 0 ) );
    FrameGuardVeryLight frame_guard;

    frame_guard.setLineNumber( 495 );
    PyObject *tmp_contraction_iter_0 = par___iterator.asObject0();
    while( true )
    {
        frame_guard.setLineNumber( 495 );
        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( tmp_contraction_iter_0 );

        if ( _tmp_unpack_1 == NULL )
        {
            break;
        }
        tmp_iter_value_0.assign1( _tmp_unpack_1 );
        closure_x.assign0( tmp_iter_value_0.asObject0() );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper0 call2;
            APPEND_TO_LIST( tmp_result.asObject0(), PyObjectTemporary( ( call1.assign( GET_MODULE_VALUE0( const_str_plain__getval ) ), call2.assign( closure_x.asObject0() ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), call2.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( closure_f.asObject0(), const_unicode_plain_args ) ).asObject0() ) ) ).asObject0() ), Py_None;
        }

        CONSIDER_THREADING();
    }
    tmp_contraction_iter_0 = NULL;
    return tmp_result.asObject1();
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_3_of_function_17__solve_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalParameterVariableNoDel &closure_f, PyObjectLocalVariable &closure_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par___iterator( const_str_plain___iterator, _python_par___iterator );
    PyObjectTempVariable tmp_iter_value_0;

    // Actual function code.
    PyObjectTemporary tmp_result( PyList_New( 0 ) );
    FrameGuardVeryLight frame_guard;

    frame_guard.setLineNumber( 500 );
    PyObject *tmp_contraction_iter_0 = par___iterator.asObject0();
    while( true )
    {
        frame_guard.setLineNumber( 500 );
        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( tmp_contraction_iter_0 );

        if ( _tmp_unpack_1 == NULL )
        {
            break;
        }
        tmp_iter_value_0.assign1( _tmp_unpack_1 );
        closure_x.assign0( tmp_iter_value_0.asObject0() );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper0 call2;
            APPEND_TO_LIST( tmp_result.asObject0(), PyObjectTemporary( ( call1.assign( GET_MODULE_VALUE0( const_str_plain__getval ) ), call2.assign( closure_x.asObject0() ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), call2.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( closure_f.asObject0(), const_unicode_plain_args ) ).asObject0() ) ) ).asObject0() ), Py_None;
        }

        CONSIDER_THREADING();
    }
    tmp_contraction_iter_0 = NULL;
    return tmp_result.asObject1();
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_4_of_function_17__solve_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalParameterVariableNoDel &closure_f, PyObjectLocalVariable &closure_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par___iterator( const_str_plain___iterator, _python_par___iterator );
    PyObjectTempVariable tmp_iter_value_0;

    // Actual function code.
    PyObjectTemporary tmp_result( PyList_New( 0 ) );
    FrameGuardVeryLight frame_guard;

    frame_guard.setLineNumber( 513 );
    PyObject *tmp_contraction_iter_0 = par___iterator.asObject0();
    while( true )
    {
        frame_guard.setLineNumber( 513 );
        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( tmp_contraction_iter_0 );

        if ( _tmp_unpack_1 == NULL )
        {
            break;
        }
        tmp_iter_value_0.assign1( _tmp_unpack_1 );
        closure_x.assign0( tmp_iter_value_0.asObject0() );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper0 call2;
            APPEND_TO_LIST( tmp_result.asObject0(), PyObjectTemporary( ( call1.assign( GET_MODULE_VALUE0( const_str_plain__getval ) ), call2.assign( closure_x.asObject0() ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), call2.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( closure_f.asObject0(), const_unicode_plain_args ) ).asObject0() ) ) ).asObject0() ), Py_None;
        }

        CONSIDER_THREADING();
    }
    tmp_contraction_iter_0 = NULL;
    return tmp_result.asObject1();
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_5_of_function_17__solve_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalParameterVariableNoDel &closure_f, PyObjectLocalVariable &closure_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par___iterator( const_str_plain___iterator, _python_par___iterator );
    PyObjectTempVariable tmp_iter_value_0;

    // Actual function code.
    PyObjectTemporary tmp_result( PyList_New( 0 ) );
    FrameGuardVeryLight frame_guard;

    frame_guard.setLineNumber( 520 );
    PyObject *tmp_contraction_iter_0 = par___iterator.asObject0();
    while( true )
    {
        frame_guard.setLineNumber( 520 );
        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( tmp_contraction_iter_0 );

        if ( _tmp_unpack_1 == NULL )
        {
            break;
        }
        tmp_iter_value_0.assign1( _tmp_unpack_1 );
        closure_x.assign0( tmp_iter_value_0.asObject0() );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper0 call2;
            APPEND_TO_LIST( tmp_result.asObject0(), PyObjectTemporary( ( call1.assign( GET_MODULE_VALUE0( const_str_plain__getval ) ), call2.assign( closure_x.asObject0() ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), call2.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( closure_f.asObject0(), const_unicode_plain_args ) ).asObject0() ) ) ).asObject0() ), Py_None;
        }

        CONSIDER_THREADING();
    }
    tmp_contraction_iter_0 = NULL;
    return tmp_result.asObject1();
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_6_of_function_17__solve_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalParameterVariableNoDel &closure_f, PyObjectLocalVariable &closure_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par___iterator( const_str_plain___iterator, _python_par___iterator );
    PyObjectTempVariable tmp_iter_value_0;

    // Actual function code.
    PyObjectTemporary tmp_result( PyList_New( 0 ) );
    FrameGuardVeryLight frame_guard;

    frame_guard.setLineNumber( 524 );
    PyObject *tmp_contraction_iter_0 = par___iterator.asObject0();
    while( true )
    {
        frame_guard.setLineNumber( 524 );
        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( tmp_contraction_iter_0 );

        if ( _tmp_unpack_1 == NULL )
        {
            break;
        }
        tmp_iter_value_0.assign1( _tmp_unpack_1 );
        closure_x.assign0( tmp_iter_value_0.asObject0() );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper0 call2;
            APPEND_TO_LIST( tmp_result.asObject0(), PyObjectTemporary( ( call1.assign( GET_MODULE_VALUE0( const_str_plain__getval ) ), call2.assign( closure_x.asObject0() ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), call2.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( closure_f.asObject0(), const_unicode_plain_args ) ).asObject0() ) ) ).asObject0() ), Py_None;
        }

        CONSIDER_THREADING();
    }
    tmp_contraction_iter_0 = NULL;
    return tmp_result.asObject1();
}


static PyObject *impl_function_18__decodesig_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_sig, PyObject *_python_par_js_url )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_sig( const_str_plain_sig, _python_par_sig );
    PyObjectLocalParameterVariableNoDel par_js_url( const_str_plain_js_url, _python_par_js_url );
    PyObjectLocalVariable var_mainfunction( const_str_plain_mainfunction );
    PyObjectLocalVariable var_param( const_str_plain_param );
    PyObjectLocalVariable var_solved( const_str_plain_solved );

    // Actual function code.
    static PyFrameObject *frame_function_18__decodesig_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_18__decodesig_of_module_pafy ) )
    {
        if ( frame_function_18__decodesig_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_18__decodesig_of_module_pafy" );
#endif
            Py_DECREF( frame_function_18__decodesig_of_module_pafy );
        }

        frame_function_18__decodesig_of_module_pafy = MAKE_FRAME( codeobj_112bdf181e8b5a430407e62635d1f979, module_pafy );
    }

    FrameGuard frame_guard( frame_function_18__decodesig_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_18__decodesig_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 538 );
        {
            PyObjectTempKeeper1 subscr1;
            var_mainfunction.assign1( LOOKUP_SUBSCRIPT( PyObjectTemporary( ( subscr1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_Pafy ), const_str_plain_funcmap ) ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), par_js_url.asObject0() ) ) ).asObject0(), const_unicode_plain_mainfunction ) );
        }
        frame_guard.setLineNumber( 539 );
        var_param.assign1( LOOKUP_SUBSCRIPT( var_mainfunction.asObject0(), const_unicode_plain_parameters ) );
        frame_guard.setLineNumber( 541 );
        if ( (!( RICH_COMPARE_BOOL_EQ( PyObjectTemporary( BUILTIN_LEN( var_param.asObject0() ) ).asObject0(), const_int_pos_1 ) )) )
        {
            frame_guard.setLineNumber( 542 );
            RAISE_EXCEPTION_WITH_TYPE( PyObjectTemporary( CALL_FUNCTION_WITH_POSARGS( PyExc_IOError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( const_unicode_digest_c4ce38246bf4a56fc47ccb575df7cc98, var_param.asObject0() ) ).asObject0() ) ).asObject0() ) ).asObject0(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject0() );
        }
        frame_guard.setLineNumber( 545 );
        {
            PyObjectTempKeeper0 make_dict1;
            {
                PyObjectTemporary tmp_identifier( ( make_dict1.assign( par_sig.asObject0() ), MAKE_DICT1( make_dict1.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( var_param.asObject0(), const_int_0, 0 ) ).asObject0() ) ) );
                SET_SUBSCRIPT( tmp_identifier.asObject0(), var_mainfunction.asObject0(), const_unicode_plain_args );
            }
        }
        frame_guard.setLineNumber( 546 );
        DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_new ), const_str_plain_callback ) ).asObject0(), const_unicode_digest_51e6ea3517fbbe9c29ff8d91c8d9e768 ) );
        frame_guard.setLineNumber( 547 );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper0 call2;
            var_solved.assign1( ( call1.assign( GET_MODULE_VALUE0( const_str_plain__solve ) ), call2.assign( var_mainfunction.asObject0() ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), call2.asObject0(), par_js_url.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 548 );
        {
            PyObjectTempKeeper0 call1;
            DECREASE_REFCOUNT( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_dbg ) ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), const_unicode_digest_0aea98221dc37ed8f8e34d9d99524c73, PyObjectTemporary( LOOKUP_INDEX_SLICE( var_solved.asObject0(), 0, 30 ) ).asObject0() ) ) );
        }
        frame_guard.setLineNumber( 549 );
        DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_new ), const_str_plain_callback ) ).asObject0(), const_unicode_digest_ce98cfea6ef73dcbdf266e2a6e04c46b ) );
        frame_guard.setLineNumber( 550 );
        return var_solved.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_js_url.updateLocalsDict( par_sig.updateLocalsDict( var_solved.updateLocalsDict( var_param.updateLocalsDict( var_mainfunction.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_18__decodesig_of_module_pafy )
        {
           Py_DECREF( frame_function_18__decodesig_of_module_pafy );
           frame_function_18__decodesig_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_18__decodesig_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_sig = NULL;
    PyObject *_python_par_js_url = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_decodesig() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_sig == key )
            {
                assert( _python_par_sig == NULL );
                _python_par_sig = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_js_url == key )
            {
                assert( _python_par_js_url == NULL );
                _python_par_js_url = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_sig, key ) )
            {
                assert( _python_par_sig == NULL );
                _python_par_sig = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_js_url, key ) )
            {
                assert( _python_par_js_url == NULL );
                _python_par_js_url = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_decodesig() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_sig != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_sig = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_sig == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_sig = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_js_url != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_js_url = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_js_url == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_js_url = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_sig == NULL || _python_par_js_url == NULL ))
    {
        PyObject *values[] = { _python_par_sig, _python_par_js_url };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_18__decodesig_of_module_pafy( self, _python_par_sig, _python_par_js_url );

error_exit:;

    Py_XDECREF( _python_par_sig );
    Py_XDECREF( _python_par_js_url );

    return NULL;
}

static PyObject *dparse_function_18__decodesig_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_18__decodesig_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_18__decodesig_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_19_remux_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_infile, PyObject *_python_par_outfile, PyObject *_python_par_quiet, PyObject *_python_par_muxer )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_infile( const_str_plain_infile, _python_par_infile );
    PyObjectLocalParameterVariableNoDel par_outfile( const_str_plain_outfile, _python_par_outfile );
    PyObjectLocalParameterVariableNoDel par_quiet( const_str_plain_quiet, _python_par_quiet );
    PyObjectLocalParameterVariableNoDel par_muxer( const_str_plain_muxer, _python_par_muxer );
    PyObjectLocalVariable var_call( const_str_plain_call );
    PyObjectLocalVariable var_STDOUT( const_str_plain_STDOUT );
    PyObjectLocalVariable var_tool( const_str_plain_tool );
    PyObjectLocalVariable var_cmd( const_str_plain_cmd );
    PyObjectLocalVariable var_devnull( const_str_plain_devnull );
    PyObjectTempVariable tmp_for_loop_1__iter_value;

    // Actual function code.
    static PyFrameObject *frame_function_19_remux_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_19_remux_of_module_pafy ) )
    {
        if ( frame_function_19_remux_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_19_remux_of_module_pafy" );
#endif
            Py_DECREF( frame_function_19_remux_of_module_pafy );
        }

        frame_function_19_remux_of_module_pafy = MAKE_FRAME( codeobj_b3ba3f4614a67a9b27d58794849d3355, module_pafy );
    }

    FrameGuardWithExceptionPreservation frame_guard( frame_function_19_remux_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_19_remux_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 555 );
        var_call.assign1( IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( const_str_plain_subprocess, ((PyModuleObject *)module_pafy)->md_dict, PyObjectTemporary( par_muxer.updateLocalsDict( par_quiet.updateLocalsDict( par_outfile.updateLocalsDict( par_infile.updateLocalsDict( var_devnull.updateLocalsDict( var_cmd.updateLocalsDict( var_tool.updateLocalsDict( var_STDOUT.updateLocalsDict( var_call.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ).asObject0(), const_list_str_plain_call_str_plain_STDOUT_list, const_int_neg_1 ) ).asObject0(), const_str_plain_call ) );
        var_STDOUT.assign1( IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( const_str_plain_subprocess, ((PyModuleObject *)module_pafy)->md_dict, PyObjectTemporary( par_muxer.updateLocalsDict( par_quiet.updateLocalsDict( par_outfile.updateLocalsDict( par_infile.updateLocalsDict( var_devnull.updateLocalsDict( var_cmd.updateLocalsDict( var_tool.updateLocalsDict( var_STDOUT.updateLocalsDict( var_call.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ).asObject0(), const_list_str_plain_call_str_plain_STDOUT_list, const_int_neg_1 ) ).asObject0(), const_str_plain_STDOUT ) );
        frame_guard.setLineNumber( 556 );
        par_muxer.assign0( ( BUILTIN_ISINSTANCE_BOOL( par_muxer.asObject0(), LOOKUP_BUILTIN( const_str_plain_str ) ) ? par_muxer.asObject0() : const_unicode_plain_ffmpeg ) );
        PyObject *tmp_for_loop_1__break_indicator = Py_False;
        frame_guard.setLineNumber( 558 );
        PyObjectTemporaryWithDel tmp_for_loop_1__for_iterator( MAKE_ITERATOR( PyObjectTemporary( TO_SET( PyObjectTemporary( MAKE_LIST3( par_muxer.asObject1(), INCREASE_REFCOUNT( const_unicode_plain_ffmpeg ), INCREASE_REFCOUNT( const_unicode_plain_avconv ) ) ).asObject0() ) ).asObject0() ) );
        PythonExceptionKeeper _caught_1;
#if PYTHON_VERSION < 300
        int _at_lineno_1 = 0;
#endif


        try
        {
            // Tried block:
            while( true )
            {
                frame_guard.setLineNumber( 558 );
                PyObject *_tmp_unpack_2 = ITERATOR_NEXT( tmp_for_loop_1__for_iterator.asObject0() );

                if ( _tmp_unpack_2 == NULL )
                {
                    tmp_for_loop_1__break_indicator = Py_True;
                    break;
                }
                tmp_for_loop_1__iter_value.assign1( _tmp_unpack_2 );
                var_tool.assign0( tmp_for_loop_1__iter_value.asObject0() );
                frame_guard.setLineNumber( 559 );
                {
                    PyObjectTempKeeper0 make_list1;
                    PyObjectTempKeeper0 make_list2;
                    var_cmd.assign1( ( make_list1.assign( var_tool.asObject0() ), make_list2.assign( par_infile.asObject0() ), MAKE_LIST8( make_list1.asObject1(), INCREASE_REFCOUNT( const_unicode_digest_d74343fb2bf8b978035425cb62859fbb ), INCREASE_REFCOUNT( const_unicode_digest_20f011826070657b0f0092278d65ec74 ), make_list2.asObject1(), INCREASE_REFCOUNT( const_unicode_digest_9e24f39ad756a1094faf3a2b3e3474aa ), INCREASE_REFCOUNT( const_unicode_plain_copy ), INCREASE_REFCOUNT( const_unicode_digest_cce0d0ee3c470da6d4d2a472bc5da755 ), par_outfile.asObject1() ) ) );
                }
                PyObject *tmp_try_except_1__unhandled_indicator = Py_True;
                frame_guard.setLineNumber( 561 );
                try
                {
                    frame_guard.setLineNumber( 562 );
                    PyObjectTemporary tmp_with_1__source( OPEN_FILE( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_os ), const_str_plain_devnull ) ).asObject0(), const_unicode_plain_w, NULL ) );
                    PyObjectTemporary tmp_with_1__exit( LOOKUP_SPECIAL( tmp_with_1__source.asObject0(), const_str_plain___exit__ ) );
                    PyObjectTemporary tmp_with_1__enter( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_SPECIAL( tmp_with_1__source.asObject0(), const_str_plain___enter__ ) ).asObject0() ) );
                    PyObject *tmp_with_1__indicator = Py_True;
                    PythonExceptionKeeper _caught_3;
#if PYTHON_VERSION < 300
                    int _at_lineno_3 = 0;
#endif


                    try
                    {
                        // Tried block:
                        try
                        {
                            var_devnull.assign0( tmp_with_1__enter.asObject0() );
                            frame_guard.setLineNumber( 563 );
                            {
                                PyObjectTempKeeper0 call1;
                                PyObjectTempKeeper1 call2;
                                PyObjectTempKeeper0 make_dict1;
                                DECREASE_REFCOUNT( ( call1.assign( var_call.asObject0() ), call2.assign( MAKE_TUPLE1( var_cmd.asObject0() ) ), CALL_FUNCTION( call1.asObject0(), call2.asObject0(), PyObjectTemporary( ( make_dict1.assign( var_devnull.asObject0() ), MAKE_DICT2( make_dict1.asObject0(), const_str_plain_stdout, var_STDOUT.asObject0(), const_str_plain_stderr ) ) ).asObject0() ) ) );
                            }
                        }
                        catch ( PythonException &_exception )
                        {
                            if ( !_exception.hasTraceback() )
                            {
                                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                            }
                            else
                            {
                                _exception.addTraceback( frame_guard.getFrame0() );
                            }

                            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                            _exception.toExceptionHandler();

                            if ( _exception.matches( PyExc_BaseException ) )
                            {
                                frame_guard.detachFrame();
                                tmp_with_1__indicator = Py_False;
                                if ( (!( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS3( tmp_with_1__exit.asObject0(), _exception.getType(), _exception.getValue(), (PyObject *)_exception.getTraceback() ) ).asObject0() ) )) )
                                {
                                    {
                                        PyTracebackObject *tb = _exception.getTraceback();
                                        frame_guard.setLineNumber( tb->tb_lineno );
                                        PyTracebackObject *tb_next = tb->tb_next;
                                        tb->tb_next = NULL;
                                        _exception.setTraceback( tb_next );

                                        throw;
                                    }
                                }
                            }
                            else
                            {
                                PyTracebackObject *tb = _exception.getTraceback();
                                frame_guard.setLineNumber( tb->tb_lineno );
                                _exception.setTraceback( tb->tb_next );
                                tb->tb_next = NULL;

                                throw;
                            }
                        }
                    }
                    catch ( PythonException &_exception )
                    {
#if PYTHON_VERSION >= 300
                        if ( !_exception.hasTraceback() )
                        {
                            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                        }
                        else
                        {
                            _exception.addTraceback( frame_guard.getFrame0() );
                        }
#else
                        _at_lineno_3 = frame_guard.getLineNumber();
#endif

                        _caught_3.save( _exception );

#if PYTHON_VERSION >= 300
                        frame_guard.preserveExistingException();

                        _exception.toExceptionHandler();
#endif
                    }

                    // Final block:
                    if ( ( tmp_with_1__indicator == Py_True ) )
                    {
                        DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS3( tmp_with_1__exit.asObject0(), Py_None, Py_None, Py_None ) );
                    }
#if PYTHON_VERSION < 300
                    if ( _at_lineno_3 != 0 )
                    {
                       frame_guard.setLineNumber( _at_lineno_3 );
                    }
#endif
                    _caught_3.rethrow();
                    // Final end
                }
                catch ( PythonException &_exception )
                {
                    if ( !_exception.hasTraceback() )
                    {
                        _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                    }
                    else
                    {
                        _exception.addTraceback( frame_guard.getFrame0() );
                    }

                    frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                    ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                    _exception.toExceptionHandler();

                    if ( _exception.matches( PyExc_OSError ) )
                    {
                        frame_guard.detachFrame();
                        tmp_try_except_1__unhandled_indicator = Py_False;
                        frame_guard.setLineNumber( 566 );
                        {
                            PyObjectTempKeeper0 call1;
                            DECREASE_REFCOUNT( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_dbg ) ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), const_unicode_digest_0af3c511d789aea50da296ace3cf5e45, var_tool.asObject0() ) ) );
                        }
                    }
                    else
                    {
                        PyTracebackObject *tb = _exception.getTraceback();
                        frame_guard.setLineNumber( tb->tb_lineno );
                        _exception.setTraceback( tb->tb_next );
                        tb->tb_next = NULL;

                        throw;
                    }
                }
                frame_guard.setLineNumber( 561 );
                if ( ( tmp_try_except_1__unhandled_indicator == Py_True ) )
                {
                    frame_guard.setLineNumber( 569 );
                    {
                        PyObjectTempKeeper1 call1;
                        DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_os ), const_str_plain_unlink ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), par_infile.asObject0() ) ) );
                    }
                    frame_guard.setLineNumber( 570 );
                    {
                        PyObjectTempKeeper0 call1;
                        DECREASE_REFCOUNT( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_dbg ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( const_unicode_digest_9ac507cc82abb646f30aa8a1e80bdc5c, var_tool.asObject0() ) ).asObject0() ) ) );
                    }
                    frame_guard.setLineNumber( 572 );
                    if ( (!( CHECK_IF_TRUE( par_quiet.asObject0() ) )) )
                    {
                        frame_guard.setLineNumber( 573 );
                        DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_sys ), const_str_plain_stdout ) ).asObject0(), const_str_plain_write ) ).asObject0(), const_unicode_digest_d4dbdb52bdb24fc585ca7f65f967d5a8 ) );
                    }
                    frame_guard.setLineNumber( 575 );
                    break;
                }

                CONSIDER_THREADING();
            }
        }
        catch ( PythonException &_exception )
        {
#if PYTHON_VERSION >= 300
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }
#else
            _at_lineno_1 = frame_guard.getLineNumber();
#endif

            _caught_1.save( _exception );

#if PYTHON_VERSION >= 300
            frame_guard.preserveExistingException();

            _exception.toExceptionHandler();
#endif
        }

        // Final block:
        tmp_for_loop_1__iter_value.del( true );
        tmp_for_loop_1__for_iterator.del( false );
#if PYTHON_VERSION < 300
        if ( _at_lineno_1 != 0 )
        {
           frame_guard.setLineNumber( _at_lineno_1 );
        }
#endif
        _caught_1.rethrow();
        // Final end
        frame_guard.setLineNumber( 558 );
        if ( ( tmp_for_loop_1__break_indicator == Py_True ) )
        {
            frame_guard.setLineNumber( 578 );
            DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_logging ), const_str_plain_warning ) ).asObject0(), const_unicode_digest_6c468b2489bf3aa9729fb03c77b60595 ) );
            frame_guard.setLineNumber( 579 );
            {
                PyObjectTempKeeper1 call1;
                PyObjectTempKeeper0 call2;
                DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_os ), const_str_plain_rename ) ), call2.assign( par_infile.asObject0() ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), call2.asObject0(), par_outfile.asObject0() ) ) );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_muxer.updateLocalsDict( par_quiet.updateLocalsDict( par_outfile.updateLocalsDict( par_infile.updateLocalsDict( var_devnull.updateLocalsDict( var_cmd.updateLocalsDict( var_tool.updateLocalsDict( var_STDOUT.updateLocalsDict( var_call.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_19_remux_of_module_pafy )
        {
           Py_DECREF( frame_function_19_remux_of_module_pafy );
           frame_function_19_remux_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_19_remux_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_infile = NULL;
    PyObject *_python_par_outfile = NULL;
    PyObject *_python_par_quiet = NULL;
    PyObject *_python_par_muxer = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "remux() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_infile == key )
            {
                assert( _python_par_infile == NULL );
                _python_par_infile = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_outfile == key )
            {
                assert( _python_par_outfile == NULL );
                _python_par_outfile = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_quiet == key )
            {
                assert( _python_par_quiet == NULL );
                _python_par_quiet = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_muxer == key )
            {
                assert( _python_par_muxer == NULL );
                _python_par_muxer = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_infile, key ) )
            {
                assert( _python_par_infile == NULL );
                _python_par_infile = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_outfile, key ) )
            {
                assert( _python_par_outfile == NULL );
                _python_par_outfile = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_quiet, key ) )
            {
                assert( _python_par_quiet == NULL );
                _python_par_quiet = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_muxer, key ) )
            {
                assert( _python_par_muxer == NULL );
                _python_par_muxer = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "remux() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_infile != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_infile = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_infile == NULL )
    {
        if ( 0 + self->m_defaults_given >= 4  )
        {
            _python_par_infile = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_outfile != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_outfile = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_outfile == NULL )
    {
        if ( 1 + self->m_defaults_given >= 4  )
        {
            _python_par_outfile = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_quiet != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_quiet = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_quiet == NULL )
    {
        if ( 2 + self->m_defaults_given >= 4  )
        {
            _python_par_quiet = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 3 < args_given ))
    {
         if (unlikely( _python_par_muxer != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 3 );
             goto error_exit;
         }

        _python_par_muxer = INCREASE_REFCOUNT( args[ 3 ] );
    }
    else if ( _python_par_muxer == NULL )
    {
        if ( 3 + self->m_defaults_given >= 4  )
        {
            _python_par_muxer = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 3 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_infile == NULL || _python_par_outfile == NULL || _python_par_quiet == NULL || _python_par_muxer == NULL ))
    {
        PyObject *values[] = { _python_par_infile, _python_par_outfile, _python_par_quiet, _python_par_muxer };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_19_remux_of_module_pafy( self, _python_par_infile, _python_par_outfile, _python_par_quiet, _python_par_muxer );

error_exit:;

    Py_XDECREF( _python_par_infile );
    Py_XDECREF( _python_par_outfile );
    Py_XDECREF( _python_par_quiet );
    Py_XDECREF( _python_par_muxer );

    return NULL;
}

static PyObject *dparse_function_19_remux_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4 )
    {
        return impl_function_19_remux_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_19_remux_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_20_fetch_cached_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_url, PyObject *_python_par_encoding, PyObject *_python_par_dbg_ref, PyObject *_python_par_file_prefix )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_url( const_str_plain_url, _python_par_url );
    PyObjectLocalParameterVariableNoDel par_encoding( const_str_plain_encoding, _python_par_encoding );
    PyObjectLocalParameterVariableNoDel par_dbg_ref( const_str_plain_dbg_ref, _python_par_dbg_ref );
    PyObjectLocalParameterVariableNoDel par_file_prefix( const_str_plain_file_prefix, _python_par_file_prefix );
    PyObjectLocalVariable var_tmpdir( const_str_plain_tmpdir );
    PyObjectLocalVariable var_url_md5( const_str_plain_url_md5 );
    PyObjectLocalVariable var_cached_filename( const_str_plain_cached_filename );
    PyObjectLocalVariable var_f( const_str_plain_f );
    PyObjectLocalVariable var_retval( const_str_plain_retval );
    PyObjectLocalVariable var_data( const_str_plain_data );

    // Actual function code.
    static PyFrameObject *frame_function_20_fetch_cached_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_20_fetch_cached_of_module_pafy ) )
    {
        if ( frame_function_20_fetch_cached_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_20_fetch_cached_of_module_pafy" );
#endif
            Py_DECREF( frame_function_20_fetch_cached_of_module_pafy );
        }

        frame_function_20_fetch_cached_of_module_pafy = MAKE_FRAME( codeobj_e600089d9c66e5832a1b65b8922d9474, module_pafy );
    }

    FrameGuardWithExceptionPreservation frame_guard( frame_function_20_fetch_cached_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_20_fetch_cached_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 584 );
        {
            PyObjectTempKeeper1 call1;
            var_tmpdir.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_os ), const_str_plain_path ) ).asObject0(), const_str_plain_join ) ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_tempfile ), const_str_plain_gettempdir ) ).asObject0() ) ).asObject0(), const_unicode_plain_pafy ) ) );
        }
        frame_guard.setLineNumber( 586 );
        {
            PyObjectTempKeeper1 call1;
            if ( (!( CHECK_IF_TRUE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_os ), const_str_plain_path ) ).asObject0(), const_str_plain_exists ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), var_tmpdir.asObject0() ) ) ).asObject0() ) )) )
            {
                frame_guard.setLineNumber( 587 );
                {
                    PyObjectTempKeeper1 call1;
                    DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_os ), const_str_plain_makedirs ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), var_tmpdir.asObject0() ) ) );
                }
            }
        }
        frame_guard.setLineNumber( 589 );
        {
            PyObjectTempKeeper1 call1;
            var_url_md5.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_hashlib ), const_str_plain_md5 ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_url.asObject0(), const_str_plain_encode ) ).asObject0(), const_unicode_plain_utf8 ) ).asObject0() ) ) ).asObject0(), const_str_plain_hexdigest ) ).asObject0() ) );
        }
        frame_guard.setLineNumber( 590 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper0 call2;
            PyObjectTempKeeper0 op1;
            var_cached_filename.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_os ), const_str_plain_path ) ).asObject0(), const_str_plain_join ) ), call2.assign( var_tmpdir.asObject0() ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), call2.asObject0(), PyObjectTemporary( ( op1.assign( par_file_prefix.asObject0() ), BINARY_OPERATION_ADD( op1.asObject0(), var_url_md5.asObject0() ) ) ).asObject0() ) ) );
        }
        frame_guard.setLineNumber( 592 );
        {
            PyObjectTempKeeper1 call1;
            if ( CHECK_IF_TRUE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_os ), const_str_plain_path ) ).asObject0(), const_str_plain_exists ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), var_cached_filename.asObject0() ) ) ).asObject0() ) )
            {
                frame_guard.setLineNumber( 593 );
                {
                    PyObjectTempKeeper0 call1;
                    DECREASE_REFCOUNT( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_dbg ) ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), const_unicode_digest_aad6553dd940e982967913c32107e60d, par_dbg_ref.asObject0() ) ) );
                }
                frame_guard.setLineNumber( 595 );
                PyObjectTemporary tmp_with_1__source( OPEN_FILE( var_cached_filename.asObject0(), NULL, NULL ) );
                PyObjectTemporary tmp_with_1__exit( LOOKUP_SPECIAL( tmp_with_1__source.asObject0(), const_str_plain___exit__ ) );
                PyObjectTemporary tmp_with_1__enter( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_SPECIAL( tmp_with_1__source.asObject0(), const_str_plain___enter__ ) ).asObject0() ) );
                PyObject *tmp_with_1__indicator = Py_True;
                PythonExceptionKeeper _caught_1;
#if PYTHON_VERSION < 300
                int _at_lineno_1 = 0;
#endif


                try
                {
                    // Tried block:
                    try
                    {
                        var_f.assign0( tmp_with_1__enter.asObject0() );
                        frame_guard.setLineNumber( 596 );
                        var_retval.assign1( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_f.asObject0(), const_str_plain_read ) ).asObject0() ) );
                    }
                    catch ( PythonException &_exception )
                    {
                        if ( !_exception.hasTraceback() )
                        {
                            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                        }
                        else
                        {
                            _exception.addTraceback( frame_guard.getFrame0() );
                        }

                        frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                        ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                        _exception.toExceptionHandler();

                        if ( _exception.matches( PyExc_BaseException ) )
                        {
                            frame_guard.detachFrame();
                            tmp_with_1__indicator = Py_False;
                            if ( (!( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS3( tmp_with_1__exit.asObject0(), _exception.getType(), _exception.getValue(), (PyObject *)_exception.getTraceback() ) ).asObject0() ) )) )
                            {
                                {
                                    PyTracebackObject *tb = _exception.getTraceback();
                                    frame_guard.setLineNumber( tb->tb_lineno );
                                    PyTracebackObject *tb_next = tb->tb_next;
                                    tb->tb_next = NULL;
                                    _exception.setTraceback( tb_next );

                                    throw;
                                }
                            }
                        }
                        else
                        {
                            PyTracebackObject *tb = _exception.getTraceback();
                            frame_guard.setLineNumber( tb->tb_lineno );
                            _exception.setTraceback( tb->tb_next );
                            tb->tb_next = NULL;

                            throw;
                        }
                    }
                }
                catch ( PythonException &_exception )
                {
#if PYTHON_VERSION >= 300
                    if ( !_exception.hasTraceback() )
                    {
                        _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                    }
                    else
                    {
                        _exception.addTraceback( frame_guard.getFrame0() );
                    }
#else
                    _at_lineno_1 = frame_guard.getLineNumber();
#endif

                    _caught_1.save( _exception );

#if PYTHON_VERSION >= 300
                    frame_guard.preserveExistingException();

                    _exception.toExceptionHandler();
#endif
                }

                // Final block:
                if ( ( tmp_with_1__indicator == Py_True ) )
                {
                    DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS3( tmp_with_1__exit.asObject0(), Py_None, Py_None, Py_None ) );
                }
#if PYTHON_VERSION < 300
                if ( _at_lineno_1 != 0 )
                {
                   frame_guard.setLineNumber( _at_lineno_1 );
                }
#endif
                _caught_1.rethrow();
                // Final end
                frame_guard.setLineNumber( 598 );
                return var_retval.asObject1();
            }
            else
            {
                frame_guard.setLineNumber( 601 );
                {
                    PyObjectTempKeeper0 call1;
                    var_data.assign1( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_fetch_decode ) ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), par_url.asObject0(), const_unicode_plain_utf8 ) ) );
                }
                frame_guard.setLineNumber( 602 );
                {
                    PyObjectTempKeeper0 call1;
                    DECREASE_REFCOUNT( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_dbg ) ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), const_unicode_digest_f71185ee04984fe0c700e3db96b1989f, par_dbg_ref.asObject0() ) ) );
                }
                frame_guard.setLineNumber( 603 );
                {
                    PyObjectTempKeeper1 call1;
                    DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_new ), const_str_plain_callback ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( const_unicode_digest_f71185ee04984fe0c700e3db96b1989f, par_dbg_ref.asObject0() ) ).asObject0() ) ) );
                }
                frame_guard.setLineNumber( 605 );
                PyObjectTemporary tmp_with_2__source( OPEN_FILE( var_cached_filename.asObject0(), const_unicode_plain_w, NULL ) );
                PyObjectTemporary tmp_with_2__exit( LOOKUP_SPECIAL( tmp_with_2__source.asObject0(), const_str_plain___exit__ ) );
                PyObjectTemporary tmp_with_2__enter( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_SPECIAL( tmp_with_2__source.asObject0(), const_str_plain___enter__ ) ).asObject0() ) );
                PyObject *tmp_with_2__indicator = Py_True;
                PythonExceptionKeeper _caught_2;
#if PYTHON_VERSION < 300
                int _at_lineno_2 = 0;
#endif


                try
                {
                    // Tried block:
                    try
                    {
                        var_f.assign0( tmp_with_2__enter.asObject0() );
                        frame_guard.setLineNumber( 606 );
                        {
                            PyObjectTempKeeper1 call1;
                            DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( var_f.asObject0(), const_str_plain_write ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), var_data.asObject0() ) ) );
                        }
                    }
                    catch ( PythonException &_exception )
                    {
                        if ( !_exception.hasTraceback() )
                        {
                            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                        }
                        else
                        {
                            _exception.addTraceback( frame_guard.getFrame0() );
                        }

                        frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                        ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                        _exception.toExceptionHandler();

                        if ( _exception.matches( PyExc_BaseException ) )
                        {
                            frame_guard.detachFrame();
                            tmp_with_2__indicator = Py_False;
                            if ( (!( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS3( tmp_with_2__exit.asObject0(), _exception.getType(), _exception.getValue(), (PyObject *)_exception.getTraceback() ) ).asObject0() ) )) )
                            {
                                {
                                    PyTracebackObject *tb = _exception.getTraceback();
                                    frame_guard.setLineNumber( tb->tb_lineno );
                                    PyTracebackObject *tb_next = tb->tb_next;
                                    tb->tb_next = NULL;
                                    _exception.setTraceback( tb_next );

                                    throw;
                                }
                            }
                        }
                        else
                        {
                            PyTracebackObject *tb = _exception.getTraceback();
                            frame_guard.setLineNumber( tb->tb_lineno );
                            _exception.setTraceback( tb->tb_next );
                            tb->tb_next = NULL;

                            throw;
                        }
                    }
                }
                catch ( PythonException &_exception )
                {
#if PYTHON_VERSION >= 300
                    if ( !_exception.hasTraceback() )
                    {
                        _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                    }
                    else
                    {
                        _exception.addTraceback( frame_guard.getFrame0() );
                    }
#else
                    _at_lineno_2 = frame_guard.getLineNumber();
#endif

                    _caught_2.save( _exception );

#if PYTHON_VERSION >= 300
                    frame_guard.preserveExistingException();

                    _exception.toExceptionHandler();
#endif
                }

                // Final block:
                if ( ( tmp_with_2__indicator == Py_True ) )
                {
                    DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS3( tmp_with_2__exit.asObject0(), Py_None, Py_None, Py_None ) );
                }
#if PYTHON_VERSION < 300
                if ( _at_lineno_2 != 0 )
                {
                   frame_guard.setLineNumber( _at_lineno_2 );
                }
#endif
                _caught_2.rethrow();
                // Final end
                frame_guard.setLineNumber( 609 );
                {
                    PyObjectTempKeeper0 call1;
                    PyObjectTempKeeper0 call2;
                    DECREASE_REFCOUNT( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_prune_files ) ), call2.assign( var_tmpdir.asObject0() ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), call2.asObject0(), par_file_prefix.asObject0() ) ) );
                }
                frame_guard.setLineNumber( 610 );
                return var_data.asObject1();
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_file_prefix.updateLocalsDict( par_dbg_ref.updateLocalsDict( par_encoding.updateLocalsDict( par_url.updateLocalsDict( var_data.updateLocalsDict( var_retval.updateLocalsDict( var_f.updateLocalsDict( var_cached_filename.updateLocalsDict( var_url_md5.updateLocalsDict( var_tmpdir.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_20_fetch_cached_of_module_pafy )
        {
           Py_DECREF( frame_function_20_fetch_cached_of_module_pafy );
           frame_function_20_fetch_cached_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_20_fetch_cached_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_url = NULL;
    PyObject *_python_par_encoding = NULL;
    PyObject *_python_par_dbg_ref = NULL;
    PyObject *_python_par_file_prefix = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "fetch_cached() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_url == key )
            {
                assert( _python_par_url == NULL );
                _python_par_url = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_encoding == key )
            {
                assert( _python_par_encoding == NULL );
                _python_par_encoding = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_dbg_ref == key )
            {
                assert( _python_par_dbg_ref == NULL );
                _python_par_dbg_ref = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_file_prefix == key )
            {
                assert( _python_par_file_prefix == NULL );
                _python_par_file_prefix = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_url, key ) )
            {
                assert( _python_par_url == NULL );
                _python_par_url = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_encoding, key ) )
            {
                assert( _python_par_encoding == NULL );
                _python_par_encoding = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_dbg_ref, key ) )
            {
                assert( _python_par_dbg_ref == NULL );
                _python_par_dbg_ref = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_file_prefix, key ) )
            {
                assert( _python_par_file_prefix == NULL );
                _python_par_file_prefix = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "fetch_cached() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_url != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_url = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_url == NULL )
    {
        if ( 0 + self->m_defaults_given >= 4  )
        {
            _python_par_url = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_encoding != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_encoding = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_encoding == NULL )
    {
        if ( 1 + self->m_defaults_given >= 4  )
        {
            _python_par_encoding = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_dbg_ref != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_dbg_ref = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_dbg_ref == NULL )
    {
        if ( 2 + self->m_defaults_given >= 4  )
        {
            _python_par_dbg_ref = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 3 < args_given ))
    {
         if (unlikely( _python_par_file_prefix != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 3 );
             goto error_exit;
         }

        _python_par_file_prefix = INCREASE_REFCOUNT( args[ 3 ] );
    }
    else if ( _python_par_file_prefix == NULL )
    {
        if ( 3 + self->m_defaults_given >= 4  )
        {
            _python_par_file_prefix = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 3 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_url == NULL || _python_par_encoding == NULL || _python_par_dbg_ref == NULL || _python_par_file_prefix == NULL ))
    {
        PyObject *values[] = { _python_par_url, _python_par_encoding, _python_par_dbg_ref, _python_par_file_prefix };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_20_fetch_cached_of_module_pafy( self, _python_par_url, _python_par_encoding, _python_par_dbg_ref, _python_par_file_prefix );

error_exit:;

    Py_XDECREF( _python_par_url );
    Py_XDECREF( _python_par_encoding );
    Py_XDECREF( _python_par_dbg_ref );
    Py_XDECREF( _python_par_file_prefix );

    return NULL;
}

static PyObject *dparse_function_20_fetch_cached_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4 )
    {
        return impl_function_20_fetch_cached_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_20_fetch_cached_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_21_prune_files_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_path, PyObject *_python_par_prefix, PyObject *_python_par_age_max, PyObject *_python_par_count_max )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_path( const_str_plain_path, _python_par_path );
    PyObjectLocalParameterVariableNoDel par_prefix( const_str_plain_prefix, _python_par_prefix );
    PyObjectLocalParameterVariableNoDel par_age_max( const_str_plain_age_max, _python_par_age_max );
    PyObjectLocalParameterVariableNoDel par_count_max( const_str_plain_count_max, _python_par_count_max );
    PyObjectLocalVariable var_tempfiles( const_str_plain_tempfiles );
    PyObjectLocalVariable var_f( const_str_plain_f );
    PyObjectLocalVariable var_filepath( const_str_plain_filepath );
    PyObjectLocalVariable var_age( const_str_plain_age );
    PyObjectTempVariable tmp_for_loop_1__iter_value;
    PyObjectTempVariable tmp_for_loop_2__iter_value;

    // Actual function code.
    var_tempfiles.assign1( PyList_New( 0 ) );
    static PyFrameObject *frame_function_21_prune_files_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_21_prune_files_of_module_pafy ) )
    {
        if ( frame_function_21_prune_files_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_21_prune_files_of_module_pafy" );
#endif
            Py_DECREF( frame_function_21_prune_files_of_module_pafy );
        }

        frame_function_21_prune_files_of_module_pafy = MAKE_FRAME( codeobj_6fb8bb742b5b54af54cfe6261e97cbbf, module_pafy );
    }

    FrameGuard frame_guard( frame_function_21_prune_files_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_21_prune_files_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 620 );
        {
            PyObjectTempKeeper1 call1;
            if ( (!( CHECK_IF_TRUE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_os ), const_str_plain_path ) ).asObject0(), const_str_plain_isdir ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), par_path.asObject0() ) ) ).asObject0() ) )) )
            {
                return INCREASE_REFCOUNT( Py_None );
            }
        }
        frame_guard.setLineNumber( 623 );
        PyObject *_tmp_for_loop_1__for_iterator;
        {
            PyObjectTempKeeper1 call1;
            _tmp_for_loop_1__for_iterator = MAKE_ITERATOR( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_os ), const_str_plain_listdir ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), par_path.asObject0() ) ) ).asObject0() );
        }
        PyObjectTemporaryWithDel tmp_for_loop_1__for_iterator( _tmp_for_loop_1__for_iterator );
        PythonExceptionKeeper _caught_1;
#if PYTHON_VERSION < 300
        int _at_lineno_1 = 0;
#endif


        try
        {
            // Tried block:
            while( true )
            {
                frame_guard.setLineNumber( 623 );
                PyObject *_tmp_unpack_2 = ITERATOR_NEXT( tmp_for_loop_1__for_iterator.asObject0() );

                if ( _tmp_unpack_2 == NULL )
                {
                    break;
                }
                tmp_for_loop_1__iter_value.assign1( _tmp_unpack_2 );
                var_f.assign0( tmp_for_loop_1__iter_value.asObject0() );
                frame_guard.setLineNumber( 624 );
                {
                    PyObjectTempKeeper1 call1;
                    PyObjectTempKeeper0 call2;
                    var_filepath.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_os ), const_str_plain_path ) ).asObject0(), const_str_plain_join ) ), call2.assign( par_path.asObject0() ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), call2.asObject0(), var_f.asObject0() ) ) );
                }
                frame_guard.setLineNumber( 626 );
                {
                    PyObjectTempKeeper1 call1;
                    PyObjectTempKeeper1 call2;
                    if ( ( CHECK_IF_TRUE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_os ), const_str_plain_path ) ).asObject0(), const_str_plain_isfile ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), var_filepath.asObject0() ) ) ).asObject0() ) && CHECK_IF_TRUE( PyObjectTemporary( ( call2.assign( LOOKUP_ATTRIBUTE( var_f.asObject0(), const_str_plain_startswith ) ), CALL_FUNCTION_WITH_ARGS1( call2.asObject0(), par_prefix.asObject0() ) ) ).asObject0() ) ) )
                    {
                        frame_guard.setLineNumber( 627 );
                        {
                            PyObjectTempKeeper1 call1;
                            PyObjectTempKeeper1 op1;
                            var_age.assign1( ( op1.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_time ), const_str_plain_time ) ).asObject0() ) ), BINARY_OPERATION_SUB( op1.asObject0(), PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_os ), const_str_plain_path ) ).asObject0(), const_str_plain_getmtime ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), var_filepath.asObject0() ) ) ).asObject0() ) ) );
                        }
                        frame_guard.setLineNumber( 629 );
                        {
                            PyObjectTempKeeper0 cmp1;
                            if ( ( cmp1.assign( var_age.asObject0() ), RICH_COMPARE_BOOL_GT( cmp1.asObject0(), par_age_max.asObject0() ) ) )
                            {
                                frame_guard.setLineNumber( 630 );
                                {
                                    PyObjectTempKeeper1 call1;
                                    DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_os ), const_str_plain_unlink ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), var_filepath.asObject0() ) ) );
                                }
                            }
                            else
                            {
                                frame_guard.setLineNumber( 633 );
                                {
                                    PyObjectTempKeeper1 call1;
                                    PyObjectTempKeeper0 make_tuple1;
                                    DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( var_tempfiles.asObject0(), const_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( ( make_tuple1.assign( var_filepath.asObject0() ), MAKE_TUPLE2( make_tuple1.asObject0(), var_age.asObject0() ) ) ).asObject0() ) ) );
                                }
                            }
                        }
                    }
                }

                CONSIDER_THREADING();
            }
        }
        catch ( PythonException &_exception )
        {
#if PYTHON_VERSION >= 300
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }
#else
            _at_lineno_1 = frame_guard.getLineNumber();
#endif

            _caught_1.save( _exception );

#if PYTHON_VERSION >= 300
            frame_guard.preserveExistingException();

            _exception.toExceptionHandler();
#endif
        }

        // Final block:
        tmp_for_loop_1__iter_value.del( true );
        tmp_for_loop_1__for_iterator.del( false );
#if PYTHON_VERSION < 300
        if ( _at_lineno_1 != 0 )
        {
           frame_guard.setLineNumber( _at_lineno_1 );
        }
#endif
        _caught_1.rethrow();
        // Final end
        frame_guard.setLineNumber( 635 );
        var_tempfiles.assign1( CALL_FUNCTION( LOOKUP_BUILTIN( const_str_plain_sorted ), PyObjectTemporary( MAKE_TUPLE1( var_tempfiles.asObject0() ) ).asObject0(), PyObjectTemporary( MAKE_DICT2( PyObjectTemporary( MAKE_FUNCTION_lambda_1_lambda_of_function_21_prune_files_of_module_pafy(  ) ).asObject0(), const_str_plain_key, Py_True, const_str_plain_reverse ) ).asObject0() ) );
        frame_guard.setLineNumber( 637 );
        PyObject *_tmp_for_loop_2__for_iterator;
        {
            PyObjectTempKeeper0 slice1;
            _tmp_for_loop_2__for_iterator = MAKE_ITERATOR( PyObjectTemporary( ( slice1.assign( var_tempfiles.asObject0() ), LOOKUP_SLICE( slice1.asObject0(), Py_None, PyObjectTemporary( UNARY_OPERATION( PyNumber_Negative, par_count_max.asObject0() ) ).asObject0() ) ) ).asObject0() );
        }
        PyObjectTemporaryWithDel tmp_for_loop_2__for_iterator( _tmp_for_loop_2__for_iterator );
        PythonExceptionKeeper _caught_3;
#if PYTHON_VERSION < 300
        int _at_lineno_3 = 0;
#endif


        try
        {
            // Tried block:
            while( true )
            {
                frame_guard.setLineNumber( 637 );
                PyObject *_tmp_unpack_4 = ITERATOR_NEXT( tmp_for_loop_2__for_iterator.asObject0() );

                if ( _tmp_unpack_4 == NULL )
                {
                    break;
                }
                tmp_for_loop_2__iter_value.assign1( _tmp_unpack_4 );
                var_f.assign0( tmp_for_loop_2__iter_value.asObject0() );
                frame_guard.setLineNumber( 638 );
                {
                    PyObjectTempKeeper1 call1;
                    DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_os ), const_str_plain_unlink ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( var_f.asObject0(), const_int_0, 0 ) ).asObject0() ) ) );
                }

                CONSIDER_THREADING();
            }
        }
        catch ( PythonException &_exception )
        {
#if PYTHON_VERSION >= 300
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }
#else
            _at_lineno_3 = frame_guard.getLineNumber();
#endif

            _caught_3.save( _exception );

#if PYTHON_VERSION >= 300
            frame_guard.preserveExistingException();

            _exception.toExceptionHandler();
#endif
        }

        // Final block:
        tmp_for_loop_2__iter_value.del( true );
        tmp_for_loop_2__for_iterator.del( false );
#if PYTHON_VERSION < 300
        if ( _at_lineno_3 != 0 )
        {
           frame_guard.setLineNumber( _at_lineno_3 );
        }
#endif
        _caught_3.rethrow();
        // Final end
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_count_max.updateLocalsDict( par_age_max.updateLocalsDict( par_prefix.updateLocalsDict( par_path.updateLocalsDict( var_age.updateLocalsDict( var_filepath.updateLocalsDict( var_f.updateLocalsDict( var_tempfiles.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_21_prune_files_of_module_pafy )
        {
           Py_DECREF( frame_function_21_prune_files_of_module_pafy );
           frame_function_21_prune_files_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_21_prune_files_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_path = NULL;
    PyObject *_python_par_prefix = NULL;
    PyObject *_python_par_age_max = NULL;
    PyObject *_python_par_count_max = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "prune_files() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_path == key )
            {
                assert( _python_par_path == NULL );
                _python_par_path = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_prefix == key )
            {
                assert( _python_par_prefix == NULL );
                _python_par_prefix = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_age_max == key )
            {
                assert( _python_par_age_max == NULL );
                _python_par_age_max = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_count_max == key )
            {
                assert( _python_par_count_max == NULL );
                _python_par_count_max = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_path, key ) )
            {
                assert( _python_par_path == NULL );
                _python_par_path = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_prefix, key ) )
            {
                assert( _python_par_prefix == NULL );
                _python_par_prefix = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_age_max, key ) )
            {
                assert( _python_par_age_max == NULL );
                _python_par_age_max = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_count_max, key ) )
            {
                assert( _python_par_count_max == NULL );
                _python_par_count_max = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "prune_files() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_path != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_path = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_path == NULL )
    {
        if ( 0 + self->m_defaults_given >= 4  )
        {
            _python_par_path = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_prefix != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_prefix = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_prefix == NULL )
    {
        if ( 1 + self->m_defaults_given >= 4  )
        {
            _python_par_prefix = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_age_max != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_age_max = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_age_max == NULL )
    {
        if ( 2 + self->m_defaults_given >= 4  )
        {
            _python_par_age_max = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 3 < args_given ))
    {
         if (unlikely( _python_par_count_max != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 3 );
             goto error_exit;
         }

        _python_par_count_max = INCREASE_REFCOUNT( args[ 3 ] );
    }
    else if ( _python_par_count_max == NULL )
    {
        if ( 3 + self->m_defaults_given >= 4  )
        {
            _python_par_count_max = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 3 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_path == NULL || _python_par_prefix == NULL || _python_par_age_max == NULL || _python_par_count_max == NULL ))
    {
        PyObject *values[] = { _python_par_path, _python_par_prefix, _python_par_age_max, _python_par_count_max };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_21_prune_files_of_module_pafy( self, _python_par_path, _python_par_prefix, _python_par_age_max, _python_par_count_max );

error_exit:;

    Py_XDECREF( _python_par_path );
    Py_XDECREF( _python_par_prefix );
    Py_XDECREF( _python_par_age_max );
    Py_XDECREF( _python_par_count_max );

    return NULL;
}

static PyObject *dparse_function_21_prune_files_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4 )
    {
        return impl_function_21_prune_files_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_21_prune_files_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_lambda_1_lambda_of_function_21_prune_files_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_x( const_str_plain_x, _python_par_x );

    // Actual function code.
    static PyFrameObject *frame_lambda_1_lambda_of_function_21_prune_files_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_lambda_1_lambda_of_function_21_prune_files_of_module_pafy ) )
    {
        if ( frame_lambda_1_lambda_of_function_21_prune_files_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for lambda_1_lambda_of_function_21_prune_files_of_module_pafy" );
#endif
            Py_DECREF( frame_lambda_1_lambda_of_function_21_prune_files_of_module_pafy );
        }

        frame_lambda_1_lambda_of_function_21_prune_files_of_module_pafy = MAKE_FRAME( codeobj_8b7c8ab80bef85352fb232b12410f1c8, module_pafy );
    }

    FrameGuard frame_guard( frame_lambda_1_lambda_of_function_21_prune_files_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_lambda_1_lambda_of_function_21_prune_files_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 635 );
        return LOOKUP_SUBSCRIPT_CONST( par_x.asObject0(), const_int_pos_1, 1 );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_x.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_lambda_1_lambda_of_function_21_prune_files_of_module_pafy )
        {
           Py_DECREF( frame_lambda_1_lambda_of_function_21_prune_files_of_module_pafy );
           frame_lambda_1_lambda_of_function_21_prune_files_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_lambda_1_lambda_of_function_21_prune_files_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_x = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_x == key )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_x, key ) )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "<lambda>() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_x != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_x = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_x == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_x = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_x == NULL ))
    {
        PyObject *values[] = { _python_par_x };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_lambda_1_lambda_of_function_21_prune_files_of_module_pafy( self, _python_par_x );

error_exit:;

    Py_XDECREF( _python_par_x );

    return NULL;
}

static PyObject *dparse_lambda_1_lambda_of_function_21_prune_files_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_lambda_1_lambda_of_function_21_prune_files_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_lambda_1_lambda_of_function_21_prune_files_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_22_get_js_sm_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_video_id )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_video_id( const_str_plain_video_id, _python_par_video_id );
    PyObjectLocalVariable var_watch_url( const_str_plain_watch_url );
    PyObjectLocalVariable var_watchinfo( const_str_plain_watchinfo );
    PyObjectLocalVariable var_video_info_url( const_str_plain_video_info_url );
    PyObjectLocalVariable var_m( const_str_plain_m );
    PyObjectLocalVariable var_myjson( const_str_plain_myjson );
    PyObjectLocalVariable var_stream_info( const_str_plain_stream_info );
    PyObjectLocalVariable var_dash_url( const_str_plain_dash_url );
    PyObjectLocalVariable var_sm( const_str_plain_sm );
    PyObjectLocalVariable var_asm( const_str_plain_asm );
    PyObjectLocalVariable var_js_url( const_str_plain_js_url );
    PyObjectLocalVariable var_funcs( const_str_plain_funcs );
    PyObjectLocalVariable var_javascript( const_str_plain_javascript );
    PyObjectLocalVariable var_mainfunc( const_str_plain_mainfunc );

    // Actual function code.
    static PyFrameObject *frame_function_22_get_js_sm_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_22_get_js_sm_of_module_pafy ) )
    {
        if ( frame_function_22_get_js_sm_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_22_get_js_sm_of_module_pafy" );
#endif
            Py_DECREF( frame_function_22_get_js_sm_of_module_pafy );
        }

        frame_function_22_get_js_sm_of_module_pafy = MAKE_FRAME( codeobj_6ba6dd883d0a6dc4fed76e9908b808cb, module_pafy );
    }

    FrameGuard frame_guard( frame_function_22_get_js_sm_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_22_get_js_sm_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 651 );
        {
            PyObjectTempKeeper1 op1;
            var_watch_url.assign1( ( op1.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_g ), const_str_plain_urls ) ).asObject0(), const_unicode_plain_watchv ) ), BINARY_OPERATION_REMAINDER( op1.asObject0(), par_video_id.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 652 );
        DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_new ), const_str_plain_callback ) ).asObject0(), const_unicode_digest_46b72bac58d3e7f1d9dc77e835f99fed ) );
        frame_guard.setLineNumber( 653 );
        {
            PyObjectTempKeeper0 call1;
            var_watchinfo.assign1( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_fetch_decode ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), var_watch_url.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 655 );
        {
            PyObjectTempKeeper1 call1;
            if ( ( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_re ), const_str_plain_search ) ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), const_unicode_digest_43e0fa08ce428a058669423bcfaba1e2, var_watchinfo.asObject0() ) ) ).asObject0() != Py_None ) )
            {
                frame_guard.setLineNumber( 657 );
                DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS1( GET_MODULE_VALUE0( const_str_plain_dbg ), const_unicode_digest_cf6e6d9d00730732d0abf4c310f47c87 ) );
                frame_guard.setLineNumber( 659 );
                {
                    PyObjectTempKeeper0 make_tuple1;
                    PyObjectTempKeeper1 op1;
                    var_video_info_url.assign1( ( op1.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_g ), const_str_plain_urls ) ).asObject0(), const_unicode_plain_age_vidinfo ) ), BINARY_OPERATION_REMAINDER( op1.asObject0(), PyObjectTemporary( ( make_tuple1.assign( par_video_id.asObject0() ), MAKE_TUPLE2( make_tuple1.asObject0(), par_video_id.asObject0() ) ) ).asObject0() ) ) );
                }
                frame_guard.setLineNumber( 661 );
                return var_video_info_url.asObject1();
            }
        }
        frame_guard.setLineNumber( 663 );
        DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS1( GET_MODULE_VALUE0( const_str_plain_dbg ), const_unicode_digest_6d0d7f790c50b8bbf3c20639f10bbef2 ) );
        frame_guard.setLineNumber( 664 );
        DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_new ), const_str_plain_callback ) ).asObject0(), const_unicode_digest_6d0d7f790c50b8bbf3c20639f10bbef2 ) );
        frame_guard.setLineNumber( 665 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper1 call2;
            var_m.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_re ), const_str_plain_search ) ), call2.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_g ), const_str_plain_jsplayer ) ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), call2.asObject0(), var_watchinfo.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 666 );
        {
            PyObjectTempKeeper1 call1;
            var_myjson.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_json ), const_str_plain_loads ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_m.asObject0(), const_str_plain_group ) ).asObject0(), const_int_pos_1 ) ).asObject0() ) ) );
        }
        frame_guard.setLineNumber( 667 );
        var_stream_info.assign1( LOOKUP_SUBSCRIPT( var_myjson.asObject0(), const_unicode_plain_args ) );
        frame_guard.setLineNumber( 668 );
        var_dash_url.assign1( LOOKUP_SUBSCRIPT( var_stream_info.asObject0(), const_unicode_plain_dashmpd ) );
        frame_guard.setLineNumber( 669 );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper1 call2;
            var_sm.assign1( ( call1.assign( GET_MODULE_VALUE0( const_str_plain__extract_smap ) ), call2.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_g ), const_str_plain_UEFSM ) ), CALL_FUNCTION_WITH_ARGS3( call1.asObject0(), call2.asObject0(), var_stream_info.asObject0(), Py_False ) ) );
        }
        frame_guard.setLineNumber( 670 );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper1 call2;
            var_asm.assign1( ( call1.assign( GET_MODULE_VALUE0( const_str_plain__extract_smap ) ), call2.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_g ), const_str_plain_AF ) ), CALL_FUNCTION_WITH_ARGS3( call1.asObject0(), call2.asObject0(), var_stream_info.asObject0(), Py_False ) ) );
        }
        frame_guard.setLineNumber( 671 );
        var_js_url.assign1( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_SUBSCRIPT( var_myjson.asObject0(), const_unicode_plain_assets ) ).asObject0(), const_unicode_plain_js ) );
        frame_guard.setLineNumber( 672 );
        var_js_url.assign1( ( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_js_url.asObject0(), const_str_plain_startswith ) ).asObject0(), const_unicode_digest_7bc0ee636b3b83484fc3b9348863bd22 ) ).asObject0() ) ? BINARY_OPERATION_ADD( const_unicode_digest_9adcb166bad34e210b4033503a770d31, var_js_url.asObject0() ) : var_js_url.asObject1() ) );
        frame_guard.setLineNumber( 673 );
        {
            PyObjectTempKeeper1 call1;
            var_funcs.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_Pafy ), const_str_plain_funcmap ) ).asObject0(), const_str_plain_get ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), var_js_url.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 675 );
        if ( (!( CHECK_IF_TRUE( var_funcs.asObject0() ) )) )
        {
            frame_guard.setLineNumber( 676 );
            DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS1( GET_MODULE_VALUE0( const_str_plain_dbg ), const_unicode_digest_8cd5c7d47bb8826ee3357b9a90f17680 ) );
            frame_guard.setLineNumber( 677 );
            DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_new ), const_str_plain_callback ) ).asObject0(), const_unicode_digest_8cd5c7d47bb8826ee3357b9a90f17680 ) );
            frame_guard.setLineNumber( 678 );
            {
                PyObjectTempKeeper0 call1;
                var_javascript.assign1( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_fetch_cached ) ), CALL_FUNCTION( call1.asObject0(), PyObjectTemporary( MAKE_TUPLE1( var_js_url.asObject0() ) ).asObject0(), PyObjectTemporary( PyDict_Copy( const_dict_6b501367394531004fe894ccbdaea863 ) ).asObject0() ) ) );
            }
            frame_guard.setLineNumber( 680 );
            {
                PyObjectTempKeeper0 call1;
                var_mainfunc.assign1( ( call1.assign( GET_MODULE_VALUE0( const_str_plain__get_mainfunc_from_js ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), var_javascript.asObject0() ) ) );
            }
            frame_guard.setLineNumber( 681 );
            {
                PyObjectTempKeeper0 call1;
                PyObjectTempKeeper0 call2;
                var_funcs.assign1( ( call1.assign( GET_MODULE_VALUE0( const_str_plain__get_other_funcs ) ), call2.assign( var_mainfunc.asObject0() ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), call2.asObject0(), var_javascript.asObject0() ) ) );
            }
            frame_guard.setLineNumber( 682 );
            {
                PyObject *tmp_identifier = var_mainfunc.asObject0();
                SET_SUBSCRIPT( tmp_identifier, var_funcs.asObject0(), const_unicode_plain_mainfunction );
            }
        }
        else
        {
            frame_guard.setLineNumber( 684 );
            if ( CHECK_IF_TRUE( var_funcs.asObject0() ) )
            {
                frame_guard.setLineNumber( 685 );
                {
                    PyObjectTempKeeper0 call1;
                    DECREASE_REFCOUNT( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_dbg ) ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), const_unicode_digest_d947c174cf1a7b15d4a2a2aaade2b129, var_js_url.asObject0() ) ) );
                }
                frame_guard.setLineNumber( 686 );
                {
                    PyObjectTempKeeper0 call1;
                    DECREASE_REFCOUNT( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_dbg ) ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), const_unicode_digest_c2bfcc67f6a8309be78526be6b0e4547, PyObjectTemporary( BUILTIN_LEN( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_Pafy ), const_str_plain_funcmap ) ).asObject0() ) ).asObject0() ) ) );
                }
            }
        }
        frame_guard.setLineNumber( 688 );
        {
            PyObjectTempKeeper0 make_tuple1;
            PyObjectTempKeeper1 make_tuple2;
            PyObjectTempKeeper0 make_tuple3;
            PyObjectTempKeeper0 make_tuple4;
            return ( make_tuple2.assign( ( make_tuple1.assign( var_sm.asObject0() ), MAKE_TUPLE2( make_tuple1.asObject0(), var_asm.asObject0() ) ) ), make_tuple3.assign( var_js_url.asObject0() ), make_tuple4.assign( var_funcs.asObject0() ), MAKE_TUPLE4( make_tuple2.asObject0(), make_tuple3.asObject0(), make_tuple4.asObject0(), var_dash_url.asObject0() ) );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_video_id.updateLocalsDict( var_mainfunc.updateLocalsDict( var_javascript.updateLocalsDict( var_funcs.updateLocalsDict( var_js_url.updateLocalsDict( var_asm.updateLocalsDict( var_sm.updateLocalsDict( var_dash_url.updateLocalsDict( var_stream_info.updateLocalsDict( var_myjson.updateLocalsDict( var_m.updateLocalsDict( var_video_info_url.updateLocalsDict( var_watchinfo.updateLocalsDict( var_watch_url.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_22_get_js_sm_of_module_pafy )
        {
           Py_DECREF( frame_function_22_get_js_sm_of_module_pafy );
           frame_function_22_get_js_sm_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_22_get_js_sm_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_video_id = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_js_sm() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_video_id == key )
            {
                assert( _python_par_video_id == NULL );
                _python_par_video_id = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_video_id, key ) )
            {
                assert( _python_par_video_id == NULL );
                _python_par_video_id = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_js_sm() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_video_id != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_video_id = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_video_id == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_video_id = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_video_id == NULL ))
    {
        PyObject *values[] = { _python_par_video_id };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_22_get_js_sm_of_module_pafy( self, _python_par_video_id );

error_exit:;

    Py_XDECREF( _python_par_video_id );

    return NULL;
}

static PyObject *dparse_function_22_get_js_sm_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_22_get_js_sm_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_22_get_js_sm_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_23__make_url_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_raw, PyObject *_python_par_sig, PyObject *_python_par_quick )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_raw( const_str_plain_raw, _python_par_raw );
    PyObjectLocalParameterVariableNoDel par_sig( const_str_plain_sig, _python_par_sig );
    PyObjectLocalParameterVariableNoDel par_quick( const_str_plain_quick, _python_par_quick );

    // Actual function code.
    static PyFrameObject *frame_function_23__make_url_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_23__make_url_of_module_pafy ) )
    {
        if ( frame_function_23__make_url_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_23__make_url_of_module_pafy" );
#endif
            Py_DECREF( frame_function_23__make_url_of_module_pafy );
        }

        frame_function_23__make_url_of_module_pafy = MAKE_FRAME( codeobj_8db3e84453016dfba6ff578b42f804db, module_pafy );
    }

    FrameGuard frame_guard( frame_function_23__make_url_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_23__make_url_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 693 );
        if ( ( CHECK_IF_TRUE( par_quick.asObject0() ) && SEQUENCE_CONTAINS_NOT_BOOL( const_unicode_digest_96451beda59080ce67dd4c3455a1c7ba, par_raw.asObject0() ) ) )
        {
            frame_guard.setLineNumber( 694 );
            PyObject *tmp_inplace_assign_1__inplace_start = par_raw.asObject0();
            PyObjectTemporary tmp_inplace_assign_1__inplace_end( BINARY_OPERATION( PyNumber_InPlaceAdd, tmp_inplace_assign_1__inplace_start, const_unicode_digest_105f26ca964d396970850d1c25faf652 ) );
            if ( ( tmp_inplace_assign_1__inplace_start != tmp_inplace_assign_1__inplace_end.asObject0() ) )
            {
                par_raw.assign0( tmp_inplace_assign_1__inplace_end.asObject0() );
            }
        }
        frame_guard.setLineNumber( 696 );
        if ( SEQUENCE_CONTAINS_NOT_BOOL( const_unicode_digest_b69842a89b1960c57370c6f6ae1322c6, par_raw.asObject0() ) )
        {
            frame_guard.setLineNumber( 698 );
            if ( ( par_sig.asObject0() == Py_None ) )
            {
                frame_guard.setLineNumber( 699 );
                RAISE_EXCEPTION_WITH_TYPE( PyObjectTemporary( CALL_FUNCTION_WITH_POSARGS( PyExc_IOError, PyObjectTemporary( MAKE_TUPLE1( const_unicode_digest_51e23fb081051b13ef1ce4874afb831d ) ).asObject0() ) ).asObject0(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject0() );
            }
            frame_guard.setLineNumber( 701 );
            PyObject *tmp_inplace_assign_2__inplace_start = par_raw.asObject0();
            PyObject *_tmp_inplace_assign_2__inplace_end;
            {
                PyObjectTempKeeper0 op1;
                _tmp_inplace_assign_2__inplace_end = ( op1.assign( tmp_inplace_assign_2__inplace_start ), BINARY_OPERATION( PyNumber_InPlaceAdd, op1.asObject0(), PyObjectTemporary( BINARY_OPERATION_ADD( const_unicode_digest_a232a0d29ea87a67bb322d3b887b5073, par_sig.asObject0() ) ).asObject0() ) );
            }
            PyObjectTemporary tmp_inplace_assign_2__inplace_end( _tmp_inplace_assign_2__inplace_end );
            if ( ( tmp_inplace_assign_2__inplace_start != tmp_inplace_assign_2__inplace_end.asObject0() ) )
            {
                par_raw.assign0( tmp_inplace_assign_2__inplace_end.asObject0() );
            }
        }
        frame_guard.setLineNumber( 703 );
        return par_raw.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_quick.updateLocalsDict( par_sig.updateLocalsDict( par_raw.updateLocalsDict( PyDict_New() ) ) );

        if ( frame_guard.getFrame0() == frame_function_23__make_url_of_module_pafy )
        {
           Py_DECREF( frame_function_23__make_url_of_module_pafy );
           frame_function_23__make_url_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_23__make_url_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_raw = NULL;
    PyObject *_python_par_sig = NULL;
    PyObject *_python_par_quick = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_make_url() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_raw == key )
            {
                assert( _python_par_raw == NULL );
                _python_par_raw = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_sig == key )
            {
                assert( _python_par_sig == NULL );
                _python_par_sig = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_quick == key )
            {
                assert( _python_par_quick == NULL );
                _python_par_quick = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_raw, key ) )
            {
                assert( _python_par_raw == NULL );
                _python_par_raw = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_sig, key ) )
            {
                assert( _python_par_sig == NULL );
                _python_par_sig = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_quick, key ) )
            {
                assert( _python_par_quick == NULL );
                _python_par_quick = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_make_url() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_raw != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_raw = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_raw == NULL )
    {
        if ( 0 + self->m_defaults_given >= 3  )
        {
            _python_par_raw = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_sig != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_sig = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_sig == NULL )
    {
        if ( 1 + self->m_defaults_given >= 3  )
        {
            _python_par_sig = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_quick != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_quick = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_quick == NULL )
    {
        if ( 2 + self->m_defaults_given >= 3  )
        {
            _python_par_quick = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_raw == NULL || _python_par_sig == NULL || _python_par_quick == NULL ))
    {
        PyObject *values[] = { _python_par_raw, _python_par_sig, _python_par_quick };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_23__make_url_of_module_pafy( self, _python_par_raw, _python_par_sig, _python_par_quick );

error_exit:;

    Py_XDECREF( _python_par_raw );
    Py_XDECREF( _python_par_sig );
    Py_XDECREF( _python_par_quick );

    return NULL;
}

static PyObject *dparse_function_23__make_url_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3 )
    {
        return impl_function_23__make_url_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_23__make_url_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_24_Stream_of_module_pafy(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable var___module__( const_str_plain___module__ );
    PyObjectLocalVariable var___doc__( const_str_plain___doc__ );
    PyObjectLocalVariable var___init__( const_str_plain___init__ );
    PyObjectLocalVariable var_generate_filename( const_str_plain_generate_filename );
    PyObjectLocalVariable var_rawbitrate( const_str_plain_rawbitrate );
    PyObjectLocalVariable var_threed( const_str_plain_threed );
    PyObjectLocalVariable var_itag( const_str_plain_itag );
    PyObjectLocalVariable var_resolution( const_str_plain_resolution );
    PyObjectLocalVariable var_dimensions( const_str_plain_dimensions );
    PyObjectLocalVariable var_quality( const_str_plain_quality );
    PyObjectLocalVariable var_title( const_str_plain_title );
    PyObjectLocalVariable var_extension( const_str_plain_extension );
    PyObjectLocalVariable var_bitrate( const_str_plain_bitrate );
    PyObjectLocalVariable var_mediatype( const_str_plain_mediatype );
    PyObjectLocalVariable var_notes( const_str_plain_notes );
    PyObjectLocalVariable var_filename( const_str_plain_filename );
    PyObjectLocalVariable var_url( const_str_plain_url );
    PyObjectLocalVariable var_url_https( const_str_plain_url_https );
    PyObjectLocalVariable var___repr__( const_str_plain___repr__ );
    PyObjectLocalVariable var_get_filesize( const_str_plain_get_filesize );
    PyObjectLocalVariable var_cancel( const_str_plain_cancel );
    PyObjectLocalVariable var_download( const_str_plain_download );

    // Actual function code.
    var___module__.assign0( const_str_plain_pafy );
    var___doc__.assign0( const_unicode_digest_fedfa2d89d636571235015e29c5f2e6d );
    var___init__.assign1( MAKE_FUNCTION_function_1___init___of_class_24_Stream_of_module_pafy(  ) );
    var_generate_filename.assign1( MAKE_FUNCTION_function_2_generate_filename_of_class_24_Stream_of_module_pafy(  ) );
    static PyFrameObject *frame_class_24_Stream_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_class_24_Stream_of_module_pafy ) )
    {
        if ( frame_class_24_Stream_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_24_Stream_of_module_pafy" );
#endif
            Py_DECREF( frame_class_24_Stream_of_module_pafy );
        }

        frame_class_24_Stream_of_module_pafy = MAKE_FRAME( codeobj_4dcc0fac64b9c5f6c165e7d4c9a6ee18, module_pafy );
    }

    FrameGuard frame_guard( frame_class_24_Stream_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_class_24_Stream_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 785 );
        var_rawbitrate.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_3_rawbitrate_of_class_24_Stream_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 790 );
        var_threed.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_4_threed_of_class_24_Stream_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 795 );
        var_itag.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_5_itag_of_class_24_Stream_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 800 );
        var_resolution.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_6_resolution_of_class_24_Stream_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 805 );
        var_dimensions.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_7_dimensions_of_class_24_Stream_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 810 );
        var_quality.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_8_quality_of_class_24_Stream_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 818 );
        var_title.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_9_title_of_class_24_Stream_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 823 );
        var_extension.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_10_extension_of_class_24_Stream_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 831 );
        var_bitrate.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_11_bitrate_of_class_24_Stream_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 836 );
        var_mediatype.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_12_mediatype_of_class_24_Stream_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 844 );
        var_notes.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_13_notes_of_class_24_Stream_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 849 );
        var_filename.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_14_filename_of_class_24_Stream_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 854 );
        var_url.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_15_url_of_class_24_Stream_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 872 );
        var_url_https.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_16_url_https_of_class_24_Stream_of_module_pafy(  ) ).asObject0() ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = var_download.updateLocalsDict( var_cancel.updateLocalsDict( var_get_filesize.updateLocalsDict( var___repr__.updateLocalsDict( var_url_https.updateLocalsDict( var_url.updateLocalsDict( var_filename.updateLocalsDict( var_notes.updateLocalsDict( var_mediatype.updateLocalsDict( var_bitrate.updateLocalsDict( var_extension.updateLocalsDict( var_title.updateLocalsDict( var_quality.updateLocalsDict( var_dimensions.updateLocalsDict( var_resolution.updateLocalsDict( var_itag.updateLocalsDict( var_threed.updateLocalsDict( var_rawbitrate.updateLocalsDict( var_generate_filename.updateLocalsDict( var___init__.updateLocalsDict( var___doc__.updateLocalsDict( var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_24_Stream_of_module_pafy )
        {
           Py_DECREF( frame_class_24_Stream_of_module_pafy );
           frame_class_24_Stream_of_module_pafy = NULL;
        }

        throw;
    }
    var___repr__.assign1( MAKE_FUNCTION_function_17___repr___of_class_24_Stream_of_module_pafy(  ) );
    var_get_filesize.assign1( MAKE_FUNCTION_function_18_get_filesize_of_class_24_Stream_of_module_pafy(  ) );
    var_cancel.assign1( MAKE_FUNCTION_function_19_cancel_of_class_24_Stream_of_module_pafy(  ) );
    var_download.assign1( MAKE_FUNCTION_function_21_download_of_class_24_Stream_of_module_pafy( MAKE_TUPLE5( const_unicode_empty, Py_False, PyObjectTemporary( MAKE_FUNCTION_lambda_20_lambda_of_class_24_Stream_of_module_pafy(  ) ).asObject0(), Py_False, Py_False ) ) );
    return var_download.updateLocalsDict( var_cancel.updateLocalsDict( var_get_filesize.updateLocalsDict( var___repr__.updateLocalsDict( var_url_https.updateLocalsDict( var_url.updateLocalsDict( var_filename.updateLocalsDict( var_notes.updateLocalsDict( var_mediatype.updateLocalsDict( var_bitrate.updateLocalsDict( var_extension.updateLocalsDict( var_title.updateLocalsDict( var_quality.updateLocalsDict( var_dimensions.updateLocalsDict( var_resolution.updateLocalsDict( var_itag.updateLocalsDict( var_threed.updateLocalsDict( var_rawbitrate.updateLocalsDict( var_generate_filename.updateLocalsDict( var___init__.updateLocalsDict( var___doc__.updateLocalsDict( var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );
}


static PyObject *impl_function_1___init___of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_sm, PyObject *_python_par_parent )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel par_sm( const_str_plain_sm, _python_par_sm );
    PyObjectLocalParameterVariableNoDel par_parent( const_str_plain_parent, _python_par_parent );
    PyObjectLocalVariable var_is_dash( const_str_plain_is_dash );
    PyObjectLocalVariable var_x( const_str_plain_x );

    // Actual function code.
    static PyFrameObject *frame_function_1___init___of_class_24_Stream_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_1___init___of_class_24_Stream_of_module_pafy ) )
    {
        if ( frame_function_1___init___of_class_24_Stream_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1___init___of_class_24_Stream_of_module_pafy" );
#endif
            Py_DECREF( frame_function_1___init___of_class_24_Stream_of_module_pafy );
        }

        frame_function_1___init___of_class_24_Stream_of_module_pafy = MAKE_FRAME( codeobj_bdb5b7b1cc1ab1f41256effe1ac5cd9b, module_pafy );
    }

    FrameGuard frame_guard( frame_function_1___init___of_class_24_Stream_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_1___init___of_class_24_Stream_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 712 );
        {
            PyObjectTemporary tmp_identifier( LOOKUP_SUBSCRIPT( par_sm.asObject0(), const_unicode_plain_itag ) );
            SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__itag );
        }
        frame_guard.setLineNumber( 714 );
        var_is_dash.assign0( SEQUENCE_CONTAINS( const_unicode_plain_dash, par_sm.asObject0() ) );
        frame_guard.setLineNumber( 716 );
        {
            PyObjectTempKeeper1 cmp1;
            if ( ( cmp1.assign( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__itag ) ), SEQUENCE_CONTAINS_NOT_BOOL( cmp1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_g ), const_str_plain_itags ) ).asObject0() ) ) )
            {
                frame_guard.setLineNumber( 717 );
                {
                    PyObjectTempKeeper1 call1;
                    DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_logging ), const_str_plain_warning ) ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), const_unicode_digest_61ae0b5c0609e8d753f50159a70015d3, PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__itag ) ).asObject0() ) ) );
                }
                return INCREASE_REFCOUNT( Py_None );
            }
        }
        frame_guard.setLineNumber( 720 );
        {
            PyObjectTempKeeper1 subscr1;
            {
                PyObjectTemporary tmp_identifier( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( ( subscr1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_g ), const_str_plain_itags ) ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_itag ) ).asObject0() ) ) ).asObject0(), const_int_pos_2, 2 ) );
                SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__mediatype );
            }
        }
        frame_guard.setLineNumber( 721 );
        {
            PyObjectTempKeeper0 keeper_0;
            {
                PyObjectTemporary tmp_identifier( ( CHECK_IF_TRUE( keeper_0.assign( SEQUENCE_CONTAINS( const_unicode_plain_stereo3d, par_sm.asObject0() ) ) ) ? RICH_COMPARE_EQ( PyObjectTemporary( LOOKUP_SUBSCRIPT( par_sm.asObject0(), const_unicode_plain_stereo3d ) ).asObject0(), const_unicode_plain_1 ) : INCREASE_REFCOUNT( keeper_0.asObject0() ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__threed );
            }
        }
        frame_guard.setLineNumber( 723 );
        if ( CHECK_IF_TRUE( var_is_dash.asObject0() ) )
        {
            frame_guard.setLineNumber( 725 );
            if ( RICH_COMPARE_BOOL_NE( PyObjectTemporary( LOOKUP_SUBSCRIPT( par_sm.asObject0(), const_unicode_plain_width ) ).asObject0(), const_unicode_plain_None ) )
            {
                frame_guard.setLineNumber( 726 );
                {
                    PyObjectTempKeeper1 make_tuple1;
                    {
                        PyObjectTemporary tmp_identifier( BINARY_OPERATION_REMAINDER( const_unicode_digest_62562e5949cc3891085b0dae862e4fa4, PyObjectTemporary( ( make_tuple1.assign( LOOKUP_SUBSCRIPT( par_sm.asObject0(), const_unicode_plain_width ) ), MAKE_TUPLE2( make_tuple1.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT( par_sm.asObject0(), const_unicode_plain_height ) ).asObject0() ) ) ).asObject0() ) );
                        SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__resolution );
                    }
                }
                frame_guard.setLineNumber( 727 );
                {
                    PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__resolution ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__quality );
                }
                frame_guard.setLineNumber( 728 );
                {
                    PyObjectTempKeeper1 make_tuple1;
                    {
                        PyObjectTemporary tmp_identifier( ( make_tuple1.assign( TO_INT( PyObjectTemporary( LOOKUP_SUBSCRIPT( par_sm.asObject0(), const_unicode_plain_width ) ).asObject0() ) ), MAKE_TUPLE2( make_tuple1.asObject0(), PyObjectTemporary( TO_INT( PyObjectTemporary( LOOKUP_SUBSCRIPT( par_sm.asObject0(), const_unicode_plain_height ) ).asObject0() ) ).asObject0() ) ) );
                        SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__dimensions );
                    }
                }
            }
            else
            {
                frame_guard.setLineNumber( 731 );
                SET_ATTRIBUTE( const_unicode_plain_0x0, par_self.asObject0(), const_str_plain__resolution );
                frame_guard.setLineNumber( 732 );
                SET_ATTRIBUTE( const_tuple_int_0_int_0_tuple, par_self.asObject0(), const_str_plain__dimensions );
                frame_guard.setLineNumber( 733 );
                {
                    PyObjectTemporary tmp_identifier( TO_INT( PyObjectTemporary( LOOKUP_SUBSCRIPT( par_sm.asObject0(), const_unicode_plain_bitrate ) ).asObject0() ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__rawbitrate );
                }
                frame_guard.setLineNumber( 735 );
                {
                    PyObjectTempKeeper1 subscr1;
                    {
                        PyObjectTemporary tmp_identifier( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( ( subscr1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_g ), const_str_plain_itags ) ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_itag ) ).asObject0() ) ) ).asObject0(), const_int_0, 0 ) );
                        SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__bitrate );
                    }
                }
                frame_guard.setLineNumber( 736 );
                {
                    PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__bitrate ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__quality );
                }
            }
            frame_guard.setLineNumber( 738 );
            {
                PyObjectTemporary tmp_identifier( TO_INT( PyObjectTemporary( LOOKUP_SUBSCRIPT( par_sm.asObject0(), const_unicode_plain_size ) ).asObject0() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__fsize );
            }
        }
        else
        {
            frame_guard.setLineNumber( 743 );
            {
                PyObjectTempKeeper1 subscr1;
                {
                    PyObjectTemporary tmp_identifier( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( ( subscr1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_g ), const_str_plain_itags ) ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_itag ) ).asObject0() ) ) ).asObject0(), const_int_0, 0 ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__resolution );
                }
            }
            frame_guard.setLineNumber( 744 );
            SET_ATTRIBUTE( Py_None, par_self.asObject0(), const_str_plain__fsize );
            PyObject *tmp_assign_unpack_1__assign_source = Py_None;
            frame_guard.setLineNumber( 745 );
            {
                PyObject *tmp_identifier = tmp_assign_unpack_1__assign_source;
                SET_ATTRIBUTE( tmp_identifier, par_self.asObject0(), const_str_plain__bitrate );
            }
            {
                PyObject *tmp_identifier = tmp_assign_unpack_1__assign_source;
                SET_ATTRIBUTE( tmp_identifier, par_self.asObject0(), const_str_plain__rawbitrate );
            }
            tmp_assign_unpack_1__assign_source = NULL;
            frame_guard.setLineNumber( 746 );
            {
                PyObjectTemporary tmp_identifier( TO_TUPLE( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_resolution ) ).asObject0(), const_str_plain_split ) ).asObject0(), const_unicode_chr_45 ) ).asObject0(), const_int_0, 0 ) ).asObject0(), const_str_plain_split ) ).asObject0(), const_unicode_plain_x ) ).asObject0() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__dimensions );
            }
            frame_guard.setLineNumber( 747 );
            {
                PyObjectTemporary tmp_identifier( TO_TUPLE( PyObjectTemporary( impl_listcontr_1_of_function_1___init___of_class_24_Stream_of_module_pafy( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__dimensions ) ).asObject0() ), var_x ) ).asObject0() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__dimensions );
            }
            frame_guard.setLineNumber( 749 );
            {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_resolution ) );
                SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__quality );
            }
        }
        frame_guard.setLineNumber( 751 );
        {
            PyObjectTemporary tmp_identifier( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_SUBSCRIPT( par_sm.asObject0(), const_unicode_plain_type ) ).asObject0(), const_str_plain_split ) ).asObject0(), const_unicode_chr_59 ) ).asObject0(), const_int_0, 0 ) );
            SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__vidformat );
        }
        frame_guard.setLineNumber( 752 );
        {
            PyObjectTempKeeper1 subscr1;
            {
                PyObjectTemporary tmp_identifier( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( ( subscr1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_g ), const_str_plain_itags ) ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_itag ) ).asObject0() ) ) ).asObject0(), const_int_pos_1, 1 ) );
                SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__extension );
            }
        }
        frame_guard.setLineNumber( 753 );
        {
            PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( par_parent.asObject0(), const_str_plain_title ) );
            SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__title );
        }
        frame_guard.setLineNumber( 754 );
        {
            PyObject *tmp_identifier = SEQUENCE_CONTAINS( const_unicode_plain_s, par_sm.asObject0() );
            SET_ATTRIBUTE( tmp_identifier, par_self.asObject0(), const_str_plain_encrypted );
        }
        frame_guard.setLineNumber( 755 );
        {
            PyObject *tmp_identifier = par_parent.asObject0();
            SET_ATTRIBUTE( tmp_identifier, par_self.asObject0(), const_str_plain__parent );
        }
        frame_guard.setLineNumber( 756 );
        {
            PyObjectTemporary tmp_identifier( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_generate_filename ) ).asObject0() ) );
            SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__filename );
        }
        frame_guard.setLineNumber( 757 );
        {
            PyObjectTempKeeper1 subscr1;
            {
                PyObjectTemporary tmp_identifier( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( ( subscr1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_g ), const_str_plain_itags ) ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_itag ) ).asObject0() ) ) ).asObject0(), const_int_pos_3, 3 ) );
                SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__notes );
            }
        }
        frame_guard.setLineNumber( 758 );
        SET_ATTRIBUTE( Py_None, par_self.asObject0(), const_str_plain__url );
        frame_guard.setLineNumber( 759 );
        {
            PyObjectTemporary tmp_identifier( LOOKUP_SUBSCRIPT( par_sm.asObject0(), const_unicode_plain_url ) );
            SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__rawurl );
        }
        frame_guard.setLineNumber( 760 );
        {
            PyObjectTemporary tmp_identifier( ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_encrypted ) ).asObject0() ) ? LOOKUP_SUBSCRIPT( par_sm.asObject0(), const_unicode_plain_s ) : CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_sm.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_sig ) ) );
            SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__sig );
        }
        frame_guard.setLineNumber( 761 );
        SET_ATTRIBUTE( Py_False, par_self.asObject0(), const_str_plain__active );
        frame_guard.setLineNumber( 763 );
        if ( ( RICH_COMPARE_BOOL_EQ( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_mediatype ) ).asObject0(), const_unicode_plain_audio ) && (!( CHECK_IF_TRUE( var_is_dash.asObject0() ) )) ) )
        {
            frame_guard.setLineNumber( 764 );
            SET_ATTRIBUTE( const_tuple_int_0_int_0_tuple, par_self.asObject0(), const_str_plain__dimensions );
            frame_guard.setLineNumber( 765 );
            {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_resolution ) );
                SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__bitrate );
            }
            frame_guard.setLineNumber( 766 );
            {
                PyObjectTemporary tmp_identifier( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_bitrate ) );
                SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__quality );
            }
            frame_guard.setLineNumber( 767 );
            SET_ATTRIBUTE( const_unicode_plain_0x0, par_self.asObject0(), const_str_plain__resolution );
            frame_guard.setLineNumber( 768 );
            {
                PyObjectTemporary tmp_identifier( TO_INT( PyObjectTemporary( LOOKUP_SUBSCRIPT( par_sm.asObject0(), const_unicode_plain_bitrate ) ).asObject0() ) );
                SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__rawbitrate );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_parent.updateLocalsDict( par_sm.updateLocalsDict( par_self.updateLocalsDict( var_x.updateLocalsDict( var_is_dash.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1___init___of_class_24_Stream_of_module_pafy )
        {
           Py_DECREF( frame_function_1___init___of_class_24_Stream_of_module_pafy );
           frame_function_1___init___of_class_24_Stream_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_1___init___of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_sm = NULL;
    PyObject *_python_par_parent = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_sm == key )
            {
                assert( _python_par_sm == NULL );
                _python_par_sm = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_parent == key )
            {
                assert( _python_par_parent == NULL );
                _python_par_parent = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_sm, key ) )
            {
                assert( _python_par_sm == NULL );
                _python_par_sm = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_parent, key ) )
            {
                assert( _python_par_parent == NULL );
                _python_par_parent = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 3  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_sm != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_sm = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_sm == NULL )
    {
        if ( 1 + self->m_defaults_given >= 3  )
        {
            _python_par_sm = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_parent != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_parent = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_parent == NULL )
    {
        if ( 2 + self->m_defaults_given >= 3  )
        {
            _python_par_parent = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL || _python_par_sm == NULL || _python_par_parent == NULL ))
    {
        PyObject *values[] = { _python_par_self, _python_par_sm, _python_par_parent };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_1___init___of_class_24_Stream_of_module_pafy( self, _python_par_self, _python_par_sm, _python_par_parent );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_sm );
    Py_XDECREF( _python_par_parent );

    return NULL;
}

static PyObject *dparse_function_1___init___of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3 )
    {
        return impl_function_1___init___of_class_24_Stream_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1___init___of_class_24_Stream_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_1___init___of_class_24_Stream_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par___iterator( const_str_plain___iterator, _python_par___iterator );
    PyObjectTempVariable tmp_iter_value_0;

    // Actual function code.
    PyObjectTemporary tmp_result( PyList_New( 0 ) );
    FrameGuardVeryLight frame_guard;

    frame_guard.setLineNumber( 747 );
    PyObject *tmp_contraction_iter_0 = par___iterator.asObject0();
    while( true )
    {
        frame_guard.setLineNumber( 747 );
        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( tmp_contraction_iter_0 );

        if ( _tmp_unpack_1 == NULL )
        {
            break;
        }
        tmp_iter_value_0.assign1( _tmp_unpack_1 );
        closure_x.assign0( tmp_iter_value_0.asObject0() );
        APPEND_TO_LIST( tmp_result.asObject0(), PyObjectTemporary( ( CHECK_IF_TRUE( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( closure_x.asObject0(), const_str_plain_isdigit ) ).asObject0() ) ).asObject0() ) ? TO_INT( closure_x.asObject0() ) : closure_x.asObject1() ) ).asObject0() ), Py_None;

        CONSIDER_THREADING();
    }
    tmp_contraction_iter_0 = NULL;
    return tmp_result.asObject1();
}


static PyObject *impl_function_2_generate_filename_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_meta )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel par_meta( const_str_plain_meta, _python_par_meta );
    PyObjectSharedLocalVariable var_ok( const_str_plain_ok );
    PyObjectLocalVariable var_filename( const_str_plain_filename );

    // Actual function code.
    static PyFrameObject *frame_function_2_generate_filename_of_class_24_Stream_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_2_generate_filename_of_class_24_Stream_of_module_pafy ) )
    {
        if ( frame_function_2_generate_filename_of_class_24_Stream_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2_generate_filename_of_class_24_Stream_of_module_pafy" );
#endif
            Py_DECREF( frame_function_2_generate_filename_of_class_24_Stream_of_module_pafy );
        }

        frame_function_2_generate_filename_of_class_24_Stream_of_module_pafy = MAKE_FRAME( codeobj_728250926f0273cd2a4ec44b8b915e1d, module_pafy );
    }

    FrameGuard frame_guard( frame_function_2_generate_filename_of_class_24_Stream_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_2_generate_filename_of_class_24_Stream_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 772 );
        var_ok.assign1( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_re ), const_str_plain_compile ) ).asObject0(), const_unicode_digest_7c9343009160d9ecba419824dbf34e42 ) );
        frame_guard.setLineNumber( 774 );
        if ( RICH_COMPARE_BOOL_EQ( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_os ), const_str_plain_name ) ).asObject0(), const_unicode_plain_nt ) )
        {
            frame_guard.setLineNumber( 775 );
            var_ok.assign1( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_re ), const_str_plain_compile ) ).asObject0(), const_unicode_digest_20994cbfd23f11770242a7c9407b226c ) );
        }
        frame_guard.setLineNumber( 777 );
        {
            PyObjectTempKeeper1 call1;
            var_filename.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( const_unicode_empty, const_str_plain_join ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( impl_genexpr_1_of_function_2_generate_filename_of_class_24_Stream_of_module_pafy( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__title ) ).asObject0() ), var_ok ) ).asObject0() ) ) );
        }
        frame_guard.setLineNumber( 779 );
        if ( CHECK_IF_TRUE( par_meta.asObject0() ) )
        {
            frame_guard.setLineNumber( 780 );
            PyObject *tmp_inplace_assign_1__inplace_start = var_filename.asObject0();
            PyObject *_tmp_inplace_assign_1__inplace_end;
            {
                PyObjectTempKeeper1 make_tuple1;
                PyObjectTempKeeper0 op1;
                _tmp_inplace_assign_1__inplace_end = ( op1.assign( tmp_inplace_assign_1__inplace_start ), BINARY_OPERATION( PyNumber_InPlaceAdd, op1.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( const_unicode_digest_e6c121cf962b18377c3bcebbed82016a, PyObjectTemporary( ( make_tuple1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__parent ) ).asObject0(), const_str_plain_videoid ) ), MAKE_TUPLE2( make_tuple1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__itag ) ).asObject0() ) ) ).asObject0() ) ).asObject0() ) );
            }
            PyObjectTemporary tmp_inplace_assign_1__inplace_end( _tmp_inplace_assign_1__inplace_end );
            if ( ( tmp_inplace_assign_1__inplace_start != tmp_inplace_assign_1__inplace_end.asObject0() ) )
            {
                var_filename.assign0( tmp_inplace_assign_1__inplace_end.asObject0() );
            }
        }
        frame_guard.setLineNumber( 782 );
        PyObject *tmp_inplace_assign_2__inplace_start = var_filename.asObject0();
        PyObject *_tmp_inplace_assign_2__inplace_end;
        {
            PyObjectTempKeeper0 op1;
            _tmp_inplace_assign_2__inplace_end = ( op1.assign( tmp_inplace_assign_2__inplace_start ), BINARY_OPERATION( PyNumber_InPlaceAdd, op1.asObject0(), PyObjectTemporary( BINARY_OPERATION_ADD( const_unicode_dot, PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__extension ) ).asObject0() ) ).asObject0() ) );
        }
        PyObjectTemporary tmp_inplace_assign_2__inplace_end( _tmp_inplace_assign_2__inplace_end );
        if ( ( tmp_inplace_assign_2__inplace_start != tmp_inplace_assign_2__inplace_end.asObject0() ) )
        {
            var_filename.assign0( tmp_inplace_assign_2__inplace_end.asObject0() );
        }
        frame_guard.setLineNumber( 783 );
        return var_filename.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_meta.updateLocalsDict( par_self.updateLocalsDict( var_filename.updateLocalsDict( var_ok.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2_generate_filename_of_class_24_Stream_of_module_pafy )
        {
           Py_DECREF( frame_function_2_generate_filename_of_class_24_Stream_of_module_pafy );
           frame_function_2_generate_filename_of_class_24_Stream_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_2_generate_filename_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_meta = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "generate_filename() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_meta == key )
            {
                assert( _python_par_meta == NULL );
                _python_par_meta = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_meta, key ) )
            {
                assert( _python_par_meta == NULL );
                _python_par_meta = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "generate_filename() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_meta != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_meta = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_meta == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_meta = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL || _python_par_meta == NULL ))
    {
        PyObject *values[] = { _python_par_self, _python_par_meta };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_2_generate_filename_of_class_24_Stream_of_module_pafy( self, _python_par_self, _python_par_meta );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_meta );

    return NULL;
}

static PyObject *dparse_function_2_generate_filename_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_2_generate_filename_of_class_24_Stream_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2_generate_filename_of_class_24_Stream_of_module_pafy( self, args, size, NULL );
        return result;
    }

}




struct _context_generator_genexpr_1_of_function_2_generate_filename_of_class_24_Stream_of_module_pafy_t
{
    // The generator function instance can access its parameters from creation time.
    PyObjectClosureVariable closure_ok;
    PyObjectLocalParameterVariableNoDel par___iterator;
    PyObjectLocalVariable var_x;
    PyObjectTempVariable tmp_iter_value_0;
};

static void _context_generator_genexpr_1_of_function_2_generate_filename_of_class_24_Stream_of_module_pafy_destructor( void *context_voidptr )
{
    _context_generator_genexpr_1_of_function_2_generate_filename_of_class_24_Stream_of_module_pafy_t *_python_context = (struct _context_generator_genexpr_1_of_function_2_generate_filename_of_class_24_Stream_of_module_pafy_t *)context_voidptr;

    delete _python_context;
}

static void genexpr_1_of_function_2_generate_filename_of_class_24_Stream_of_module_pafy_context( Nuitka_GeneratorObject *generator )
{
    try
    {
        // Make context accessible if one is used.

        NUITKA_MAY_BE_UNUSED struct _context_generator_genexpr_1_of_function_2_generate_filename_of_class_24_Stream_of_module_pafy_t *_python_context = (_context_generator_genexpr_1_of_function_2_generate_filename_of_class_24_Stream_of_module_pafy_t *)generator->m_context;


        // Local variable inits
        _python_context->var_x.setVariableName( const_str_plain_x );

        // Actual function code.
        static PyFrameObject *frame_genexpr_1_of_function_2_generate_filename_of_class_24_Stream_of_module_pafy = NULL;

        // Must be inside block, or else its d-tor will not be run.
        if ( isFrameUnusable( frame_genexpr_1_of_function_2_generate_filename_of_class_24_Stream_of_module_pafy ) )
        {
            if ( frame_genexpr_1_of_function_2_generate_filename_of_class_24_Stream_of_module_pafy )
            {
#if _DEBUG_REFRAME
                puts( "reframe for genexpr_1_of_function_2_generate_filename_of_class_24_Stream_of_module_pafy" );
#endif
                Py_DECREF( frame_genexpr_1_of_function_2_generate_filename_of_class_24_Stream_of_module_pafy );
            }

            frame_genexpr_1_of_function_2_generate_filename_of_class_24_Stream_of_module_pafy = MAKE_FRAME( codeobj_81257e9c21702a6bac6e2d7168bd972b, module_pafy );
        }

        Py_INCREF( frame_genexpr_1_of_function_2_generate_filename_of_class_24_Stream_of_module_pafy );
        generator->m_frame = frame_genexpr_1_of_function_2_generate_filename_of_class_24_Stream_of_module_pafy;

        Py_CLEAR( generator->m_frame->f_back );

        generator->m_frame->f_back = PyThreadState_GET()->frame;
        Py_INCREF( generator->m_frame->f_back );

        PyThreadState_GET()->frame = generator->m_frame;

        FrameGuardLight frame_guard( &generator->m_frame );

        // TODO: The inject of the exception through C++ is very non-optimal, this flag
        // now indicates only if the exception occurs initially as supposed, or during
        // life, this could and should be shortcut.
        bool traceback;

        try
        {
            // TODO: In case we don't raise exceptions ourselves, we would still have to do this, so
            // beware to not optimize this away for generators without a replacement.
            traceback = true;
            CHECK_EXCEPTION( generator );
            traceback = false;

            frame_guard.setLineNumber( 777 );
            PyObject *tmp_contraction_iter_0 = _python_context->par___iterator.asObject0();
            while( true )
            {
                frame_guard.setLineNumber( 777 );
                PyObject *_tmp_unpack_1 = ITERATOR_NEXT( tmp_contraction_iter_0 );

                if ( _tmp_unpack_1 == NULL )
                {
                    break;
                }
                _python_context->tmp_iter_value_0.assign1( _tmp_unpack_1 );
                _python_context->var_x.assign0( _python_context->tmp_iter_value_0.asObject0() );
                {
                    PyObjectTempKeeper1 call1;
                    YIELD( generator, INCREASE_REFCOUNT( ( CHECK_IF_TRUE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( _python_context->closure_ok.asObject0(), const_str_plain_match ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), _python_context->var_x.asObject0() ) ) ).asObject0() ) ? _python_context->var_x.asObject0() : const_unicode_plain__ ) ) );
                }

                CONSIDER_THREADING();
            }
            tmp_contraction_iter_0 = NULL;

            PyErr_SetObject( PyExc_StopIteration, (PyObject *)NULL );
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( INCREASE_REFCOUNT( generator->m_frame ) ) );
            }
            else if ( traceback == false )
            {
                _exception.addTraceback( generator->m_frame );
            }
            _exception.toPython();

            // TODO: Moving this code is not allowed yet.
            generator->m_yielded = NULL;
        }
    }
    catch( ReturnValueException &e )
    {
        PyErr_SetObject( PyExc_StopIteration, e.getValue0() );
    }

    assert( ERROR_OCCURED() );

    // TODO: Won't return, we should tell the compiler about that.
    generator->m_yielded = NULL;
    swapFiber( &generator->m_yielder_context, &generator->m_caller_context );
}

static PyObject *impl_genexpr_1_of_function_2_generate_filename_of_class_24_Stream_of_module_pafy( PyObject *_python_par___iterator, PyObjectSharedLocalVariable &closure_ok )
{
    // Create context if any
    struct _context_generator_genexpr_1_of_function_2_generate_filename_of_class_24_Stream_of_module_pafy_t *_python_context = new _context_generator_genexpr_1_of_function_2_generate_filename_of_class_24_Stream_of_module_pafy_t;
    _python_context->closure_ok.shareWith( closure_ok );

    try
    {
        PyObject *result = Nuitka_Generator_New(
            genexpr_1_of_function_2_generate_filename_of_class_24_Stream_of_module_pafy_context,
            const_str_angle_genexpr,
            codeobj_d934b110dcfe921eef2e053c9a90478e,
            _python_context,
            _context_generator_genexpr_1_of_function_2_generate_filename_of_class_24_Stream_of_module_pafy_destructor
        );

        if (unlikely( result == NULL ))
        {
            PyErr_Format( PyExc_RuntimeError, "cannot create function <genexpr>" );
            return NULL;
        }

        // Copy to context parameter values and closured variables if any.
        _python_context->par___iterator.setVariableNameAndValue( const_str_plain___iterator, _python_par___iterator );

        return result;
    }
    catch ( PythonException &_exception )
    {
        _exception.toPython();

        return NULL;
    }
}


static PyObject *impl_function_3_rawbitrate_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_3_rawbitrate_of_class_24_Stream_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_3_rawbitrate_of_class_24_Stream_of_module_pafy ) )
    {
        if ( frame_function_3_rawbitrate_of_class_24_Stream_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_rawbitrate_of_class_24_Stream_of_module_pafy" );
#endif
            Py_DECREF( frame_function_3_rawbitrate_of_class_24_Stream_of_module_pafy );
        }

        frame_function_3_rawbitrate_of_class_24_Stream_of_module_pafy = MAKE_FRAME( codeobj_71373a75234a156829dafd821bcd09e9, module_pafy );
    }

    FrameGuard frame_guard( frame_function_3_rawbitrate_of_class_24_Stream_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_3_rawbitrate_of_class_24_Stream_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 788 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__rawbitrate );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_3_rawbitrate_of_class_24_Stream_of_module_pafy )
        {
           Py_DECREF( frame_function_3_rawbitrate_of_class_24_Stream_of_module_pafy );
           frame_function_3_rawbitrate_of_class_24_Stream_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_3_rawbitrate_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "rawbitrate() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "rawbitrate() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_3_rawbitrate_of_class_24_Stream_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_3_rawbitrate_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_3_rawbitrate_of_class_24_Stream_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_rawbitrate_of_class_24_Stream_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4_threed_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_4_threed_of_class_24_Stream_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_4_threed_of_class_24_Stream_of_module_pafy ) )
    {
        if ( frame_function_4_threed_of_class_24_Stream_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4_threed_of_class_24_Stream_of_module_pafy" );
#endif
            Py_DECREF( frame_function_4_threed_of_class_24_Stream_of_module_pafy );
        }

        frame_function_4_threed_of_class_24_Stream_of_module_pafy = MAKE_FRAME( codeobj_12567be348a546d75640659584e42f26, module_pafy );
    }

    FrameGuard frame_guard( frame_function_4_threed_of_class_24_Stream_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_4_threed_of_class_24_Stream_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 793 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__threed );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_4_threed_of_class_24_Stream_of_module_pafy )
        {
           Py_DECREF( frame_function_4_threed_of_class_24_Stream_of_module_pafy );
           frame_function_4_threed_of_class_24_Stream_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_4_threed_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "threed() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "threed() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_4_threed_of_class_24_Stream_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_4_threed_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_4_threed_of_class_24_Stream_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4_threed_of_class_24_Stream_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_5_itag_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_5_itag_of_class_24_Stream_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_5_itag_of_class_24_Stream_of_module_pafy ) )
    {
        if ( frame_function_5_itag_of_class_24_Stream_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5_itag_of_class_24_Stream_of_module_pafy" );
#endif
            Py_DECREF( frame_function_5_itag_of_class_24_Stream_of_module_pafy );
        }

        frame_function_5_itag_of_class_24_Stream_of_module_pafy = MAKE_FRAME( codeobj_a3e482e92fa2da59c98fa6d238ce895d, module_pafy );
    }

    FrameGuard frame_guard( frame_function_5_itag_of_class_24_Stream_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_5_itag_of_class_24_Stream_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 798 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__itag );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_5_itag_of_class_24_Stream_of_module_pafy )
        {
           Py_DECREF( frame_function_5_itag_of_class_24_Stream_of_module_pafy );
           frame_function_5_itag_of_class_24_Stream_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_5_itag_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "itag() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "itag() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_5_itag_of_class_24_Stream_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_5_itag_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_5_itag_of_class_24_Stream_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5_itag_of_class_24_Stream_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6_resolution_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_6_resolution_of_class_24_Stream_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_6_resolution_of_class_24_Stream_of_module_pafy ) )
    {
        if ( frame_function_6_resolution_of_class_24_Stream_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6_resolution_of_class_24_Stream_of_module_pafy" );
#endif
            Py_DECREF( frame_function_6_resolution_of_class_24_Stream_of_module_pafy );
        }

        frame_function_6_resolution_of_class_24_Stream_of_module_pafy = MAKE_FRAME( codeobj_26e04fd0fee63dd0613ff2269d44d109, module_pafy );
    }

    FrameGuard frame_guard( frame_function_6_resolution_of_class_24_Stream_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_6_resolution_of_class_24_Stream_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 803 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__resolution );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_6_resolution_of_class_24_Stream_of_module_pafy )
        {
           Py_DECREF( frame_function_6_resolution_of_class_24_Stream_of_module_pafy );
           frame_function_6_resolution_of_class_24_Stream_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_6_resolution_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "resolution() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "resolution() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_6_resolution_of_class_24_Stream_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_6_resolution_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_6_resolution_of_class_24_Stream_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6_resolution_of_class_24_Stream_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_7_dimensions_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_7_dimensions_of_class_24_Stream_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_7_dimensions_of_class_24_Stream_of_module_pafy ) )
    {
        if ( frame_function_7_dimensions_of_class_24_Stream_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_7_dimensions_of_class_24_Stream_of_module_pafy" );
#endif
            Py_DECREF( frame_function_7_dimensions_of_class_24_Stream_of_module_pafy );
        }

        frame_function_7_dimensions_of_class_24_Stream_of_module_pafy = MAKE_FRAME( codeobj_cf42f506a1e31699a5765b00deec4c8a, module_pafy );
    }

    FrameGuard frame_guard( frame_function_7_dimensions_of_class_24_Stream_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_7_dimensions_of_class_24_Stream_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 808 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__dimensions );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_7_dimensions_of_class_24_Stream_of_module_pafy )
        {
           Py_DECREF( frame_function_7_dimensions_of_class_24_Stream_of_module_pafy );
           frame_function_7_dimensions_of_class_24_Stream_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_7_dimensions_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "dimensions() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "dimensions() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_7_dimensions_of_class_24_Stream_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_7_dimensions_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_7_dimensions_of_class_24_Stream_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_7_dimensions_of_class_24_Stream_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_8_quality_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_8_quality_of_class_24_Stream_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_8_quality_of_class_24_Stream_of_module_pafy ) )
    {
        if ( frame_function_8_quality_of_class_24_Stream_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_8_quality_of_class_24_Stream_of_module_pafy" );
#endif
            Py_DECREF( frame_function_8_quality_of_class_24_Stream_of_module_pafy );
        }

        frame_function_8_quality_of_class_24_Stream_of_module_pafy = MAKE_FRAME( codeobj_aba313d0f004f6d625cf650e5b15f408, module_pafy );
    }

    FrameGuard frame_guard( frame_function_8_quality_of_class_24_Stream_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_8_quality_of_class_24_Stream_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 816 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__quality );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_8_quality_of_class_24_Stream_of_module_pafy )
        {
           Py_DECREF( frame_function_8_quality_of_class_24_Stream_of_module_pafy );
           frame_function_8_quality_of_class_24_Stream_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_8_quality_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "quality() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "quality() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_8_quality_of_class_24_Stream_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_8_quality_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_8_quality_of_class_24_Stream_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_8_quality_of_class_24_Stream_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_9_title_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_9_title_of_class_24_Stream_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_9_title_of_class_24_Stream_of_module_pafy ) )
    {
        if ( frame_function_9_title_of_class_24_Stream_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_9_title_of_class_24_Stream_of_module_pafy" );
#endif
            Py_DECREF( frame_function_9_title_of_class_24_Stream_of_module_pafy );
        }

        frame_function_9_title_of_class_24_Stream_of_module_pafy = MAKE_FRAME( codeobj_d3da0c9306d18bcb2a0fc29d4b4a43b5, module_pafy );
    }

    FrameGuard frame_guard( frame_function_9_title_of_class_24_Stream_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_9_title_of_class_24_Stream_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 821 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__title );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_9_title_of_class_24_Stream_of_module_pafy )
        {
           Py_DECREF( frame_function_9_title_of_class_24_Stream_of_module_pafy );
           frame_function_9_title_of_class_24_Stream_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_9_title_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "title() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "title() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_9_title_of_class_24_Stream_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_9_title_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_9_title_of_class_24_Stream_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_9_title_of_class_24_Stream_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_10_extension_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_10_extension_of_class_24_Stream_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_10_extension_of_class_24_Stream_of_module_pafy ) )
    {
        if ( frame_function_10_extension_of_class_24_Stream_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_10_extension_of_class_24_Stream_of_module_pafy" );
#endif
            Py_DECREF( frame_function_10_extension_of_class_24_Stream_of_module_pafy );
        }

        frame_function_10_extension_of_class_24_Stream_of_module_pafy = MAKE_FRAME( codeobj_b94f06396a2fe15609cdec8a71ef01e2, module_pafy );
    }

    FrameGuard frame_guard( frame_function_10_extension_of_class_24_Stream_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_10_extension_of_class_24_Stream_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 829 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__extension );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_10_extension_of_class_24_Stream_of_module_pafy )
        {
           Py_DECREF( frame_function_10_extension_of_class_24_Stream_of_module_pafy );
           frame_function_10_extension_of_class_24_Stream_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_10_extension_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "extension() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "extension() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_10_extension_of_class_24_Stream_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_10_extension_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_10_extension_of_class_24_Stream_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_10_extension_of_class_24_Stream_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_11_bitrate_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_11_bitrate_of_class_24_Stream_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_11_bitrate_of_class_24_Stream_of_module_pafy ) )
    {
        if ( frame_function_11_bitrate_of_class_24_Stream_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_11_bitrate_of_class_24_Stream_of_module_pafy" );
#endif
            Py_DECREF( frame_function_11_bitrate_of_class_24_Stream_of_module_pafy );
        }

        frame_function_11_bitrate_of_class_24_Stream_of_module_pafy = MAKE_FRAME( codeobj_8319a56aa58edc34e2c3125d2061dbaf, module_pafy );
    }

    FrameGuard frame_guard( frame_function_11_bitrate_of_class_24_Stream_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_11_bitrate_of_class_24_Stream_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 834 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__bitrate );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_11_bitrate_of_class_24_Stream_of_module_pafy )
        {
           Py_DECREF( frame_function_11_bitrate_of_class_24_Stream_of_module_pafy );
           frame_function_11_bitrate_of_class_24_Stream_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_11_bitrate_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "bitrate() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "bitrate() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_11_bitrate_of_class_24_Stream_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_11_bitrate_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_11_bitrate_of_class_24_Stream_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_11_bitrate_of_class_24_Stream_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_12_mediatype_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_12_mediatype_of_class_24_Stream_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_12_mediatype_of_class_24_Stream_of_module_pafy ) )
    {
        if ( frame_function_12_mediatype_of_class_24_Stream_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_12_mediatype_of_class_24_Stream_of_module_pafy" );
#endif
            Py_DECREF( frame_function_12_mediatype_of_class_24_Stream_of_module_pafy );
        }

        frame_function_12_mediatype_of_class_24_Stream_of_module_pafy = MAKE_FRAME( codeobj_946e467edaa063c6819f564f8cb5f251, module_pafy );
    }

    FrameGuard frame_guard( frame_function_12_mediatype_of_class_24_Stream_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_12_mediatype_of_class_24_Stream_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 842 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__mediatype );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_12_mediatype_of_class_24_Stream_of_module_pafy )
        {
           Py_DECREF( frame_function_12_mediatype_of_class_24_Stream_of_module_pafy );
           frame_function_12_mediatype_of_class_24_Stream_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_12_mediatype_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "mediatype() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "mediatype() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_12_mediatype_of_class_24_Stream_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_12_mediatype_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_12_mediatype_of_class_24_Stream_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_12_mediatype_of_class_24_Stream_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_13_notes_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_13_notes_of_class_24_Stream_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_13_notes_of_class_24_Stream_of_module_pafy ) )
    {
        if ( frame_function_13_notes_of_class_24_Stream_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_13_notes_of_class_24_Stream_of_module_pafy" );
#endif
            Py_DECREF( frame_function_13_notes_of_class_24_Stream_of_module_pafy );
        }

        frame_function_13_notes_of_class_24_Stream_of_module_pafy = MAKE_FRAME( codeobj_66762f411de90c967944019fb833e447, module_pafy );
    }

    FrameGuard frame_guard( frame_function_13_notes_of_class_24_Stream_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_13_notes_of_class_24_Stream_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 847 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__notes );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_13_notes_of_class_24_Stream_of_module_pafy )
        {
           Py_DECREF( frame_function_13_notes_of_class_24_Stream_of_module_pafy );
           frame_function_13_notes_of_class_24_Stream_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_13_notes_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "notes() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "notes() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_13_notes_of_class_24_Stream_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_13_notes_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_13_notes_of_class_24_Stream_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_13_notes_of_class_24_Stream_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_14_filename_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_14_filename_of_class_24_Stream_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_14_filename_of_class_24_Stream_of_module_pafy ) )
    {
        if ( frame_function_14_filename_of_class_24_Stream_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_14_filename_of_class_24_Stream_of_module_pafy" );
#endif
            Py_DECREF( frame_function_14_filename_of_class_24_Stream_of_module_pafy );
        }

        frame_function_14_filename_of_class_24_Stream_of_module_pafy = MAKE_FRAME( codeobj_f4b6c1e1f5476bb8649ee2269c81b4bd, module_pafy );
    }

    FrameGuard frame_guard( frame_function_14_filename_of_class_24_Stream_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_14_filename_of_class_24_Stream_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 852 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__filename );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_14_filename_of_class_24_Stream_of_module_pafy )
        {
           Py_DECREF( frame_function_14_filename_of_class_24_Stream_of_module_pafy );
           frame_function_14_filename_of_class_24_Stream_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_14_filename_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "filename() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "filename() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_14_filename_of_class_24_Stream_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_14_filename_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_14_filename_of_class_24_Stream_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_14_filename_of_class_24_Stream_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_15_url_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );
    PyObjectLocalVariable var_s( const_str_plain_s );

    // Actual function code.
    static PyFrameObject *frame_function_15_url_of_class_24_Stream_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_15_url_of_class_24_Stream_of_module_pafy ) )
    {
        if ( frame_function_15_url_of_class_24_Stream_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_15_url_of_class_24_Stream_of_module_pafy" );
#endif
            Py_DECREF( frame_function_15_url_of_class_24_Stream_of_module_pafy );
        }

        frame_function_15_url_of_class_24_Stream_of_module_pafy = MAKE_FRAME( codeobj_2282c76f9d793002e2f6aa8924d03cb7, module_pafy );
    }

    FrameGuard frame_guard( frame_function_15_url_of_class_24_Stream_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_15_url_of_class_24_Stream_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 857 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__url ) ).asObject0() ) )) )
        {
            frame_guard.setLineNumber( 859 );
            if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__parent ) ).asObject0(), const_str_plain_age ) ).asObject0() ) )
            {
                frame_guard.setLineNumber( 861 );
                if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__sig ) ).asObject0() ) )
                {
                    frame_guard.setLineNumber( 862 );
                    var_s.assign1( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__sig ) );
                    frame_guard.setLineNumber( 863 );
                    {
                        PyObjectTempKeeper1 op1;
                        PyObjectTempKeeper1 op2;
                        PyObjectTempKeeper1 op3;
                        {
                            PyObjectTemporary tmp_identifier( ( op3.assign( ( op2.assign( ( op1.assign( LOOKUP_INDEX_SLICE( var_s.asObject0(), 2, 63 ) ), BINARY_OPERATION_ADD( op1.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( var_s.asObject0(), const_int_pos_82, 82 ) ).asObject0() ) ) ), BINARY_OPERATION_ADD( op2.asObject0(), PyObjectTemporary( LOOKUP_INDEX_SLICE( var_s.asObject0(), 64, 82 ) ).asObject0() ) ) ), BINARY_OPERATION_ADD( op3.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( var_s.asObject0(), const_int_pos_63, 63 ) ).asObject0() ) ) );
                            SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__sig );
                        }
                    }
                }
            }
            else
            {
                frame_guard.setLineNumber( 865 );
                if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_encrypted ) ).asObject0() ) )
                {
                    frame_guard.setLineNumber( 866 );
                    {
                        PyObjectTempKeeper0 call1;
                        PyObjectTempKeeper1 call2;
                        {
                            PyObjectTemporary tmp_identifier( ( call1.assign( GET_MODULE_VALUE0( const_str_plain__decodesig ) ), call2.assign( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__sig ) ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), call2.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__parent ) ).asObject0(), const_str_plain_js_url ) ).asObject0() ) ) );
                            SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__sig );
                        }
                    }
                }
            }
            frame_guard.setLineNumber( 868 );
            {
                PyObjectTempKeeper0 call1;
                PyObjectTempKeeper1 call2;
                {
                    PyObjectTemporary tmp_identifier( ( call1.assign( GET_MODULE_VALUE0( const_str_plain__make_url ) ), call2.assign( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__rawurl ) ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), call2.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__sig ) ).asObject0() ) ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__url );
                }
            }
        }
        frame_guard.setLineNumber( 870 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__url );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( var_s.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_15_url_of_class_24_Stream_of_module_pafy )
        {
           Py_DECREF( frame_function_15_url_of_class_24_Stream_of_module_pafy );
           frame_function_15_url_of_class_24_Stream_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_15_url_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "url() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "url() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_15_url_of_class_24_Stream_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_15_url_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_15_url_of_class_24_Stream_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_15_url_of_class_24_Stream_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_16_url_https_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_16_url_https_of_class_24_Stream_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_16_url_https_of_class_24_Stream_of_module_pafy ) )
    {
        if ( frame_function_16_url_https_of_class_24_Stream_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_16_url_https_of_class_24_Stream_of_module_pafy" );
#endif
            Py_DECREF( frame_function_16_url_https_of_class_24_Stream_of_module_pafy );
        }

        frame_function_16_url_https_of_class_24_Stream_of_module_pafy = MAKE_FRAME( codeobj_77533b4dc641272de3bb963b8897139b, module_pafy );
    }

    FrameGuard frame_guard( frame_function_16_url_https_of_class_24_Stream_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_16_url_https_of_class_24_Stream_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 875 );
        return CALL_FUNCTION_WITH_ARGS2( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_url ) ).asObject0(), const_str_plain_replace ) ).asObject0(), const_unicode_digest_dbd7790bcd23fde7607101ef6a633779, const_unicode_digest_f8eae6750519389e078e1eb1bcb3d708 );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_16_url_https_of_class_24_Stream_of_module_pafy )
        {
           Py_DECREF( frame_function_16_url_https_of_class_24_Stream_of_module_pafy );
           frame_function_16_url_https_of_class_24_Stream_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_16_url_https_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "url_https() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "url_https() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_16_url_https_of_class_24_Stream_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_16_url_https_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_16_url_https_of_class_24_Stream_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_16_url_https_of_class_24_Stream_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_17___repr___of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );
    PyObjectLocalVariable var_out( const_str_plain_out );

    // Actual function code.
    static PyFrameObject *frame_function_17___repr___of_class_24_Stream_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_17___repr___of_class_24_Stream_of_module_pafy ) )
    {
        if ( frame_function_17___repr___of_class_24_Stream_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_17___repr___of_class_24_Stream_of_module_pafy" );
#endif
            Py_DECREF( frame_function_17___repr___of_class_24_Stream_of_module_pafy );
        }

        frame_function_17___repr___of_class_24_Stream_of_module_pafy = MAKE_FRAME( codeobj_1e77f13c968e4a5e094098073bae7c1e, module_pafy );
    }

    FrameGuard frame_guard( frame_function_17___repr___of_class_24_Stream_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_17___repr___of_class_24_Stream_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 879 );
        {
            PyObjectTempKeeper1 make_tuple1;
            PyObjectTempKeeper1 make_tuple2;
            var_out.assign1( BINARY_OPERATION_REMAINDER( const_unicode_digest_069f142f20578d0eaaad4d8fca363059, PyObjectTemporary( ( make_tuple1.assign( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_mediatype ) ), make_tuple2.assign( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_extension ) ), MAKE_TUPLE3( make_tuple1.asObject0(), make_tuple2.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_quality ) ).asObject0() ) ) ).asObject0() ) );
        }
        frame_guard.setLineNumber( 880 );
        return var_out.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( var_out.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_17___repr___of_class_24_Stream_of_module_pafy )
        {
           Py_DECREF( frame_function_17___repr___of_class_24_Stream_of_module_pafy );
           frame_function_17___repr___of_class_24_Stream_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_17___repr___of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__repr__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__repr__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_17___repr___of_class_24_Stream_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_17___repr___of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_17___repr___of_class_24_Stream_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_17___repr___of_class_24_Stream_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_18_get_filesize_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );
    PyObjectLocalVariable var_cl( const_str_plain_cl );

    // Actual function code.
    static PyFrameObject *frame_function_18_get_filesize_of_class_24_Stream_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_18_get_filesize_of_class_24_Stream_of_module_pafy ) )
    {
        if ( frame_function_18_get_filesize_of_class_24_Stream_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_18_get_filesize_of_class_24_Stream_of_module_pafy" );
#endif
            Py_DECREF( frame_function_18_get_filesize_of_class_24_Stream_of_module_pafy );
        }

        frame_function_18_get_filesize_of_class_24_Stream_of_module_pafy = MAKE_FRAME( codeobj_b87470f8e5179166fa9bc0358111a1eb, module_pafy );
    }

    FrameGuardWithExceptionPreservation frame_guard( frame_function_18_get_filesize_of_class_24_Stream_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_18_get_filesize_of_class_24_Stream_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 884 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__fsize ) ).asObject0() ) )) )
        {
            frame_guard.setLineNumber( 886 );
            try
            {
                frame_guard.setLineNumber( 887 );
                DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS1( GET_MODULE_VALUE0( const_str_plain_dbg ), const_unicode_digest_abfc69fd0714acff215e860c6b4fd0b7 ) );
                var_cl.assign0( const_unicode_digest_853e52661e398e5be2d726c80a7172db );
                frame_guard.setLineNumber( 889 );
                {
                    PyObjectTempKeeper1 call1;
                    PyObjectTempKeeper1 subscr1;
                    {
                        PyObjectTemporary tmp_identifier( TO_INT( PyObjectTemporary( ( subscr1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_g ), const_str_plain_opener ) ).asObject0(), const_str_plain_open ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_url ) ).asObject0() ) ) ).asObject0(), const_str_plain_headers ) ), LOOKUP_SUBSCRIPT( subscr1.asObject0(), var_cl.asObject0() ) ) ).asObject0() ) );
                        SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__fsize );
                    }
                }
                frame_guard.setLineNumber( 890 );
                DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS1( GET_MODULE_VALUE0( const_str_plain_dbg ), const_unicode_digest_fd8006d9b7413dddecb9a324f1674bc0 ) );
            }
            catch ( PythonException &_exception )
            {
                if ( !_exception.hasTraceback() )
                {
                    _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                }
                else
                {
                    _exception.addTraceback( frame_guard.getFrame0() );
                }

                frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                _exception.toExceptionHandler();

                if ( _exception.matches( PyExc_AttributeError ) || _exception.matches( GET_MODULE_VALUE0( const_str_plain_HTTPError ) ) || _exception.matches( GET_MODULE_VALUE0( const_str_plain_URLError ) ) )
                {
                    frame_guard.detachFrame();
                    frame_guard.setLineNumber( 893 );
                    SET_ATTRIBUTE( const_int_0, par_self.asObject0(), const_str_plain__fsize );
                }
                else
                {
                    PyTracebackObject *tb = _exception.getTraceback();
                    frame_guard.setLineNumber( tb->tb_lineno );
                    _exception.setTraceback( tb->tb_next );
                    tb->tb_next = NULL;

                    throw;
                }
            }
        }
        frame_guard.setLineNumber( 895 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__fsize );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( var_cl.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_18_get_filesize_of_class_24_Stream_of_module_pafy )
        {
           Py_DECREF( frame_function_18_get_filesize_of_class_24_Stream_of_module_pafy );
           frame_function_18_get_filesize_of_class_24_Stream_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_18_get_filesize_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_filesize() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_filesize() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_18_get_filesize_of_class_24_Stream_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_18_get_filesize_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_18_get_filesize_of_class_24_Stream_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_18_get_filesize_of_class_24_Stream_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_19_cancel_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_19_cancel_of_class_24_Stream_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_19_cancel_of_class_24_Stream_of_module_pafy ) )
    {
        if ( frame_function_19_cancel_of_class_24_Stream_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_19_cancel_of_class_24_Stream_of_module_pafy" );
#endif
            Py_DECREF( frame_function_19_cancel_of_class_24_Stream_of_module_pafy );
        }

        frame_function_19_cancel_of_class_24_Stream_of_module_pafy = MAKE_FRAME( codeobj_30d622b60c4c70850224c91efa9c6602, module_pafy );
    }

    FrameGuard frame_guard( frame_function_19_cancel_of_class_24_Stream_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_19_cancel_of_class_24_Stream_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 899 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__active ) ).asObject0() ) )
        {
            frame_guard.setLineNumber( 900 );
            SET_ATTRIBUTE( Py_False, par_self.asObject0(), const_str_plain__active );
            return INCREASE_REFCOUNT( Py_True );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_19_cancel_of_class_24_Stream_of_module_pafy )
        {
           Py_DECREF( frame_function_19_cancel_of_class_24_Stream_of_module_pafy );
           frame_function_19_cancel_of_class_24_Stream_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_19_cancel_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "cancel() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "cancel() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_19_cancel_of_class_24_Stream_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_19_cancel_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_19_cancel_of_class_24_Stream_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_19_cancel_of_class_24_Stream_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_lambda_20_lambda_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_x( const_str_plain_x, _python_par_x );

    // Actual function code.
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_lambda_20_lambda_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_x = NULL;
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.

            // Slow path, compare against all parameter names.


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "<lambda>() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Copy left over argument values to the star list parameter given.
    if ( args_given > 0 )
    {
        _python_par_x = PyTuple_New( args_size - 0 );

        for( Py_ssize_t i = 0; i < args_size - 0; i++ )
        {
           PyTuple_SET_ITEM( _python_par_x, i, INCREASE_REFCOUNT( args[0+i] ) );
        }
    }
    else
    {
        _python_par_x = INCREASE_REFCOUNT( const_tuple_empty );
    }


    return impl_lambda_20_lambda_of_class_24_Stream_of_module_pafy( self, _python_par_x );

error_exit:;

    Py_XDECREF( _python_par_x );

    return NULL;
}

static PyObject *dparse_lambda_20_lambda_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_lambda_20_lambda_of_class_24_Stream_of_module_pafy( self, MAKE_TUPLE( &args[ 0 ], size > 0 ? size-0 : 0 ) );
    }
    else
    {
        PyObject *result = fparse_lambda_20_lambda_of_class_24_Stream_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_21_download_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_filepath, PyObject *_python_par_quiet, PyObject *_python_par_callback, PyObject *_python_par_meta, PyObject *_python_par_remux_audio )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel par_filepath( const_str_plain_filepath, _python_par_filepath );
    PyObjectLocalParameterVariableNoDel par_quiet( const_str_plain_quiet, _python_par_quiet );
    PyObjectLocalParameterVariableNoDel par_callback( const_str_plain_callback, _python_par_callback );
    PyObjectLocalParameterVariableNoDel par_meta( const_str_plain_meta, _python_par_meta );
    PyObjectLocalParameterVariableNoDel par_remux_audio( const_str_plain_remux_audio, _python_par_remux_audio );
    PyObjectLocalVariable var_savedir( const_str_plain_savedir );
    PyObjectLocalVariable var_filename( const_str_plain_filename );
    PyObjectLocalVariable var_temp_filepath( const_str_plain_temp_filepath );
    PyObjectLocalVariable var_status_string( const_str_plain_status_string );
    PyObjectLocalVariable var_response( const_str_plain_response );
    PyObjectLocalVariable var_total( const_str_plain_total );
    PyObjectLocalVariable var_chunksize( const_str_plain_chunksize );
    PyObjectLocalVariable var_bytesdone( const_str_plain_bytesdone );
    PyObjectLocalVariable var_t0( const_str_plain_t0 );
    PyObjectLocalVariable var_fmode( const_str_plain_fmode );
    PyObjectLocalVariable var_offset( const_str_plain_offset );
    PyObjectLocalVariable var_outfh( const_str_plain_outfh );
    PyObjectLocalVariable var_resuming_opener( const_str_plain_resuming_opener );
    PyObjectLocalVariable var_chunk( const_str_plain_chunk );
    PyObjectLocalVariable var_elapsed( const_str_plain_elapsed );
    PyObjectLocalVariable var_rate( const_str_plain_rate );
    PyObjectLocalVariable var_eta( const_str_plain_eta );
    PyObjectLocalVariable var_progress_stats( const_str_plain_progress_stats );
    PyObjectLocalVariable var_status( const_str_plain_status );
    PyObjectTempVariable tmp_tuple_unpack_1__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_1__element_1;
    PyObjectTempVariable tmp_tuple_unpack_1__element_2;
    PyObjectTempVariable tmp_tuple_unpack_2__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_2__element_1;
    PyObjectTempVariable tmp_tuple_unpack_2__element_2;
    PyObjectTempVariable tmp_tuple_unpack_3__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_3__element_1;
    PyObjectTempVariable tmp_tuple_unpack_3__element_2;
    PyObjectTempVariable tmp_tuple_unpack_3__element_3;
    PyObjectTempVariable tmp_tuple_unpack_4__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_4__element_1;
    PyObjectTempVariable tmp_tuple_unpack_4__element_2;

    // Actual function code.
    PyObject *tmp_assign_unpack_1__assign_source = const_unicode_empty;
    var_savedir.assign0( tmp_assign_unpack_1__assign_source );
    var_filename.assign0( tmp_assign_unpack_1__assign_source );
    static PyFrameObject *frame_function_21_download_of_class_24_Stream_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_21_download_of_class_24_Stream_of_module_pafy ) )
    {
        if ( frame_function_21_download_of_class_24_Stream_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_21_download_of_class_24_Stream_of_module_pafy" );
#endif
            Py_DECREF( frame_function_21_download_of_class_24_Stream_of_module_pafy );
        }

        frame_function_21_download_of_class_24_Stream_of_module_pafy = MAKE_FRAME( codeobj_efce5f28d3fa02c583de3d920b8477c0, module_pafy );
    }

    FrameGuard frame_guard( frame_function_21_download_of_class_24_Stream_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_21_download_of_class_24_Stream_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 913 );
        tmp_assign_unpack_1__assign_source = NULL;
        frame_guard.setLineNumber( 915 );
        {
            PyObjectTempKeeper1 call1;
            if ( ( CHECK_IF_TRUE( par_filepath.asObject0() ) && CHECK_IF_TRUE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_os ), const_str_plain_path ) ).asObject0(), const_str_plain_isdir ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), par_filepath.asObject0() ) ) ).asObject0() ) ) )
            {
                frame_guard.setLineNumber( 916 );
                PythonExceptionKeeper _caught_1;
#if PYTHON_VERSION < 300
                int _at_lineno_1 = 0;
#endif


                try
                {
                    // Tried block:
                    {
                        PyObjectTempKeeper0 make_tuple1;
                        tmp_tuple_unpack_1__source_iter.assign1( MAKE_ITERATOR( PyObjectTemporary( ( make_tuple1.assign( par_filepath.asObject0() ), MAKE_TUPLE2( make_tuple1.asObject0(), PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_generate_filename ) ).asObject0() ) ).asObject0() ) ) ).asObject0() ) );
                    }
                    tmp_tuple_unpack_1__element_1.assign1( UNPACK_NEXT( tmp_tuple_unpack_1__source_iter.asObject0(), 0 ) );
                    tmp_tuple_unpack_1__element_2.assign1( UNPACK_NEXT( tmp_tuple_unpack_1__source_iter.asObject0(), 1 ) );
                    UNPACK_ITERATOR_CHECK( tmp_tuple_unpack_1__source_iter.asObject0(), 2 );
                    var_savedir.assign0( tmp_tuple_unpack_1__element_1.asObject0() );
                    var_filename.assign0( tmp_tuple_unpack_1__element_2.asObject0() );
                }
                catch ( PythonException &_exception )
                {
#if PYTHON_VERSION >= 300
                    if ( !_exception.hasTraceback() )
                    {
                        _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                    }
                    else
                    {
                        _exception.addTraceback( frame_guard.getFrame0() );
                    }
#else
                    _at_lineno_1 = frame_guard.getLineNumber();
#endif

                    _caught_1.save( _exception );

#if PYTHON_VERSION >= 300
                    frame_guard.preserveExistingException();

                    _exception.toExceptionHandler();
#endif
                }

                // Final block:
                tmp_tuple_unpack_1__source_iter.del( true );
                tmp_tuple_unpack_1__element_1.del( true );
                tmp_tuple_unpack_1__element_2.del( true );
#if PYTHON_VERSION < 300
                if ( _at_lineno_1 != 0 )
                {
                   frame_guard.setLineNumber( _at_lineno_1 );
                }
#endif
                _caught_1.rethrow();
                // Final end
            }
            else
            {
                frame_guard.setLineNumber( 918 );
                if ( CHECK_IF_TRUE( par_filepath.asObject0() ) )
                {
                    frame_guard.setLineNumber( 919 );
                    PythonExceptionKeeper _caught_2;
#if PYTHON_VERSION < 300
                    int _at_lineno_2 = 0;
#endif


                    try
                    {
                        // Tried block:
                        {
                            PyObjectTempKeeper1 call1;
                            tmp_tuple_unpack_2__source_iter.assign1( MAKE_ITERATOR( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_os ), const_str_plain_path ) ).asObject0(), const_str_plain_split ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), par_filepath.asObject0() ) ) ).asObject0() ) );
                        }
                        tmp_tuple_unpack_2__element_1.assign1( UNPACK_NEXT( tmp_tuple_unpack_2__source_iter.asObject0(), 0 ) );
                        tmp_tuple_unpack_2__element_2.assign1( UNPACK_NEXT( tmp_tuple_unpack_2__source_iter.asObject0(), 1 ) );
                        UNPACK_ITERATOR_CHECK( tmp_tuple_unpack_2__source_iter.asObject0(), 2 );
                        var_savedir.assign0( tmp_tuple_unpack_2__element_1.asObject0() );
                        var_filename.assign0( tmp_tuple_unpack_2__element_2.asObject0() );
                    }
                    catch ( PythonException &_exception )
                    {
#if PYTHON_VERSION >= 300
                        if ( !_exception.hasTraceback() )
                        {
                            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                        }
                        else
                        {
                            _exception.addTraceback( frame_guard.getFrame0() );
                        }
#else
                        _at_lineno_2 = frame_guard.getLineNumber();
#endif

                        _caught_2.save( _exception );

#if PYTHON_VERSION >= 300
                        frame_guard.preserveExistingException();

                        _exception.toExceptionHandler();
#endif
                    }

                    // Final block:
                    tmp_tuple_unpack_2__source_iter.del( true );
                    tmp_tuple_unpack_2__element_1.del( true );
                    tmp_tuple_unpack_2__element_2.del( true );
#if PYTHON_VERSION < 300
                    if ( _at_lineno_2 != 0 )
                    {
                       frame_guard.setLineNumber( _at_lineno_2 );
                    }
#endif
                    _caught_2.rethrow();
                    // Final end
                }
                else
                {
                    frame_guard.setLineNumber( 922 );
                    {
                        PyObjectTempKeeper1 call1;
                        var_filename.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_generate_filename ) ), CALL_FUNCTION( call1.asObject0(), const_tuple_empty, PyObjectTemporary( MAKE_DICT1( par_meta.asObject0(), const_str_plain_meta ) ).asObject0() ) ) );
                    }
                }
            }
        }
        frame_guard.setLineNumber( 924 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper0 call2;
            par_filepath.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_os ), const_str_plain_path ) ).asObject0(), const_str_plain_join ) ), call2.assign( var_savedir.asObject0() ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), call2.asObject0(), var_filename.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 925 );
        var_temp_filepath.assign1( BINARY_OPERATION_ADD( par_filepath.asObject0(), const_unicode_digest_33ec6964612261cc3b58b3a34ad0f52c ) );
        var_status_string.assign0( const_unicode_digest_f4670eba52d80fa2a0384b64ac5e4948 );
        frame_guard.setLineNumber( 930 );
        if ( CHECK_IF_TRUE( GET_MODULE_VALUE0( const_str_plain_early_py_version ) ) )
        {
            var_status_string.assign0( const_unicode_digest_f65359fc85e27014d7db1fb73c86a24f );
        }
        frame_guard.setLineNumber( 934 );
        {
            PyObjectTempKeeper1 call1;
            var_response.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_g ), const_str_plain_opener ) ).asObject0(), const_str_plain_open ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_url ) ).asObject0() ) ) );
        }
        frame_guard.setLineNumber( 935 );
        var_total.assign1( TO_INT( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_SUBSCRIPT( PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_response.asObject0(), const_str_plain_info ) ).asObject0() ) ).asObject0(), const_unicode_digest_850985cd851d0fe440f03f77762e2590 ) ).asObject0(), const_str_plain_strip ) ).asObject0() ) ).asObject0() ) );
        frame_guard.setLineNumber( 936 );
        PythonExceptionKeeper _caught_3;
#if PYTHON_VERSION < 300
        int _at_lineno_3 = 0;
#endif


        try
        {
            // Tried block:
            tmp_tuple_unpack_3__source_iter.assign1( MAKE_ITERATOR( PyObjectTemporary( MAKE_TUPLE3( const_int_pos_16384, const_int_0, PyObjectTemporary( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_time ), const_str_plain_time ) ).asObject0() ) ).asObject0() ) ).asObject0() ) );
            tmp_tuple_unpack_3__element_1.assign1( UNPACK_NEXT( tmp_tuple_unpack_3__source_iter.asObject0(), 0 ) );
            tmp_tuple_unpack_3__element_2.assign1( UNPACK_NEXT( tmp_tuple_unpack_3__source_iter.asObject0(), 1 ) );
            tmp_tuple_unpack_3__element_3.assign1( UNPACK_NEXT( tmp_tuple_unpack_3__source_iter.asObject0(), 2 ) );
            UNPACK_ITERATOR_CHECK( tmp_tuple_unpack_3__source_iter.asObject0(), 3 );
            var_chunksize.assign0( tmp_tuple_unpack_3__element_1.asObject0() );
            var_bytesdone.assign0( tmp_tuple_unpack_3__element_2.asObject0() );
            var_t0.assign0( tmp_tuple_unpack_3__element_3.asObject0() );
        }
        catch ( PythonException &_exception )
        {
#if PYTHON_VERSION >= 300
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }
#else
            _at_lineno_3 = frame_guard.getLineNumber();
#endif

            _caught_3.save( _exception );

#if PYTHON_VERSION >= 300
            frame_guard.preserveExistingException();

            _exception.toExceptionHandler();
#endif
        }

        // Final block:
        tmp_tuple_unpack_3__source_iter.del( true );
        tmp_tuple_unpack_3__element_1.del( true );
        tmp_tuple_unpack_3__element_2.del( true );
        tmp_tuple_unpack_3__element_3.del( true );
#if PYTHON_VERSION < 300
        if ( _at_lineno_3 != 0 )
        {
           frame_guard.setLineNumber( _at_lineno_3 );
        }
#endif
        _caught_3.rethrow();
        // Final end
        frame_guard.setLineNumber( 938 );
        PythonExceptionKeeper _caught_4;
#if PYTHON_VERSION < 300
        int _at_lineno_4 = 0;
#endif


        try
        {
            // Tried block:
            tmp_tuple_unpack_4__source_iter.assign1( MAKE_ITERATOR( const_tuple_unicode_plain_wb_int_0_tuple ) );
            tmp_tuple_unpack_4__element_1.assign1( UNPACK_NEXT( tmp_tuple_unpack_4__source_iter.asObject0(), 0 ) );
            tmp_tuple_unpack_4__element_2.assign1( UNPACK_NEXT( tmp_tuple_unpack_4__source_iter.asObject0(), 1 ) );
            UNPACK_ITERATOR_CHECK( tmp_tuple_unpack_4__source_iter.asObject0(), 2 );
            var_fmode.assign0( tmp_tuple_unpack_4__element_1.asObject0() );
            var_offset.assign0( tmp_tuple_unpack_4__element_2.asObject0() );
        }
        catch ( PythonException &_exception )
        {
#if PYTHON_VERSION >= 300
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }
#else
            _at_lineno_4 = frame_guard.getLineNumber();
#endif

            _caught_4.save( _exception );

#if PYTHON_VERSION >= 300
            frame_guard.preserveExistingException();

            _exception.toExceptionHandler();
#endif
        }

        // Final block:
        tmp_tuple_unpack_4__source_iter.del( true );
        tmp_tuple_unpack_4__element_1.del( true );
        tmp_tuple_unpack_4__element_2.del( true );
#if PYTHON_VERSION < 300
        if ( _at_lineno_4 != 0 )
        {
           frame_guard.setLineNumber( _at_lineno_4 );
        }
#endif
        _caught_4.rethrow();
        // Final end
        frame_guard.setLineNumber( 940 );
        {
            PyObjectTempKeeper1 call1;
            if ( CHECK_IF_TRUE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_os ), const_str_plain_path ) ).asObject0(), const_str_plain_exists ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), var_temp_filepath.asObject0() ) ) ).asObject0() ) )
            {
                frame_guard.setLineNumber( 941 );
                {
                    PyObjectTempKeeper1 call1;
                    PyObjectTempKeeper1 cmp1;
                    if ( ( cmp1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_os ), const_str_plain_stat ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), var_temp_filepath.asObject0() ) ) ).asObject0(), const_str_plain_st_size ) ), RICH_COMPARE_BOOL_LT( cmp1.asObject0(), var_total.asObject0() ) ) )
                    {
                        frame_guard.setLineNumber( 943 );
                        {
                            PyObjectTempKeeper1 call1;
                            var_offset.assign1( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_os ), const_str_plain_stat ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), var_temp_filepath.asObject0() ) ) ).asObject0(), const_str_plain_st_size ) );
                        }
                        var_fmode.assign0( const_unicode_plain_ab );
                    }
                }
            }
        }
        frame_guard.setLineNumber( 946 );
        {
            PyObjectTempKeeper0 open1;
            var_outfh.assign1( ( open1.assign( var_temp_filepath.asObject0() ), OPEN_FILE( open1.asObject0(), var_fmode.asObject0(), NULL ) ) );
        }
        frame_guard.setLineNumber( 948 );
        if ( CHECK_IF_TRUE( var_offset.asObject0() ) )
        {
            frame_guard.setLineNumber( 950 );
            var_resuming_opener.assign1( CALL_FUNCTION_NO_ARGS( GET_MODULE_VALUE0( const_str_plain_build_opener ) ) );
            frame_guard.setLineNumber( 951 );
            {
                PyObjectTempKeeper1 make_list1;
                {
                    frame_guard.setLineNumber( 951 );
                    PyObjectTemporary tmp_identifier( ( make_list1.assign( MAKE_TUPLE2( const_unicode_digest_fb831f965a1e3f3ee3af2b3c2de8be12, PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_g ), const_str_plain_user_agent ) ).asObject0() ) ), frame_guard.setLineNumber( 952 ), MAKE_LIST2( make_list1.asObject1(), MAKE_TUPLE2( const_unicode_plain_Range, PyObjectTemporary( BINARY_OPERATION_REMAINDER( const_unicode_digest_9e9e328752f83f68b956d4c8a75c4171, var_offset.asObject0() ) ).asObject0() ) ) ) );
                    SET_ATTRIBUTE( tmp_identifier.asObject0(), var_resuming_opener.asObject0(), const_str_plain_addheaders );
                }
            }
            frame_guard.setLineNumber( 953 );
            {
                PyObjectTempKeeper1 call1;
                var_response.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( var_resuming_opener.asObject0(), const_str_plain_open ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_url ) ).asObject0() ) ) );
            }
            frame_guard.setLineNumber( 954 );
            var_bytesdone.assign0( var_offset.asObject0() );
        }
        frame_guard.setLineNumber( 956 );
        SET_ATTRIBUTE( Py_True, par_self.asObject0(), const_str_plain__active );
        while( true )
        {
            frame_guard.setLineNumber( 958 );
            if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__active ) ).asObject0() ) )) )
            {
                break;
            }
            frame_guard.setLineNumber( 959 );
            {
                PyObjectTempKeeper1 call1;
                var_chunk.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( var_response.asObject0(), const_str_plain_read ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), var_chunksize.asObject0() ) ) );
            }
            frame_guard.setLineNumber( 960 );
            {
                PyObjectTempKeeper1 call1;
                DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( var_outfh.asObject0(), const_str_plain_write ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), var_chunk.asObject0() ) ) );
            }
            frame_guard.setLineNumber( 961 );
            {
                PyObjectTempKeeper1 op1;
                var_elapsed.assign1( ( op1.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_time ), const_str_plain_time ) ).asObject0() ) ), BINARY_OPERATION_SUB( op1.asObject0(), var_t0.asObject0() ) ) );
            }
            frame_guard.setLineNumber( 962 );
            PyObject *tmp_inplace_assign_1__inplace_start = var_bytesdone.asObject0();
            PyObject *_tmp_inplace_assign_1__inplace_end;
            {
                PyObjectTempKeeper0 op1;
                _tmp_inplace_assign_1__inplace_end = ( op1.assign( tmp_inplace_assign_1__inplace_start ), BINARY_OPERATION( PyNumber_InPlaceAdd, op1.asObject0(), PyObjectTemporary( BUILTIN_LEN( var_chunk.asObject0() ) ).asObject0() ) );
            }
            PyObjectTemporary tmp_inplace_assign_1__inplace_end( _tmp_inplace_assign_1__inplace_end );
            if ( ( tmp_inplace_assign_1__inplace_start != tmp_inplace_assign_1__inplace_end.asObject0() ) )
            {
                var_bytesdone.assign0( tmp_inplace_assign_1__inplace_end.asObject0() );
            }
            frame_guard.setLineNumber( 963 );
            {
                PyObjectTempKeeper0 op1;
                PyObjectTempKeeper1 op2;
                var_rate.assign1( ( op2.assign( BINARY_OPERATION_DIV( PyObjectTemporary( ( op1.assign( var_bytesdone.asObject0() ), BINARY_OPERATION_SUB( op1.asObject0(), var_offset.asObject0() ) ) ).asObject0(), const_int_pos_1024 ) ), BINARY_OPERATION_DIV( op2.asObject0(), var_elapsed.asObject0() ) ) );
            }
            frame_guard.setLineNumber( 964 );
            {
                PyObjectTempKeeper0 op1;
                PyObjectTempKeeper1 op2;
                var_eta.assign1( ( op2.assign( ( op1.assign( var_total.asObject0() ), BINARY_OPERATION_SUB( op1.asObject0(), var_bytesdone.asObject0() ) ) ), BINARY_OPERATION_DIV( op2.asObject0(), PyObjectTemporary( BINARY_OPERATION_MUL( var_rate.asObject0(), const_int_pos_1024 ) ).asObject0() ) ) );
            }
            frame_guard.setLineNumber( 965 );
            {
                PyObjectTempKeeper0 make_tuple1;
                PyObjectTempKeeper1 make_tuple2;
                PyObjectTempKeeper0 make_tuple3;
                PyObjectTempKeeper1 op1;
                var_progress_stats.assign1( ( make_tuple1.assign( var_bytesdone.asObject0() ), make_tuple2.assign( ( op1.assign( BINARY_OPERATION_MUL( var_bytesdone.asObject0(), const_float_1_0 ) ), BINARY_OPERATION_DIV( op1.asObject0(), var_total.asObject0() ) ) ), make_tuple3.assign( var_rate.asObject0() ), MAKE_TUPLE4( make_tuple1.asObject0(), make_tuple2.asObject0(), make_tuple3.asObject0(), var_eta.asObject0() ) ) );
            }
            frame_guard.setLineNumber( 967 );
            if ( (!( CHECK_IF_TRUE( var_chunk.asObject0() ) )) )
            {
                frame_guard.setLineNumber( 968 );
                DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_outfh.asObject0(), const_str_plain_close ) ).asObject0() ) );
                frame_guard.setLineNumber( 969 );
                break;
            }
            frame_guard.setLineNumber( 971 );
            if ( (!( CHECK_IF_TRUE( par_quiet.asObject0() ) )) )
            {
                frame_guard.setLineNumber( 972 );
                {
                    PyObjectTempKeeper1 call_tmp1;
                    var_status.assign1( ( call_tmp1.assign( LOOKUP_ATTRIBUTE( var_status_string.asObject0(), const_str_plain_format ) ), impl_function_1_complex_call_helper_star_list_of_module___internal__( call_tmp1.asObject1(), var_progress_stats.asObject1() ) ) );
                }
                frame_guard.setLineNumber( 973 );
                {
                    PyObjectTempKeeper1 call1;
                    DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_sys ), const_str_plain_stdout ) ).asObject0(), const_str_plain_write ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( BINARY_OPERATION_ADD( PyObjectTemporary( BINARY_OPERATION_ADD( PyObjectTemporary( BINARY_OPERATION_ADD( const_unicode_chr_13, var_status.asObject0() ) ).asObject0(), const_unicode_digest_0cf31b2c283ce3431794586df7b0996d ) ).asObject0(), const_unicode_chr_13 ) ).asObject0() ) ) );
                }
                frame_guard.setLineNumber( 974 );
                DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_sys ), const_str_plain_stdout ) ).asObject0(), const_str_plain_flush ) ).asObject0() ) );
            }
            frame_guard.setLineNumber( 976 );
            if ( CHECK_IF_TRUE( par_callback.asObject0() ) )
            {
                frame_guard.setLineNumber( 977 );
                {
                    PyObjectTempKeeper0 call_tmp1;
                    PyObjectTempKeeper1 call_tmp2;
                    DECREASE_REFCOUNT( ( call_tmp1.assign( par_callback.asObject0() ), call_tmp2.assign( MAKE_TUPLE1( var_total.asObject0() ) ), impl_function_3_complex_call_helper_pos_star_list_of_module___internal__( call_tmp1.asObject1(), call_tmp2.asObject1(), var_progress_stats.asObject1() ) ) );
                }
            }

            CONSIDER_THREADING();
        }
        frame_guard.setLineNumber( 979 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__active ) ).asObject0() ) )
        {
            frame_guard.setLineNumber( 981 );
            if ( ( CHECK_IF_TRUE( par_remux_audio.asObject0() ) && RICH_COMPARE_BOOL_EQ( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_mediatype ) ).asObject0(), const_unicode_plain_audio ) ) )
            {
                frame_guard.setLineNumber( 982 );
                {
                    PyObjectTempKeeper0 call1;
                    PyObjectTempKeeper1 call2;
                    PyObjectTempKeeper0 make_dict1;
                    PyObjectTempKeeper0 make_tuple1;
                    DECREASE_REFCOUNT( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_remux ) ), call2.assign( ( make_tuple1.assign( var_temp_filepath.asObject0() ), MAKE_TUPLE2( make_tuple1.asObject0(), par_filepath.asObject0() ) ) ), CALL_FUNCTION( call1.asObject0(), call2.asObject0(), PyObjectTemporary( ( make_dict1.assign( par_quiet.asObject0() ), MAKE_DICT2( make_dict1.asObject0(), const_str_plain_quiet, par_remux_audio.asObject0(), const_str_plain_muxer ) ) ).asObject0() ) ) );
                }
            }
            else
            {
                frame_guard.setLineNumber( 985 );
                {
                    PyObjectTempKeeper1 call1;
                    PyObjectTempKeeper0 call2;
                    DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_os ), const_str_plain_rename ) ), call2.assign( var_temp_filepath.asObject0() ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), call2.asObject0(), par_filepath.asObject0() ) ) );
                }
            }
            frame_guard.setLineNumber( 987 );
            return par_filepath.asObject1();
        }
        else
        {
            frame_guard.setLineNumber( 990 );
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_outfh.asObject0(), const_str_plain_close ) ).asObject0() ) );
            frame_guard.setLineNumber( 991 );
            return var_temp_filepath.asObject1();
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_remux_audio.updateLocalsDict( par_meta.updateLocalsDict( par_callback.updateLocalsDict( par_quiet.updateLocalsDict( par_filepath.updateLocalsDict( par_self.updateLocalsDict( var_status.updateLocalsDict( var_progress_stats.updateLocalsDict( var_eta.updateLocalsDict( var_rate.updateLocalsDict( var_elapsed.updateLocalsDict( var_chunk.updateLocalsDict( var_resuming_opener.updateLocalsDict( var_outfh.updateLocalsDict( var_offset.updateLocalsDict( var_fmode.updateLocalsDict( var_t0.updateLocalsDict( var_bytesdone.updateLocalsDict( var_chunksize.updateLocalsDict( var_total.updateLocalsDict( var_response.updateLocalsDict( var_status_string.updateLocalsDict( var_temp_filepath.updateLocalsDict( var_filename.updateLocalsDict( var_savedir.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_21_download_of_class_24_Stream_of_module_pafy )
        {
           Py_DECREF( frame_function_21_download_of_class_24_Stream_of_module_pafy );
           frame_function_21_download_of_class_24_Stream_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }
}
static PyObject *fparse_function_21_download_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_filepath = NULL;
    PyObject *_python_par_quiet = NULL;
    PyObject *_python_par_callback = NULL;
    PyObject *_python_par_meta = NULL;
    PyObject *_python_par_remux_audio = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "download() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_filepath == key )
            {
                assert( _python_par_filepath == NULL );
                _python_par_filepath = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_quiet == key )
            {
                assert( _python_par_quiet == NULL );
                _python_par_quiet = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_callback == key )
            {
                assert( _python_par_callback == NULL );
                _python_par_callback = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_meta == key )
            {
                assert( _python_par_meta == NULL );
                _python_par_meta = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_remux_audio == key )
            {
                assert( _python_par_remux_audio == NULL );
                _python_par_remux_audio = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_filepath, key ) )
            {
                assert( _python_par_filepath == NULL );
                _python_par_filepath = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_quiet, key ) )
            {
                assert( _python_par_quiet == NULL );
                _python_par_quiet = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_callback, key ) )
            {
                assert( _python_par_callback == NULL );
                _python_par_callback = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_meta, key ) )
            {
                assert( _python_par_meta == NULL );
                _python_par_meta = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_remux_audio, key ) )
            {
                assert( _python_par_remux_audio == NULL );
                _python_par_remux_audio = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "download() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 6 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 6  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_filepath != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_filepath = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_filepath == NULL )
    {
        if ( 1 + self->m_defaults_given >= 6  )
        {
            _python_par_filepath = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_quiet != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_quiet = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_quiet == NULL )
    {
        if ( 2 + self->m_defaults_given >= 6  )
        {
            _python_par_quiet = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 3 < args_given ))
    {
         if (unlikely( _python_par_callback != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 3 );
             goto error_exit;
         }

        _python_par_callback = INCREASE_REFCOUNT( args[ 3 ] );
    }
    else if ( _python_par_callback == NULL )
    {
        if ( 3 + self->m_defaults_given >= 6  )
        {
            _python_par_callback = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 3 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 4 < args_given ))
    {
         if (unlikely( _python_par_meta != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 4 );
             goto error_exit;
         }

        _python_par_meta = INCREASE_REFCOUNT( args[ 4 ] );
    }
    else if ( _python_par_meta == NULL )
    {
        if ( 4 + self->m_defaults_given >= 6  )
        {
            _python_par_meta = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 4 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 5 < args_given ))
    {
         if (unlikely( _python_par_remux_audio != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 5 );
             goto error_exit;
         }

        _python_par_remux_audio = INCREASE_REFCOUNT( args[ 5 ] );
    }
    else if ( _python_par_remux_audio == NULL )
    {
        if ( 5 + self->m_defaults_given >= 6  )
        {
            _python_par_remux_audio = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 5 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL || _python_par_filepath == NULL || _python_par_quiet == NULL || _python_par_callback == NULL || _python_par_meta == NULL || _python_par_remux_audio == NULL ))
    {
        PyObject *values[] = { _python_par_self, _python_par_filepath, _python_par_quiet, _python_par_callback, _python_par_meta, _python_par_remux_audio };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_21_download_of_class_24_Stream_of_module_pafy( self, _python_par_self, _python_par_filepath, _python_par_quiet, _python_par_callback, _python_par_meta, _python_par_remux_audio );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_filepath );
    Py_XDECREF( _python_par_quiet );
    Py_XDECREF( _python_par_callback );
    Py_XDECREF( _python_par_meta );
    Py_XDECREF( _python_par_remux_audio );

    return NULL;
}

static PyObject *dparse_function_21_download_of_class_24_Stream_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 6 )
    {
        return impl_function_21_download_of_class_24_Stream_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_21_download_of_class_24_Stream_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_class_25_Pafy_of_module_pafy(  )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalVariable var___module__( const_str_plain___module__ );
    PyObjectLocalVariable var___doc__( const_str_plain___doc__ );
    PyObjectLocalVariable var_funcmap( const_str_plain_funcmap );
    PyObjectLocalVariable var___init__( const_str_plain___init__ );
    PyObjectLocalVariable var_fetch_basic( const_str_plain_fetch_basic );
    PyObjectLocalVariable var__fetch_basic( const_str_plain__fetch_basic );
    PyObjectLocalVariable var__fetch_gdata( const_str_plain__fetch_gdata );
    PyObjectLocalVariable var__process_streams( const_str_plain__process_streams );
    PyObjectLocalVariable var___repr__( const_str_plain___repr__ );
    PyObjectLocalVariable var_streams( const_str_plain_streams );
    PyObjectLocalVariable var_allstreams( const_str_plain_allstreams );
    PyObjectLocalVariable var_audiostreams( const_str_plain_audiostreams );
    PyObjectLocalVariable var_videostreams( const_str_plain_videostreams );
    PyObjectLocalVariable var_oggstreams( const_str_plain_oggstreams );
    PyObjectLocalVariable var_m4astreams( const_str_plain_m4astreams );
    PyObjectLocalVariable var_title( const_str_plain_title );
    PyObjectLocalVariable var_author( const_str_plain_author );
    PyObjectLocalVariable var_rating( const_str_plain_rating );
    PyObjectLocalVariable var_length( const_str_plain_length );
    PyObjectLocalVariable var_viewcount( const_str_plain_viewcount );
    PyObjectLocalVariable var_bigthumb( const_str_plain_bigthumb );
    PyObjectLocalVariable var_bigthumbhd( const_str_plain_bigthumbhd );
    PyObjectLocalVariable var_thumb( const_str_plain_thumb );
    PyObjectLocalVariable var_duration( const_str_plain_duration );
    PyObjectLocalVariable var_keywords( const_str_plain_keywords );
    PyObjectLocalVariable var_category( const_str_plain_category );
    PyObjectLocalVariable var_description( const_str_plain_description );
    PyObjectLocalVariable var_username( const_str_plain_username );
    PyObjectLocalVariable var_published( const_str_plain_published );
    PyObjectLocalVariable var_likes( const_str_plain_likes );
    PyObjectLocalVariable var_dislikes( const_str_plain_dislikes );
    PyObjectLocalVariable var_getbest( const_str_plain_getbest );
    PyObjectLocalVariable var_getbestaudio( const_str_plain_getbestaudio );
    PyObjectLocalVariable var_populate_from_playlist( const_str_plain_populate_from_playlist );

    // Actual function code.
    var___module__.assign0( const_str_plain_pafy );
    var___doc__.assign0( const_unicode_digest_bf4ee71faec4091720e2026c3dca65f9 );
    var_funcmap.assign1( PyDict_New() );
    var___init__.assign1( MAKE_FUNCTION_function_2___init___of_class_25_Pafy_of_module_pafy( MAKE_TUPLE5( Py_True, Py_False, Py_True, Py_False, PyObjectTemporary( MAKE_FUNCTION_lambda_1_lambda_of_class_25_Pafy_of_module_pafy(  ) ).asObject0() ) ) );
    var_fetch_basic.assign1( MAKE_FUNCTION_function_3_fetch_basic_of_class_25_Pafy_of_module_pafy(  ) );
    var__fetch_basic.assign1( MAKE_FUNCTION_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy(  ) );
    var__fetch_gdata.assign1( MAKE_FUNCTION_function_5__fetch_gdata_of_class_25_Pafy_of_module_pafy(  ) );
    var__process_streams.assign1( MAKE_FUNCTION_function_6__process_streams_of_class_25_Pafy_of_module_pafy(  ) );
    var___repr__.assign1( MAKE_FUNCTION_function_7___repr___of_class_25_Pafy_of_module_pafy(  ) );
    static PyFrameObject *frame_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_class_25_Pafy_of_module_pafy );
        }

        frame_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_d7f963b35cdd7d7048c1488e13aea9dc, module_pafy );
    }

    FrameGuard frame_guard( frame_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1204 );
        var_streams.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_8_streams_of_class_25_Pafy_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 1210 );
        var_allstreams.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_9_allstreams_of_class_25_Pafy_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 1216 );
        var_audiostreams.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_10_audiostreams_of_class_25_Pafy_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 1222 );
        var_videostreams.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_11_videostreams_of_class_25_Pafy_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 1228 );
        var_oggstreams.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_12_oggstreams_of_class_25_Pafy_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 1234 );
        var_m4astreams.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_13_m4astreams_of_class_25_Pafy_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 1240 );
        var_title.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_14_title_of_class_25_Pafy_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 1248 );
        var_author.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_15_author_of_class_25_Pafy_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 1256 );
        var_rating.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_16_rating_of_class_25_Pafy_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 1264 );
        var_length.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_17_length_of_class_25_Pafy_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 1272 );
        var_viewcount.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_18_viewcount_of_class_25_Pafy_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 1280 );
        var_bigthumb.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_19_bigthumb_of_class_25_Pafy_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 1286 );
        var_bigthumbhd.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_20_bigthumbhd_of_class_25_Pafy_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 1292 );
        var_thumb.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_21_thumb_of_class_25_Pafy_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 1300 );
        var_duration.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_22_duration_of_class_25_Pafy_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 1311 );
        var_keywords.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_23_keywords_of_class_25_Pafy_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 1317 );
        var_category.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_24_category_of_class_25_Pafy_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 1323 );
        var_description.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_25_description_of_class_25_Pafy_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 1331 );
        var_username.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_26_username_of_class_25_Pafy_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 1337 );
        var_published.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_27_published_of_class_25_Pafy_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 1343 );
        var_likes.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_28_likes_of_class_25_Pafy_of_module_pafy(  ) ).asObject0() ) );
        frame_guard.setLineNumber( 1349 );
        var_dislikes.assign1( CALL_FUNCTION_WITH_ARGS1( LOOKUP_BUILTIN( const_str_plain_property ), PyObjectTemporary( MAKE_FUNCTION_function_29_dislikes_of_class_25_Pafy_of_module_pafy(  ) ).asObject0() ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = var_populate_from_playlist.updateLocalsDict( var_getbestaudio.updateLocalsDict( var_getbest.updateLocalsDict( var_dislikes.updateLocalsDict( var_likes.updateLocalsDict( var_published.updateLocalsDict( var_username.updateLocalsDict( var_description.updateLocalsDict( var_category.updateLocalsDict( var_keywords.updateLocalsDict( var_duration.updateLocalsDict( var_thumb.updateLocalsDict( var_bigthumbhd.updateLocalsDict( var_bigthumb.updateLocalsDict( var_viewcount.updateLocalsDict( var_length.updateLocalsDict( var_rating.updateLocalsDict( var_author.updateLocalsDict( var_title.updateLocalsDict( var_m4astreams.updateLocalsDict( var_oggstreams.updateLocalsDict( var_videostreams.updateLocalsDict( var_audiostreams.updateLocalsDict( var_allstreams.updateLocalsDict( var_streams.updateLocalsDict( var___repr__.updateLocalsDict( var__process_streams.updateLocalsDict( var__fetch_gdata.updateLocalsDict( var__fetch_basic.updateLocalsDict( var_fetch_basic.updateLocalsDict( var___init__.updateLocalsDict( var_funcmap.updateLocalsDict( var___doc__.updateLocalsDict( var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_class_25_Pafy_of_module_pafy );
           frame_class_25_Pafy_of_module_pafy = NULL;
        }

        throw;
    }
    var_getbest.assign1( MAKE_FUNCTION_function_30_getbest_of_class_25_Pafy_of_module_pafy(  ) );
    var_getbestaudio.assign1( MAKE_FUNCTION_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy(  ) );
    var_populate_from_playlist.assign1( MAKE_FUNCTION_function_32_populate_from_playlist_of_class_25_Pafy_of_module_pafy(  ) );
    return var_populate_from_playlist.updateLocalsDict( var_getbestaudio.updateLocalsDict( var_getbest.updateLocalsDict( var_dislikes.updateLocalsDict( var_likes.updateLocalsDict( var_published.updateLocalsDict( var_username.updateLocalsDict( var_description.updateLocalsDict( var_category.updateLocalsDict( var_keywords.updateLocalsDict( var_duration.updateLocalsDict( var_thumb.updateLocalsDict( var_bigthumbhd.updateLocalsDict( var_bigthumb.updateLocalsDict( var_viewcount.updateLocalsDict( var_length.updateLocalsDict( var_rating.updateLocalsDict( var_author.updateLocalsDict( var_title.updateLocalsDict( var_m4astreams.updateLocalsDict( var_oggstreams.updateLocalsDict( var_videostreams.updateLocalsDict( var_audiostreams.updateLocalsDict( var_allstreams.updateLocalsDict( var_streams.updateLocalsDict( var___repr__.updateLocalsDict( var__process_streams.updateLocalsDict( var__fetch_gdata.updateLocalsDict( var__fetch_basic.updateLocalsDict( var_fetch_basic.updateLocalsDict( var___init__.updateLocalsDict( var_funcmap.updateLocalsDict( var___doc__.updateLocalsDict( var___module__.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );
}


static PyObject *impl_lambda_1_lambda_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_x( const_str_plain_x, _python_par_x );

    // Actual function code.
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_lambda_1_lambda_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_x = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_x == key )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_x, key ) )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "<lambda>() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_x != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_x = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_x == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_x = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_x == NULL ))
    {
        PyObject *values[] = { _python_par_x };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_lambda_1_lambda_of_class_25_Pafy_of_module_pafy( self, _python_par_x );

error_exit:;

    Py_XDECREF( _python_par_x );

    return NULL;
}

static PyObject *dparse_lambda_1_lambda_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_lambda_1_lambda_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_lambda_1_lambda_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_2___init___of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_video_url, PyObject *_python_par_basic, PyObject *_python_par_gdata, PyObject *_python_par_signature, PyObject *_python_par_size, PyObject *_python_par_callback )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel par_video_url( const_str_plain_video_url, _python_par_video_url );
    PyObjectLocalParameterVariableNoDel par_basic( const_str_plain_basic, _python_par_basic );
    PyObjectLocalParameterVariableNoDel par_gdata( const_str_plain_gdata, _python_par_gdata );
    PyObjectLocalParameterVariableNoDel par_signature( const_str_plain_signature, _python_par_signature );
    PyObjectLocalParameterVariableNoDel par_size( const_str_plain_size, _python_par_size );
    PyObjectLocalParameterVariableNoDel par_callback( const_str_plain_callback, _python_par_callback );
    PyObjectLocalVariable var_s( const_str_plain_s );
    PyObjectTempVariable tmp_for_loop_1__iter_value;

    // Actual function code.
    static PyFrameObject *frame_function_2___init___of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_2___init___of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_2___init___of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_2___init___of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_2___init___of_class_25_Pafy_of_module_pafy );
        }

        frame_function_2___init___of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_29d4703da1a47a4cb4e52d225660c809, module_pafy );
    }

    FrameGuard frame_guard( frame_function_2___init___of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_2___init___of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1003 );
        {
            PyObject *tmp_identifier = GET_MODULE_VALUE0( const_str_plain___version__ );
            SET_ATTRIBUTE( tmp_identifier, par_self.asObject0(), const_str_plain_version );
        }
        frame_guard.setLineNumber( 1004 );
        {
            PyObjectTempKeeper0 call1;
            {
                PyObjectTemporary tmp_identifier( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_extract_video_id ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), par_video_url.asObject0() ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain_videoid );
            }
        }
        frame_guard.setLineNumber( 1005 );
        {
            PyObjectTempKeeper1 op1;
            {
                PyObjectTemporary tmp_identifier( ( op1.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_g ), const_str_plain_urls ) ).asObject0(), const_unicode_plain_watchv ) ), BINARY_OPERATION_REMAINDER( op1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_videoid ) ).asObject0() ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain_watchv_url );
            }
        }
        frame_guard.setLineNumber( 1007 );
        {
            PyObject *tmp_identifier = par_callback.asObject0();
            SET_ATTRIBUTE( tmp_identifier, GET_MODULE_VALUE0( const_str_plain_new ), const_str_plain_callback );
        }
        frame_guard.setLineNumber( 1008 );
        SET_ATTRIBUTE( Py_False, par_self.asObject0(), const_str_plain__have_basic );
        frame_guard.setLineNumber( 1009 );
        SET_ATTRIBUTE( Py_False, par_self.asObject0(), const_str_plain__have_gdata );
        frame_guard.setLineNumber( 1011 );
        SET_ATTRIBUTE( Py_None, par_self.asObject0(), const_str_plain__description );
        frame_guard.setLineNumber( 1012 );
        SET_ATTRIBUTE( Py_None, par_self.asObject0(), const_str_plain__category );
        frame_guard.setLineNumber( 1013 );
        SET_ATTRIBUTE( Py_None, par_self.asObject0(), const_str_plain__published );
        frame_guard.setLineNumber( 1014 );
        SET_ATTRIBUTE( Py_None, par_self.asObject0(), const_str_plain__username );
        frame_guard.setLineNumber( 1016 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject0(), par_self.asObject0(), const_str_plain_sm );
        frame_guard.setLineNumber( 1017 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject0(), par_self.asObject0(), const_str_plain_asm );
        frame_guard.setLineNumber( 1018 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject0(), par_self.asObject0(), const_str_plain_dash );
        frame_guard.setLineNumber( 1019 );
        SET_ATTRIBUTE( Py_None, par_self.asObject0(), const_str_plain_js_url );
        frame_guard.setLineNumber( 1020 );
        SET_ATTRIBUTE( Py_None, par_self.asObject0(), const_str_plain__dashurl );
        frame_guard.setLineNumber( 1021 );
        SET_ATTRIBUTE( Py_False, par_self.asObject0(), const_str_plain_age );
        frame_guard.setLineNumber( 1022 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject0(), par_self.asObject0(), const_str_plain__streams );
        frame_guard.setLineNumber( 1023 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject0(), par_self.asObject0(), const_str_plain__oggstreams );
        frame_guard.setLineNumber( 1024 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject0(), par_self.asObject0(), const_str_plain__m4astreams );
        frame_guard.setLineNumber( 1025 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject0(), par_self.asObject0(), const_str_plain__allstreams );
        frame_guard.setLineNumber( 1026 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject0(), par_self.asObject0(), const_str_plain__videostreams );
        frame_guard.setLineNumber( 1027 );
        SET_ATTRIBUTE( PyObjectTemporary( PyList_New( 0 ) ).asObject0(), par_self.asObject0(), const_str_plain__audiostreams );
        frame_guard.setLineNumber( 1029 );
        SET_ATTRIBUTE( Py_None, par_self.asObject0(), const_str_plain__title );
        frame_guard.setLineNumber( 1030 );
        SET_ATTRIBUTE( Py_None, par_self.asObject0(), const_str_plain__thumb );
        frame_guard.setLineNumber( 1031 );
        SET_ATTRIBUTE( Py_None, par_self.asObject0(), const_str_plain__rating );
        frame_guard.setLineNumber( 1032 );
        SET_ATTRIBUTE( Py_None, par_self.asObject0(), const_str_plain__length );
        frame_guard.setLineNumber( 1033 );
        SET_ATTRIBUTE( Py_None, par_self.asObject0(), const_str_plain__author );
        frame_guard.setLineNumber( 1034 );
        SET_ATTRIBUTE( Py_None, par_self.asObject0(), const_str_plain__formats );
        frame_guard.setLineNumber( 1035 );
        SET_ATTRIBUTE( Py_None, par_self.asObject0(), const_str_plain__videoid );
        frame_guard.setLineNumber( 1036 );
        SET_ATTRIBUTE( Py_None, par_self.asObject0(), const_str_plain_ciphertag );
        frame_guard.setLineNumber( 1037 );
        SET_ATTRIBUTE( Py_None, par_self.asObject0(), const_str_plain__duration );
        frame_guard.setLineNumber( 1038 );
        SET_ATTRIBUTE( Py_None, par_self.asObject0(), const_str_plain__keywords );
        frame_guard.setLineNumber( 1039 );
        SET_ATTRIBUTE( Py_None, par_self.asObject0(), const_str_plain__bigthumb );
        frame_guard.setLineNumber( 1040 );
        SET_ATTRIBUTE( Py_None, par_self.asObject0(), const_str_plain__viewcount );
        frame_guard.setLineNumber( 1041 );
        SET_ATTRIBUTE( Py_None, par_self.asObject0(), const_str_plain__bigthumbhd );
        frame_guard.setLineNumber( 1042 );
        SET_ATTRIBUTE( Py_None, par_self.asObject0(), const_str_plain_expiry );
        frame_guard.setLineNumber( 1043 );
        SET_ATTRIBUTE( Py_None, par_self.asObject0(), const_str_plain_playlist_meta );
        frame_guard.setLineNumber( 1045 );
        if ( CHECK_IF_TRUE( par_basic.asObject0() ) )
        {
            frame_guard.setLineNumber( 1046 );
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_fetch_basic ) ).asObject0() ) );
        }
        frame_guard.setLineNumber( 1048 );
        if ( CHECK_IF_TRUE( par_gdata.asObject0() ) )
        {
            frame_guard.setLineNumber( 1049 );
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__fetch_gdata ) ).asObject0() ) );
        }
        frame_guard.setLineNumber( 1051 );
        if ( CHECK_IF_TRUE( par_size.asObject0() ) )
        {
            frame_guard.setLineNumber( 1052 );
            PyObjectTemporaryWithDel tmp_for_loop_1__for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_allstreams ) ).asObject0() ) );
            PythonExceptionKeeper _caught_1;
#if PYTHON_VERSION < 300
            int _at_lineno_1 = 0;
#endif


            try
            {
                // Tried block:
                while( true )
                {
                    frame_guard.setLineNumber( 1052 );
                    PyObject *_tmp_unpack_2 = ITERATOR_NEXT( tmp_for_loop_1__for_iterator.asObject0() );

                    if ( _tmp_unpack_2 == NULL )
                    {
                        break;
                    }
                    tmp_for_loop_1__iter_value.assign1( _tmp_unpack_2 );
                    var_s.assign0( tmp_for_loop_1__iter_value.asObject0() );
                    frame_guard.setLineNumber( 1054 );
                    DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_s.asObject0(), const_str_plain_get_filesize ) ).asObject0() ) );

                    CONSIDER_THREADING();
                }
            }
            catch ( PythonException &_exception )
            {
#if PYTHON_VERSION >= 300
                if ( !_exception.hasTraceback() )
                {
                    _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                }
                else
                {
                    _exception.addTraceback( frame_guard.getFrame0() );
                }
#else
                _at_lineno_1 = frame_guard.getLineNumber();
#endif

                _caught_1.save( _exception );

#if PYTHON_VERSION >= 300
                frame_guard.preserveExistingException();

                _exception.toExceptionHandler();
#endif
            }

            // Final block:
            tmp_for_loop_1__iter_value.del( true );
            tmp_for_loop_1__for_iterator.del( false );
#if PYTHON_VERSION < 300
            if ( _at_lineno_1 != 0 )
            {
               frame_guard.setLineNumber( _at_lineno_1 );
            }
#endif
            _caught_1.rethrow();
            // Final end
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_callback.updateLocalsDict( par_size.updateLocalsDict( par_signature.updateLocalsDict( par_gdata.updateLocalsDict( par_basic.updateLocalsDict( par_video_url.updateLocalsDict( par_self.updateLocalsDict( var_s.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_2___init___of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_2___init___of_class_25_Pafy_of_module_pafy );
           frame_function_2___init___of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_2___init___of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_video_url = NULL;
    PyObject *_python_par_basic = NULL;
    PyObject *_python_par_gdata = NULL;
    PyObject *_python_par_signature = NULL;
    PyObject *_python_par_size = NULL;
    PyObject *_python_par_callback = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__init__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_video_url == key )
            {
                assert( _python_par_video_url == NULL );
                _python_par_video_url = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_basic == key )
            {
                assert( _python_par_basic == NULL );
                _python_par_basic = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_gdata == key )
            {
                assert( _python_par_gdata == NULL );
                _python_par_gdata = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_signature == key )
            {
                assert( _python_par_signature == NULL );
                _python_par_signature = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_size == key )
            {
                assert( _python_par_size == NULL );
                _python_par_size = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_callback == key )
            {
                assert( _python_par_callback == NULL );
                _python_par_callback = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_video_url, key ) )
            {
                assert( _python_par_video_url == NULL );
                _python_par_video_url = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_basic, key ) )
            {
                assert( _python_par_basic == NULL );
                _python_par_basic = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_gdata, key ) )
            {
                assert( _python_par_gdata == NULL );
                _python_par_gdata = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_signature, key ) )
            {
                assert( _python_par_signature == NULL );
                _python_par_signature = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_size, key ) )
            {
                assert( _python_par_size == NULL );
                _python_par_size = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_callback, key ) )
            {
                assert( _python_par_callback == NULL );
                _python_par_callback = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__init__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 7 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 7  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 7 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_video_url != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_video_url = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_video_url == NULL )
    {
        if ( 1 + self->m_defaults_given >= 7  )
        {
            _python_par_video_url = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 7 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_basic != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_basic = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_basic == NULL )
    {
        if ( 2 + self->m_defaults_given >= 7  )
        {
            _python_par_basic = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 7 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 3 < args_given ))
    {
         if (unlikely( _python_par_gdata != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 3 );
             goto error_exit;
         }

        _python_par_gdata = INCREASE_REFCOUNT( args[ 3 ] );
    }
    else if ( _python_par_gdata == NULL )
    {
        if ( 3 + self->m_defaults_given >= 7  )
        {
            _python_par_gdata = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 3 - 7 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 4 < args_given ))
    {
         if (unlikely( _python_par_signature != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 4 );
             goto error_exit;
         }

        _python_par_signature = INCREASE_REFCOUNT( args[ 4 ] );
    }
    else if ( _python_par_signature == NULL )
    {
        if ( 4 + self->m_defaults_given >= 7  )
        {
            _python_par_signature = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 4 - 7 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 5 < args_given ))
    {
         if (unlikely( _python_par_size != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 5 );
             goto error_exit;
         }

        _python_par_size = INCREASE_REFCOUNT( args[ 5 ] );
    }
    else if ( _python_par_size == NULL )
    {
        if ( 5 + self->m_defaults_given >= 7  )
        {
            _python_par_size = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 5 - 7 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 6 < args_given ))
    {
         if (unlikely( _python_par_callback != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 6 );
             goto error_exit;
         }

        _python_par_callback = INCREASE_REFCOUNT( args[ 6 ] );
    }
    else if ( _python_par_callback == NULL )
    {
        if ( 6 + self->m_defaults_given >= 7  )
        {
            _python_par_callback = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 6 - 7 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL || _python_par_video_url == NULL || _python_par_basic == NULL || _python_par_gdata == NULL || _python_par_signature == NULL || _python_par_size == NULL || _python_par_callback == NULL ))
    {
        PyObject *values[] = { _python_par_self, _python_par_video_url, _python_par_basic, _python_par_gdata, _python_par_signature, _python_par_size, _python_par_callback };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_2___init___of_class_25_Pafy_of_module_pafy( self, _python_par_self, _python_par_video_url, _python_par_basic, _python_par_gdata, _python_par_signature, _python_par_size, _python_par_callback );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_video_url );
    Py_XDECREF( _python_par_basic );
    Py_XDECREF( _python_par_gdata );
    Py_XDECREF( _python_par_signature );
    Py_XDECREF( _python_par_size );
    Py_XDECREF( _python_par_callback );

    return NULL;
}

static PyObject *dparse_function_2___init___of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 7 )
    {
        return impl_function_2___init___of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ), INCREASE_REFCOUNT( args[ 6 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_2___init___of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_3_fetch_basic_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );
    PyObjectLocalVariable var_stuff( const_str_plain_stuff );
    PyObjectLocalVariable var_smaps( const_str_plain_smaps );
    PyObjectLocalVariable var_js_url( const_str_plain_js_url );
    PyObjectLocalVariable var_funcs( const_str_plain_funcs );
    PyObjectLocalVariable var_dashurl( const_str_plain_dashurl );
    PyObjectLocalVariable var_dashsig( const_str_plain_dashsig );
    PyObjectLocalVariable var_goodsig( const_str_plain_goodsig );
    PyObjectLocalVariable var_info_url( const_str_plain_info_url );
    PyObjectLocalVariable var_s( const_str_plain_s );
    PyObjectTempVariable tmp_tuple_unpack_1__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_1__element_1;
    PyObjectTempVariable tmp_tuple_unpack_1__element_2;
    PyObjectTempVariable tmp_tuple_unpack_1__element_3;
    PyObjectTempVariable tmp_tuple_unpack_1__element_4;
    PyObjectTempVariable tmp_tuple_unpack_2__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_2__element_1;
    PyObjectTempVariable tmp_tuple_unpack_2__element_2;

    // Actual function code.
    static PyFrameObject *frame_function_3_fetch_basic_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_3_fetch_basic_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_3_fetch_basic_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_3_fetch_basic_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_3_fetch_basic_of_class_25_Pafy_of_module_pafy );
        }

        frame_function_3_fetch_basic_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_3c1a2fe405b7cd0fe6eb7af233d12abf, module_pafy );
    }

    FrameGuard frame_guard( frame_function_3_fetch_basic_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_3_fetch_basic_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1058 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__have_basic ) ).asObject0() ) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        frame_guard.setLineNumber( 1061 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__fetch_basic ) ).asObject0() ) );
        frame_guard.setLineNumber( 1063 );
        if ( ( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_ciphertag ) ).asObject0() != SEQUENCE_CONTAINS( const_unicode_plain_s, PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_sm ) ).asObject0(), const_int_0, 0 ) ).asObject0() ) ) )
        {
            frame_guard.setLineNumber( 1064 );
            {
                PyObject *tmp_identifier = UNARY_OPERATION( UNARY_NOT, PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_ciphertag ) ).asObject0() );
                SET_ATTRIBUTE( tmp_identifier, par_self.asObject0(), const_str_plain_ciphertag );
            }
        }
        frame_guard.setLineNumber( 1066 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_ciphertag ) ).asObject0() ) )
        {
            frame_guard.setLineNumber( 1067 );
            DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS1( GET_MODULE_VALUE0( const_str_plain_dbg ), const_unicode_digest_f4a4161a0e6d5c8afae6653f18415f58 ) );
            frame_guard.setLineNumber( 1068 );
            {
                PyObjectTempKeeper0 call1;
                var_stuff.assign1( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_get_js_sm ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_videoid ) ).asObject0() ) ) );
            }
            frame_guard.setLineNumber( 1070 );
            if ( BUILTIN_ISINSTANCE_BOOL( var_stuff.asObject0(), LOOKUP_BUILTIN( const_str_plain_tuple ) ) )
            {
                frame_guard.setLineNumber( 1072 );
                PythonExceptionKeeper _caught_1;
#if PYTHON_VERSION < 300
                int _at_lineno_1 = 0;
#endif


                try
                {
                    // Tried block:
                    tmp_tuple_unpack_1__source_iter.assign1( MAKE_ITERATOR( var_stuff.asObject0() ) );
                    tmp_tuple_unpack_1__element_1.assign1( UNPACK_NEXT( tmp_tuple_unpack_1__source_iter.asObject0(), 0 ) );
                    tmp_tuple_unpack_1__element_2.assign1( UNPACK_NEXT( tmp_tuple_unpack_1__source_iter.asObject0(), 1 ) );
                    tmp_tuple_unpack_1__element_3.assign1( UNPACK_NEXT( tmp_tuple_unpack_1__source_iter.asObject0(), 2 ) );
                    tmp_tuple_unpack_1__element_4.assign1( UNPACK_NEXT( tmp_tuple_unpack_1__source_iter.asObject0(), 3 ) );
                    UNPACK_ITERATOR_CHECK( tmp_tuple_unpack_1__source_iter.asObject0(), 4 );
                    var_smaps.assign0( tmp_tuple_unpack_1__element_1.asObject0() );
                    var_js_url.assign0( tmp_tuple_unpack_1__element_2.asObject0() );
                    var_funcs.assign0( tmp_tuple_unpack_1__element_3.asObject0() );
                    var_dashurl.assign0( tmp_tuple_unpack_1__element_4.asObject0() );
                }
                catch ( PythonException &_exception )
                {
#if PYTHON_VERSION >= 300
                    if ( !_exception.hasTraceback() )
                    {
                        _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                    }
                    else
                    {
                        _exception.addTraceback( frame_guard.getFrame0() );
                    }
#else
                    _at_lineno_1 = frame_guard.getLineNumber();
#endif

                    _caught_1.save( _exception );

#if PYTHON_VERSION >= 300
                    frame_guard.preserveExistingException();

                    _exception.toExceptionHandler();
#endif
                }

                // Final block:
                tmp_tuple_unpack_1__source_iter.del( true );
                tmp_tuple_unpack_1__element_1.del( true );
                tmp_tuple_unpack_1__element_2.del( true );
                tmp_tuple_unpack_1__element_3.del( true );
                tmp_tuple_unpack_1__element_4.del( true );
#if PYTHON_VERSION < 300
                if ( _at_lineno_1 != 0 )
                {
                   frame_guard.setLineNumber( _at_lineno_1 );
                }
#endif
                _caught_1.rethrow();
                // Final end
                frame_guard.setLineNumber( 1073 );
                {
                    PyObject *tmp_identifier = var_funcs.asObject0();
                    PyObjectTemporary tmp_subscribed( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_Pafy ), const_str_plain_funcmap ) );
                    SET_SUBSCRIPT( tmp_identifier, tmp_subscribed.asObject0(), var_js_url.asObject0() );
                }
                frame_guard.setLineNumber( 1074 );
                PythonExceptionKeeper _caught_2;
#if PYTHON_VERSION < 300
                int _at_lineno_2 = 0;
#endif


                try
                {
                    // Tried block:
                    tmp_tuple_unpack_2__source_iter.assign1( MAKE_ITERATOR( var_smaps.asObject0() ) );
                    tmp_tuple_unpack_2__element_1.assign1( UNPACK_NEXT( tmp_tuple_unpack_2__source_iter.asObject0(), 0 ) );
                    tmp_tuple_unpack_2__element_2.assign1( UNPACK_NEXT( tmp_tuple_unpack_2__source_iter.asObject0(), 1 ) );
                    UNPACK_ITERATOR_CHECK( tmp_tuple_unpack_2__source_iter.asObject0(), 2 );
                    {
                        PyObject *tmp_identifier = tmp_tuple_unpack_2__element_1.asObject0();
                        SET_ATTRIBUTE( tmp_identifier, par_self.asObject0(), const_str_plain_sm );
                    }
                    {
                        PyObject *tmp_identifier = tmp_tuple_unpack_2__element_2.asObject0();
                        SET_ATTRIBUTE( tmp_identifier, par_self.asObject0(), const_str_plain_asm );
                    }
                }
                catch ( PythonException &_exception )
                {
#if PYTHON_VERSION >= 300
                    if ( !_exception.hasTraceback() )
                    {
                        _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                    }
                    else
                    {
                        _exception.addTraceback( frame_guard.getFrame0() );
                    }
#else
                    _at_lineno_2 = frame_guard.getLineNumber();
#endif

                    _caught_2.save( _exception );

#if PYTHON_VERSION >= 300
                    frame_guard.preserveExistingException();

                    _exception.toExceptionHandler();
#endif
                }

                // Final block:
                tmp_tuple_unpack_2__source_iter.del( true );
                tmp_tuple_unpack_2__element_1.del( true );
                tmp_tuple_unpack_2__element_2.del( true );
#if PYTHON_VERSION < 300
                if ( _at_lineno_2 != 0 )
                {
                   frame_guard.setLineNumber( _at_lineno_2 );
                }
#endif
                _caught_2.rethrow();
                // Final end
                frame_guard.setLineNumber( 1075 );
                {
                    PyObject *tmp_identifier = var_js_url.asObject0();
                    SET_ATTRIBUTE( tmp_identifier, par_self.asObject0(), const_str_plain_js_url );
                }
                frame_guard.setLineNumber( 1076 );
                {
                    PyObjectTempKeeper1 call1;
                    var_dashsig.assign1( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_re ), const_str_plain_search ) ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), const_unicode_digest_10210701c6e641ab82f4dd4a4eaecc7e, var_dashurl.asObject0() ) ) ).asObject0(), const_str_plain_group ) ).asObject0(), const_int_pos_1 ) );
                }
                frame_guard.setLineNumber( 1077 );
                DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS1( GET_MODULE_VALUE0( const_str_plain_dbg ), const_unicode_digest_f5ebd1745d9fca829899fdc5fbc3b95a ) );
                frame_guard.setLineNumber( 1078 );
                {
                    PyObjectTempKeeper0 call1;
                    PyObjectTempKeeper0 call2;
                    var_goodsig.assign1( ( call1.assign( GET_MODULE_VALUE0( const_str_plain__decodesig ) ), call2.assign( var_dashsig.asObject0() ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), call2.asObject0(), var_js_url.asObject0() ) ) );
                }
                frame_guard.setLineNumber( 1079 );
                {
                    PyObjectTempKeeper1 call1;
                    PyObjectTempKeeper1 call2;
                    {
                        frame_guard.setLineNumber( 1079 );
                        PyObjectTemporary tmp_identifier( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_re ), const_str_plain_sub ) ), frame_guard.setLineNumber( 1080 ), call2.assign( BINARY_OPERATION_REMAINDER( const_unicode_digest_86aee0a168f97cc0e764cb0ec582c1ed, var_goodsig.asObject0() ) ), CALL_FUNCTION_WITH_ARGS3( call1.asObject0(), const_unicode_digest_7a6a0e2aa094a7f9faff64ebb87fc3ee, call2.asObject0(), var_dashurl.asObject0() ) ) );
                        SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__dashurl );
                    }
                }
            }
            else
            {
                frame_guard.setLineNumber( 1083 );
                SET_ATTRIBUTE( Py_True, par_self.asObject0(), const_str_plain_age );
                frame_guard.setLineNumber( 1084 );
                var_info_url.assign0( var_stuff.asObject0() );
                frame_guard.setLineNumber( 1085 );
                {
                    PyObjectTempKeeper1 call1;
                    DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__fetch_basic ) ), CALL_FUNCTION( call1.asObject0(), const_tuple_empty, PyObjectTemporary( MAKE_DICT1( var_info_url.asObject0(), const_str_plain_info_url ) ).asObject0() ) ) );
                }
                frame_guard.setLineNumber( 1086 );
                {
                    PyObjectTempKeeper1 call1;
                    var_s.assign1( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_re ), const_str_plain_search ) ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), const_unicode_digest_10210701c6e641ab82f4dd4a4eaecc7e, PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__dashurl ) ).asObject0() ) ) ).asObject0(), const_str_plain_group ) ).asObject0(), const_int_pos_1 ) );
                }
                frame_guard.setLineNumber( 1087 );
                {
                    PyObjectTempKeeper1 op1;
                    PyObjectTempKeeper1 op2;
                    PyObjectTempKeeper1 op3;
                    var_s.assign1( ( op3.assign( ( op2.assign( ( op1.assign( LOOKUP_INDEX_SLICE( var_s.asObject0(), 2, 63 ) ), BINARY_OPERATION_ADD( op1.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( var_s.asObject0(), const_int_pos_82, 82 ) ).asObject0() ) ) ), BINARY_OPERATION_ADD( op2.asObject0(), PyObjectTemporary( LOOKUP_INDEX_SLICE( var_s.asObject0(), 64, 82 ) ).asObject0() ) ) ), BINARY_OPERATION_ADD( op3.asObject0(), PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( var_s.asObject0(), const_int_pos_63, 63 ) ).asObject0() ) ) );
                }
                frame_guard.setLineNumber( 1088 );
                {
                    PyObjectTempKeeper1 call1;
                    PyObjectTempKeeper1 call2;
                    {
                        frame_guard.setLineNumber( 1088 );
                        PyObjectTemporary tmp_identifier( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_re ), const_str_plain_sub ) ), frame_guard.setLineNumber( 1089 ), call2.assign( BINARY_OPERATION_REMAINDER( const_unicode_digest_86aee0a168f97cc0e764cb0ec582c1ed, var_s.asObject0() ) ), CALL_FUNCTION_WITH_ARGS3( call1.asObject0(), const_unicode_digest_7a6a0e2aa094a7f9faff64ebb87fc3ee, call2.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__dashurl ) ).asObject0() ) ) );
                        SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__dashurl );
                    }
                }
            }
        }
        frame_guard.setLineNumber( 1091 );
        {
            PyObjectTempKeeper0 call1;
            {
                PyObjectTemporary tmp_identifier( ( call1.assign( GET_MODULE_VALUE0( const_str_plain__extract_dash ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__dashurl ) ).asObject0() ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain_dash );
            }
        }
        frame_guard.setLineNumber( 1092 );
        SET_ATTRIBUTE( const_int_pos_1, par_self.asObject0(), const_str_plain__have_basic );
        frame_guard.setLineNumber( 1093 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__process_streams ) ).asObject0() ) );
        frame_guard.setLineNumber( 1094 );
        {
            PyObjectTempKeeper1 op1;
            {
                PyObjectTemporary tmp_identifier( ( op1.assign( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_time ), const_str_plain_time ) ).asObject0() ) ), BINARY_OPERATION_ADD( op1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_g ), const_str_plain_lifespan ) ).asObject0() ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain_expiry );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( var_s.updateLocalsDict( var_info_url.updateLocalsDict( var_goodsig.updateLocalsDict( var_dashsig.updateLocalsDict( var_dashurl.updateLocalsDict( var_funcs.updateLocalsDict( var_js_url.updateLocalsDict( var_smaps.updateLocalsDict( var_stuff.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_3_fetch_basic_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_3_fetch_basic_of_class_25_Pafy_of_module_pafy );
           frame_function_3_fetch_basic_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_3_fetch_basic_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "fetch_basic() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "fetch_basic() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_3_fetch_basic_of_class_25_Pafy_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_3_fetch_basic_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_3_fetch_basic_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_3_fetch_basic_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_info_url )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel par_info_url( const_str_plain_info_url, _python_par_info_url );
    PyObjectLocalVariable var_allinfo( const_str_plain_allinfo );
    PyObjectLocalVariable var__get_lst( const_str_plain__get_lst );
    PyObjectLocalVariable var_x( const_str_plain_x );

    // Actual function code.
    static PyFrameObject *frame_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_4__fetch_basic_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy );
        }

        frame_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_eb09933ad4b004cceeabbdab9a17e5d0, module_pafy );
    }

    FrameGuard frame_guard( frame_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1098 );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper1 call2;
            var_allinfo.assign1( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_get_video_info ) ), call2.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_videoid ) ).asObject0() ) ), CALL_FUNCTION( call1.asObject0(), call2.asObject0(), PyObjectTemporary( MAKE_DICT1( par_info_url.asObject0(), const_str_plain_newurl ) ).asObject0() ) ) );
        }
        frame_guard.setLineNumber( 1099 );
        DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_new ), const_str_plain_callback ) ).asObject0(), const_unicode_digest_f1cd22c05f35176a25182a57ce7772d9 ) );
        frame_guard.setLineNumber( 1101 );
        var__get_lst.assign1( MAKE_FUNCTION_function_1__get_lst_of_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy( MAKE_TUPLE2( const_unicode_plain_unknown, var_allinfo.asObject0() ) ) );
        frame_guard.setLineNumber( 1106 );
        {
            PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS1( var__get_lst.asObject0(), const_unicode_plain_title ) );
            SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__title );
        }
        frame_guard.setLineNumber( 1107 );
        {
            PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS1( var__get_lst.asObject0(), const_unicode_plain_dashmpd ) );
            SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__dashurl );
        }
        frame_guard.setLineNumber( 1108 );
        {
            PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS1( var__get_lst.asObject0(), const_unicode_plain_author ) );
            SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__author );
        }
        frame_guard.setLineNumber( 1109 );
        {
            PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS1( var__get_lst.asObject0(), const_unicode_plain_video_id ) );
            SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__videoid );
        }
        frame_guard.setLineNumber( 1110 );
        {
            PyObjectTemporary tmp_identifier( TO_FLOAT( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS2( var__get_lst.asObject0(), const_unicode_plain_avg_rating, const_float_0_0 ) ).asObject0() ) );
            SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__rating );
        }
        frame_guard.setLineNumber( 1111 );
        {
            PyObjectTemporary tmp_identifier( TO_INT( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS2( var__get_lst.asObject0(), const_unicode_plain_length_seconds, const_int_0 ) ).asObject0() ) );
            SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__length );
        }
        frame_guard.setLineNumber( 1112 );
        {
            PyObjectTemporary tmp_identifier( TO_INT2( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( var__get_lst.asObject0(), const_unicode_plain_view_count ) ).asObject0(), const_int_0 ) );
            SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__viewcount );
        }
        frame_guard.setLineNumber( 1113 );
        {
            PyObjectTempKeeper0 call1;
            {
                PyObjectTemporary tmp_identifier( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_unquote_plus ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( CALL_FUNCTION_WITH_ARGS2( var__get_lst.asObject0(), const_unicode_plain_thumbnail_url, const_unicode_empty ) ).asObject0() ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__thumb );
            }
        }
        frame_guard.setLineNumber( 1114 );
        {
            PyObjectTemporary tmp_identifier( impl_listcontr_2_of_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy( MAKE_ITERATOR( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( var__get_lst.asObject0(), const_unicode_plain_fmt_list ) ).asObject0(), const_str_plain_split ) ).asObject0(), const_unicode_chr_44 ) ).asObject0() ), var_x ) );
            SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__formats );
        }
        frame_guard.setLineNumber( 1115 );
        {
            PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS2( var__get_lst.asObject0(), const_unicode_plain_keywords, const_unicode_empty ) ).asObject0(), const_str_plain_split ) ).asObject0(), const_unicode_chr_44 ) );
            SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__keywords );
        }
        frame_guard.setLineNumber( 1116 );
        {
            PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS2( var__get_lst.asObject0(), const_unicode_plain_iurlsd, const_unicode_empty ) );
            SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__bigthumb );
        }
        frame_guard.setLineNumber( 1117 );
        {
            PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS2( var__get_lst.asObject0(), const_unicode_plain_iurlsdmaxres, const_unicode_empty ) );
            SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__bigthumbhd );
        }
        frame_guard.setLineNumber( 1118 );
        {
            PyObjectTemporary tmp_identifier( RICH_COMPARE_EQ( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( var__get_lst.asObject0(), const_unicode_plain_use_cipher_signature ) ).asObject0(), const_unicode_plain_True ) );
            SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain_ciphertag );
        }
        frame_guard.setLineNumber( 1119 );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper1 call2;
            {
                PyObjectTemporary tmp_identifier( ( call1.assign( GET_MODULE_VALUE0( const_str_plain__extract_smap ) ), call2.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_g ), const_str_plain_UEFSM ) ), CALL_FUNCTION_WITH_ARGS3( call1.asObject0(), call2.asObject0(), var_allinfo.asObject0(), Py_True ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain_sm );
            }
        }
        frame_guard.setLineNumber( 1120 );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper1 call2;
            {
                PyObjectTemporary tmp_identifier( ( call1.assign( GET_MODULE_VALUE0( const_str_plain__extract_smap ) ), call2.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_g ), const_str_plain_AF ) ), CALL_FUNCTION_WITH_ARGS3( call1.asObject0(), call2.asObject0(), var_allinfo.asObject0(), Py_True ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain_asm );
            }
        }
        frame_guard.setLineNumber( 1121 );
        DECREASE_REFCOUNT( CALL_FUNCTION_WITH_ARGS1( GET_MODULE_VALUE0( const_str_plain_dbg ), const_unicode_digest_fc683a23d743faeaeb4a64c13ff01964 ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_info_url.updateLocalsDict( par_self.updateLocalsDict( var_x.updateLocalsDict( var__get_lst.updateLocalsDict( var_allinfo.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy );
           frame_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_info_url = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_fetch_basic() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_info_url == key )
            {
                assert( _python_par_info_url == NULL );
                _python_par_info_url = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_info_url, key ) )
            {
                assert( _python_par_info_url == NULL );
                _python_par_info_url = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_fetch_basic() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_info_url != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_info_url = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_info_url == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_info_url = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL || _python_par_info_url == NULL ))
    {
        PyObject *values[] = { _python_par_self, _python_par_info_url };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy( self, _python_par_self, _python_par_info_url );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_info_url );

    return NULL;
}

static PyObject *dparse_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_1__get_lst_of_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_key, PyObject *_python_par_default, PyObject *_python_par_dic )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_key( const_str_plain_key, _python_par_key );
    PyObjectLocalParameterVariableNoDel par_default( const_str_plain_default, _python_par_default );
    PyObjectLocalParameterVariableNoDel par_dic( const_str_plain_dic, _python_par_dic );
    PyObjectLocalVariable var_retval( const_str_plain_retval );

    // Actual function code.
    static PyFrameObject *frame_function_1__get_lst_of_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_1__get_lst_of_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_1__get_lst_of_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1__get_lst_of_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_1__get_lst_of_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy );
        }

        frame_function_1__get_lst_of_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_137a33a242c92de93ce37f388a387ff0, module_pafy );
    }

    FrameGuard frame_guard( frame_function_1__get_lst_of_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_1__get_lst_of_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1103 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper0 call2;
            var_retval.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( par_dic.asObject0(), const_str_plain_get ) ), call2.assign( par_key.asObject0() ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), call2.asObject0(), par_default.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 1104 );
        {
            PyObjectTempKeeper0 cmp1;
            return ( ( cmp1.assign( var_retval.asObject0() ), RICH_COMPARE_BOOL_NE( cmp1.asObject0(), par_default.asObject0() ) ) ? LOOKUP_SUBSCRIPT_CONST( var_retval.asObject0(), const_int_0, 0 ) : par_default.asObject1() );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_dic.updateLocalsDict( par_default.updateLocalsDict( par_key.updateLocalsDict( var_retval.updateLocalsDict( PyDict_New() ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1__get_lst_of_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_1__get_lst_of_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy );
           frame_function_1__get_lst_of_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1__get_lst_of_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_key = NULL;
    PyObject *_python_par_default = NULL;
    PyObject *_python_par_dic = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_get_lst() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_key == key )
            {
                assert( _python_par_key == NULL );
                _python_par_key = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_default == key )
            {
                assert( _python_par_default == NULL );
                _python_par_default = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_dic == key )
            {
                assert( _python_par_dic == NULL );
                _python_par_dic = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_key, key ) )
            {
                assert( _python_par_key == NULL );
                _python_par_key = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_default, key ) )
            {
                assert( _python_par_default == NULL );
                _python_par_default = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_dic, key ) )
            {
                assert( _python_par_dic == NULL );
                _python_par_dic = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_get_lst() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_key != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_key = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_key == NULL )
    {
        if ( 0 + self->m_defaults_given >= 3  )
        {
            _python_par_key = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_default != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_default = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_default == NULL )
    {
        if ( 1 + self->m_defaults_given >= 3  )
        {
            _python_par_default = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_dic != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_dic = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_dic == NULL )
    {
        if ( 2 + self->m_defaults_given >= 3  )
        {
            _python_par_dic = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_key == NULL || _python_par_default == NULL || _python_par_dic == NULL ))
    {
        PyObject *values[] = { _python_par_key, _python_par_default, _python_par_dic };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_1__get_lst_of_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy( self, _python_par_key, _python_par_default, _python_par_dic );

error_exit:;

    Py_XDECREF( _python_par_key );
    Py_XDECREF( _python_par_default );
    Py_XDECREF( _python_par_dic );

    return NULL;
}

static PyObject *dparse_function_1__get_lst_of_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3 )
    {
        return impl_function_1__get_lst_of_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1__get_lst_of_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par___iterator( const_str_plain___iterator, _python_par___iterator );
    PyObjectTempVariable tmp_iter_value_0;

    // Actual function code.
    PyObjectTemporary tmp_result( PyList_New( 0 ) );
    FrameGuardVeryLight frame_guard;

    frame_guard.setLineNumber( 1114 );
    PyObject *tmp_contraction_iter_0 = par___iterator.asObject0();
    while( true )
    {
        frame_guard.setLineNumber( 1114 );
        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( tmp_contraction_iter_0 );

        if ( _tmp_unpack_1 == NULL )
        {
            break;
        }
        tmp_iter_value_0.assign1( _tmp_unpack_1 );
        closure_x.assign0( tmp_iter_value_0.asObject0() );
        APPEND_TO_LIST( tmp_result.asObject0(), PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( closure_x.asObject0(), const_str_plain_split ) ).asObject0(), const_unicode_chr_47 ) ).asObject0() ), Py_None;

        CONSIDER_THREADING();
    }
    tmp_contraction_iter_0 = NULL;
    return tmp_result.asObject1();
}


static PyObject *impl_function_5__fetch_gdata_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );
    PyObjectLocalVariable var_gdata( const_str_plain_gdata );
    PyObjectLocalVariable var_t0( const_str_plain_t0 );
    PyObjectLocalVariable var_t1( const_str_plain_t1 );
    PyObjectLocalVariable var_t2( const_str_plain_t2 );
    PyObjectLocalVariable var_tree( const_str_plain_tree );
    PyObjectLocalVariable var_groups( const_str_plain_groups );
    PyObjectLocalVariable var_published( const_str_plain_published );
    PyObjectLocalVariable var_rating( const_str_plain_rating );
    PyObjectLocalVariable var_likes( const_str_plain_likes );
    PyObjectLocalVariable var_dislikes( const_str_plain_dislikes );
    PyObjectLocalVariable var_description( const_str_plain_description );
    PyObjectLocalVariable var_category( const_str_plain_category );
    PyObjectLocalVariable var_username( const_str_plain_username );

    // Actual function code.
    static PyFrameObject *frame_function_5__fetch_gdata_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_5__fetch_gdata_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_5__fetch_gdata_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_5__fetch_gdata_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_5__fetch_gdata_of_class_25_Pafy_of_module_pafy );
        }

        frame_function_5__fetch_gdata_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_6c7c2d483483f516a99b46a563dac3a7, module_pafy );
    }

    FrameGuard frame_guard( frame_function_5__fetch_gdata_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_5__fetch_gdata_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1125 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__have_gdata ) ).asObject0() ) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        frame_guard.setLineNumber( 1128 );
        {
            PyObjectTempKeeper0 call1;
            var_gdata.assign1( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_get_video_gdata ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_videoid ) ).asObject0() ) ) );
        }
        var_t0.assign0( const_unicode_digest_8dfd77a2da912bbef85e81e2767417ea );
        var_t1.assign0( const_unicode_digest_03285daad8832807cb14d7c198a2673b );
        var_t2.assign0( const_unicode_digest_1141b97525f81c919975e11a27108962 );
        frame_guard.setLineNumber( 1132 );
        var_gdata.assign1( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_gdata.asObject0(), const_str_plain_encode ) ).asObject0(), const_unicode_plain_utf8 ) );
        frame_guard.setLineNumber( 1133 );
        {
            PyObjectTempKeeper1 call1;
            var_tree.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_ElementTree ), const_str_plain_fromstring ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), var_gdata.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 1134 );
        {
            PyObjectTempKeeper1 call1;
            var_groups.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( var_tree.asObject0(), const_str_plain_find ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( BINARY_OPERATION_ADD( var_t0.asObject0(), const_unicode_plain_group ) ).asObject0() ) ) );
        }
        frame_guard.setLineNumber( 1135 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper0 call2;
            var_published.assign1( ( call2.assign( GET_MODULE_VALUE0( const_str_plain_uni ) ), CALL_FUNCTION_WITH_ARGS1( call2.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( var_tree.asObject0(), const_str_plain_find ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( BINARY_OPERATION_ADD( var_t1.asObject0(), const_unicode_plain_published ) ).asObject0() ) ) ).asObject0(), const_str_plain_text ) ).asObject0() ) ) );
        }
        frame_guard.setLineNumber( 1136 );
        {
            PyObjectTempKeeper1 call1;
            var_rating.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( var_tree.asObject0(), const_str_plain_find ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( BINARY_OPERATION_ADD( var_t2.asObject0(), const_unicode_plain_rating ) ).asObject0() ) ) );
        }
        frame_guard.setLineNumber( 1137 );
        var_likes.assign1( TO_INT( PyObjectTemporary( ( ( var_rating.asObject0() != Py_None ) ? CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_rating.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_numLikes ) : INCREASE_REFCOUNT( const_int_0 ) ) ).asObject0() ) );
        frame_guard.setLineNumber( 1138 );
        var_dislikes.assign1( TO_INT( PyObjectTemporary( ( ( var_rating.asObject0() != Py_None ) ? CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_rating.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_numDislikes ) : INCREASE_REFCOUNT( const_int_0 ) ) ).asObject0() ) );
        frame_guard.setLineNumber( 1139 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper0 call2;
            var_description.assign1( ( call2.assign( GET_MODULE_VALUE0( const_str_plain_uni ) ), CALL_FUNCTION_WITH_ARGS1( call2.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( var_groups.asObject0(), const_str_plain_find ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( BINARY_OPERATION_ADD( var_t0.asObject0(), const_unicode_plain_description ) ).asObject0() ) ) ).asObject0(), const_str_plain_text ) ).asObject0() ) ) );
        }
        frame_guard.setLineNumber( 1140 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper0 call2;
            var_category.assign1( ( call2.assign( GET_MODULE_VALUE0( const_str_plain_uni ) ), CALL_FUNCTION_WITH_ARGS1( call2.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( var_groups.asObject0(), const_str_plain_find ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( BINARY_OPERATION_ADD( var_t0.asObject0(), const_unicode_plain_category ) ).asObject0() ) ) ).asObject0(), const_str_plain_text ) ).asObject0() ) ) );
        }
        frame_guard.setLineNumber( 1141 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper1 op1;
            var_username.assign1( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( var_tree.asObject0(), const_str_plain_find ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( BINARY_OPERATION_ADD( PyObjectTemporary( ( op1.assign( BINARY_OPERATION_ADD( var_t1.asObject0(), const_unicode_digest_8fa5808e3e7ef94511e3850f4b143427 ) ), BINARY_OPERATION_ADD( op1.asObject0(), var_t1.asObject0() ) ) ).asObject0(), const_unicode_plain_uri ) ).asObject0() ) ) ).asObject0(), const_str_plain_text ) ).asObject0(), const_str_plain_split ) ).asObject0(), const_unicode_chr_47 ) ).asObject0(), const_int_neg_1, -1 ) );
        }
        frame_guard.setLineNumber( 1142 );
        {
            PyObjectTempKeeper0 setattr1;
            ( ( setattr1.assign( par_self.asObject0() ), BUILTIN_SETATTR( setattr1.asObject0(), const_unicode_plain__username, var_username.asObject0() ) ), Py_None );
        }
        frame_guard.setLineNumber( 1143 );
        {
            PyObjectTempKeeper0 setattr1;
            ( ( setattr1.assign( par_self.asObject0() ), BUILTIN_SETATTR( setattr1.asObject0(), const_unicode_plain__published, var_published.asObject0() ) ), Py_None );
        }
        frame_guard.setLineNumber( 1144 );
        {
            PyObjectTempKeeper0 setattr1;
            ( ( setattr1.assign( par_self.asObject0() ), BUILTIN_SETATTR( setattr1.asObject0(), const_unicode_plain__description, var_description.asObject0() ) ), Py_None );
        }
        frame_guard.setLineNumber( 1145 );
        {
            PyObjectTempKeeper0 setattr1;
            ( ( setattr1.assign( par_self.asObject0() ), BUILTIN_SETATTR( setattr1.asObject0(), const_unicode_plain__category, var_category.asObject0() ) ), Py_None );
        }
        frame_guard.setLineNumber( 1146 );
        {
            PyObjectTempKeeper0 setattr1;
            ( ( setattr1.assign( par_self.asObject0() ), BUILTIN_SETATTR( setattr1.asObject0(), const_unicode_plain__likes, var_likes.asObject0() ) ), Py_None );
        }
        frame_guard.setLineNumber( 1147 );
        {
            PyObjectTempKeeper0 setattr1;
            ( ( setattr1.assign( par_self.asObject0() ), BUILTIN_SETATTR( setattr1.asObject0(), const_unicode_plain__dislikes, var_dislikes.asObject0() ) ), Py_None );
        }
        frame_guard.setLineNumber( 1149 );
        SET_ATTRIBUTE( const_int_pos_1, par_self.asObject0(), const_str_plain__have_gdata );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( var_username.updateLocalsDict( var_category.updateLocalsDict( var_description.updateLocalsDict( var_dislikes.updateLocalsDict( var_likes.updateLocalsDict( var_rating.updateLocalsDict( var_published.updateLocalsDict( var_groups.updateLocalsDict( var_tree.updateLocalsDict( var_t2.updateLocalsDict( var_t1.updateLocalsDict( var_t0.updateLocalsDict( var_gdata.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_5__fetch_gdata_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_5__fetch_gdata_of_class_25_Pafy_of_module_pafy );
           frame_function_5__fetch_gdata_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_5__fetch_gdata_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_fetch_gdata() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_fetch_gdata() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_5__fetch_gdata_of_class_25_Pafy_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_5__fetch_gdata_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_5__fetch_gdata_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_5__fetch_gdata_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_6__process_streams_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );
    PyObjectLocalVariable var_streams( const_str_plain_streams );
    PyObjectLocalVariable var_adpt_streams( const_str_plain_adpt_streams );
    PyObjectLocalVariable var_dash_streams( const_str_plain_dash_streams );
    PyObjectLocalVariable var_audiostreams( const_str_plain_audiostreams );
    PyObjectLocalVariable var_videostreams( const_str_plain_videostreams );
    PyObjectLocalVariable var_dash_itags( const_str_plain_dash_itags );
    PyObjectLocalVariable var_m4astreams( const_str_plain_m4astreams );
    PyObjectLocalVariable var_oggstreams( const_str_plain_oggstreams );
    PyObjectLocalVariable var_z( const_str_plain_z );
    PyObjectLocalVariable var_x( const_str_plain_x );
    PyObjectTempVariable tmp_tuple_unpack_1__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_1__element_1;
    PyObjectTempVariable tmp_tuple_unpack_1__element_2;

    // Actual function code.
    static PyFrameObject *frame_function_6__process_streams_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_6__process_streams_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_6__process_streams_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_6__process_streams_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_6__process_streams_of_class_25_Pafy_of_module_pafy );
        }

        frame_function_6__process_streams_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_3e461f731066c5af6aa6689f5496d8a4, module_pafy );
    }

    FrameGuard frame_guard( frame_function_6__process_streams_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_6__process_streams_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1153 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__have_basic ) ).asObject0() ) )) )
        {
            frame_guard.setLineNumber( 1154 );
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_fetch_basic ) ).asObject0() ) );
        }
        frame_guard.setLineNumber( 1156 );
        var_streams.assign1( impl_listcontr_1_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_sm ) ).asObject0() ), par_self, var_z ) );
        frame_guard.setLineNumber( 1157 );
        var_streams.assign1( impl_listcontr_2_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( MAKE_ITERATOR( var_streams.asObject0() ), var_x ) );
        frame_guard.setLineNumber( 1158 );
        var_adpt_streams.assign1( impl_listcontr_3_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_asm ) ).asObject0() ), par_self, var_z ) );
        frame_guard.setLineNumber( 1159 );
        var_adpt_streams.assign1( impl_listcontr_4_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( MAKE_ITERATOR( var_adpt_streams.asObject0() ), var_x ) );
        frame_guard.setLineNumber( 1160 );
        var_dash_streams.assign1( impl_listcontr_5_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_dash ) ).asObject0() ), par_self, var_z ) );
        frame_guard.setLineNumber( 1161 );
        var_dash_streams.assign1( impl_listcontr_6_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( MAKE_ITERATOR( var_dash_streams.asObject0() ), var_x ) );
        frame_guard.setLineNumber( 1162 );
        var_audiostreams.assign1( impl_listcontr_7_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( MAKE_ITERATOR( var_adpt_streams.asObject0() ), var_x ) );
        frame_guard.setLineNumber( 1163 );
        var_videostreams.assign1( impl_listcontr_8_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( MAKE_ITERATOR( var_adpt_streams.asObject0() ), var_x ) );
        frame_guard.setLineNumber( 1164 );
        var_dash_itags.assign1( impl_listcontr_9_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( MAKE_ITERATOR( var_dash_streams.asObject0() ), var_x ) );
        frame_guard.setLineNumber( 1165 );
        var_audiostreams.assign1( impl_listcontr_10_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( MAKE_ITERATOR( var_audiostreams.asObject0() ), var_dash_itags, var_x ) );
        frame_guard.setLineNumber( 1166 );
        var_videostreams.assign1( impl_listcontr_11_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( MAKE_ITERATOR( var_videostreams.asObject0() ), var_dash_itags, var_x ) );
        frame_guard.setLineNumber( 1167 );
        PyObject *tmp_inplace_assign_1__inplace_start = var_audiostreams.asObject0();
        PyObject *_tmp_inplace_assign_1__inplace_end;
        {
            PyObjectTempKeeper0 op1;
            _tmp_inplace_assign_1__inplace_end = ( op1.assign( tmp_inplace_assign_1__inplace_start ), BINARY_OPERATION( PyNumber_InPlaceAdd, op1.asObject0(), PyObjectTemporary( impl_listcontr_12_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( MAKE_ITERATOR( var_dash_streams.asObject0() ), var_x ) ).asObject0() ) );
        }
        PyObjectTemporary tmp_inplace_assign_1__inplace_end( _tmp_inplace_assign_1__inplace_end );
        if ( ( tmp_inplace_assign_1__inplace_start != tmp_inplace_assign_1__inplace_end.asObject0() ) )
        {
            var_audiostreams.assign0( tmp_inplace_assign_1__inplace_end.asObject0() );
        }
        frame_guard.setLineNumber( 1168 );
        PyObject *tmp_inplace_assign_2__inplace_start = var_videostreams.asObject0();
        PyObject *_tmp_inplace_assign_2__inplace_end;
        {
            PyObjectTempKeeper0 op1;
            _tmp_inplace_assign_2__inplace_end = ( op1.assign( tmp_inplace_assign_2__inplace_start ), BINARY_OPERATION( PyNumber_InPlaceAdd, op1.asObject0(), PyObjectTemporary( impl_listcontr_13_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( MAKE_ITERATOR( var_dash_streams.asObject0() ), var_x ) ).asObject0() ) );
        }
        PyObjectTemporary tmp_inplace_assign_2__inplace_end( _tmp_inplace_assign_2__inplace_end );
        if ( ( tmp_inplace_assign_2__inplace_start != tmp_inplace_assign_2__inplace_end.asObject0() ) )
        {
            var_videostreams.assign0( tmp_inplace_assign_2__inplace_end.asObject0() );
        }
        frame_guard.setLineNumber( 1169 );
        var_audiostreams.assign1( CALL_FUNCTION( LOOKUP_BUILTIN( const_str_plain_sorted ), PyObjectTemporary( MAKE_TUPLE1( var_audiostreams.asObject0() ) ).asObject0(), PyObjectTemporary( MAKE_DICT2( PyObjectTemporary( MAKE_FUNCTION_lambda_14_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy(  ) ).asObject0(), const_str_plain_key, Py_True, const_str_plain_reverse ) ).asObject0() ) );
        frame_guard.setLineNumber( 1171 );
        var_videostreams.assign1( CALL_FUNCTION( LOOKUP_BUILTIN( const_str_plain_sorted ), PyObjectTemporary( MAKE_TUPLE1( var_videostreams.asObject0() ) ).asObject0(), PyObjectTemporary( MAKE_DICT2( PyObjectTemporary( MAKE_FUNCTION_lambda_15_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy(  ) ).asObject0(), const_str_plain_key, Py_True, const_str_plain_reverse ) ).asObject0() ) );
        frame_guard.setLineNumber( 1173 );
        var_m4astreams.assign1( impl_listcontr_16_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( MAKE_ITERATOR( var_audiostreams.asObject0() ), var_x ) );
        frame_guard.setLineNumber( 1174 );
        var_oggstreams.assign1( impl_listcontr_17_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( MAKE_ITERATOR( var_audiostreams.asObject0() ), var_x ) );
        frame_guard.setLineNumber( 1175 );
        {
            PyObject *tmp_identifier = var_streams.asObject0();
            SET_ATTRIBUTE( tmp_identifier, par_self.asObject0(), const_str_plain__streams );
        }
        frame_guard.setLineNumber( 1176 );
        {
            PyObject *tmp_identifier = var_audiostreams.asObject0();
            SET_ATTRIBUTE( tmp_identifier, par_self.asObject0(), const_str_plain__audiostreams );
        }
        frame_guard.setLineNumber( 1177 );
        {
            PyObject *tmp_identifier = var_videostreams.asObject0();
            SET_ATTRIBUTE( tmp_identifier, par_self.asObject0(), const_str_plain__videostreams );
        }
        frame_guard.setLineNumber( 1178 );
        PythonExceptionKeeper _caught_1;
#if PYTHON_VERSION < 300
        int _at_lineno_1 = 0;
#endif


        try
        {
            // Tried block:
            {
                PyObjectTempKeeper0 make_tuple1;
                tmp_tuple_unpack_1__source_iter.assign1( MAKE_ITERATOR( PyObjectTemporary( ( make_tuple1.assign( var_m4astreams.asObject0() ), MAKE_TUPLE2( make_tuple1.asObject0(), var_oggstreams.asObject0() ) ) ).asObject0() ) );
            }
            tmp_tuple_unpack_1__element_1.assign1( UNPACK_NEXT( tmp_tuple_unpack_1__source_iter.asObject0(), 0 ) );
            tmp_tuple_unpack_1__element_2.assign1( UNPACK_NEXT( tmp_tuple_unpack_1__source_iter.asObject0(), 1 ) );
            UNPACK_ITERATOR_CHECK( tmp_tuple_unpack_1__source_iter.asObject0(), 2 );
            {
                PyObject *tmp_identifier = tmp_tuple_unpack_1__element_1.asObject0();
                SET_ATTRIBUTE( tmp_identifier, par_self.asObject0(), const_str_plain__m4astreams );
            }
            {
                PyObject *tmp_identifier = tmp_tuple_unpack_1__element_2.asObject0();
                SET_ATTRIBUTE( tmp_identifier, par_self.asObject0(), const_str_plain__oggstreams );
            }
        }
        catch ( PythonException &_exception )
        {
#if PYTHON_VERSION >= 300
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }
#else
            _at_lineno_1 = frame_guard.getLineNumber();
#endif

            _caught_1.save( _exception );

#if PYTHON_VERSION >= 300
            frame_guard.preserveExistingException();

            _exception.toExceptionHandler();
#endif
        }

        // Final block:
        tmp_tuple_unpack_1__source_iter.del( true );
        tmp_tuple_unpack_1__element_1.del( true );
        tmp_tuple_unpack_1__element_2.del( true );
#if PYTHON_VERSION < 300
        if ( _at_lineno_1 != 0 )
        {
           frame_guard.setLineNumber( _at_lineno_1 );
        }
#endif
        _caught_1.rethrow();
        // Final end
        frame_guard.setLineNumber( 1179 );
        {
            PyObjectTempKeeper0 op1;
            PyObjectTempKeeper1 op2;
            {
                PyObjectTemporary tmp_identifier( ( op2.assign( ( op1.assign( var_streams.asObject0() ), BINARY_OPERATION_ADD( op1.asObject0(), var_videostreams.asObject0() ) ) ), BINARY_OPERATION_ADD( op2.asObject0(), var_audiostreams.asObject0() ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__allstreams );
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( var_x.updateLocalsDict( var_z.updateLocalsDict( var_oggstreams.updateLocalsDict( var_m4astreams.updateLocalsDict( var_dash_itags.updateLocalsDict( var_videostreams.updateLocalsDict( var_audiostreams.updateLocalsDict( var_dash_streams.updateLocalsDict( var_adpt_streams.updateLocalsDict( var_streams.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_6__process_streams_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_6__process_streams_of_class_25_Pafy_of_module_pafy );
           frame_function_6__process_streams_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_6__process_streams_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_process_streams() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_process_streams() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_6__process_streams_of_class_25_Pafy_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_6__process_streams_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_6__process_streams_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_6__process_streams_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalParameterVariableNoDel &closure_self, PyObjectLocalVariable &closure_z )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par___iterator( const_str_plain___iterator, _python_par___iterator );
    PyObjectTempVariable tmp_iter_value_0;

    // Actual function code.
    PyObjectTemporary tmp_result( PyList_New( 0 ) );
    FrameGuardVeryLight frame_guard;

    frame_guard.setLineNumber( 1156 );
    PyObject *tmp_contraction_iter_0 = par___iterator.asObject0();
    while( true )
    {
        frame_guard.setLineNumber( 1156 );
        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( tmp_contraction_iter_0 );

        if ( _tmp_unpack_1 == NULL )
        {
            break;
        }
        tmp_iter_value_0.assign1( _tmp_unpack_1 );
        closure_z.assign0( tmp_iter_value_0.asObject0() );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper0 call2;
            APPEND_TO_LIST( tmp_result.asObject0(), PyObjectTemporary( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_Stream ) ), call2.assign( closure_z.asObject0() ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), call2.asObject0(), closure_self.asObject0() ) ) ).asObject0() ), Py_None;
        }

        CONSIDER_THREADING();
    }
    tmp_contraction_iter_0 = NULL;
    return tmp_result.asObject1();
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_2_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par___iterator( const_str_plain___iterator, _python_par___iterator );
    PyObjectTempVariable tmp_iter_value_0;

    // Actual function code.
    PyObjectTemporary tmp_result( PyList_New( 0 ) );
    FrameGuardVeryLight frame_guard;

    frame_guard.setLineNumber( 1157 );
    PyObject *tmp_contraction_iter_0 = par___iterator.asObject0();
    while( true )
    {
        frame_guard.setLineNumber( 1157 );
        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( tmp_contraction_iter_0 );

        if ( _tmp_unpack_1 == NULL )
        {
            break;
        }
        tmp_iter_value_0.assign1( _tmp_unpack_1 );
        closure_x.assign0( tmp_iter_value_0.asObject0() );
        {
            PyObjectTempKeeper1 cmp1;
            if ( ( cmp1.assign( LOOKUP_ATTRIBUTE( closure_x.asObject0(), const_str_plain_itag ) ), SEQUENCE_CONTAINS_BOOL( cmp1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_g ), const_str_plain_itags ) ).asObject0() ) ) )
            {
                APPEND_TO_LIST( tmp_result.asObject0(), closure_x.asObject0() ), Py_None;
            }
        }

        CONSIDER_THREADING();
    }
    frame_guard.setLineNumber( 1157 );
    tmp_contraction_iter_0 = NULL;
    return tmp_result.asObject1();
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_3_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalParameterVariableNoDel &closure_self, PyObjectLocalVariable &closure_z )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par___iterator( const_str_plain___iterator, _python_par___iterator );
    PyObjectTempVariable tmp_iter_value_0;

    // Actual function code.
    PyObjectTemporary tmp_result( PyList_New( 0 ) );
    FrameGuardVeryLight frame_guard;

    frame_guard.setLineNumber( 1158 );
    PyObject *tmp_contraction_iter_0 = par___iterator.asObject0();
    while( true )
    {
        frame_guard.setLineNumber( 1158 );
        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( tmp_contraction_iter_0 );

        if ( _tmp_unpack_1 == NULL )
        {
            break;
        }
        tmp_iter_value_0.assign1( _tmp_unpack_1 );
        closure_z.assign0( tmp_iter_value_0.asObject0() );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper0 call2;
            APPEND_TO_LIST( tmp_result.asObject0(), PyObjectTemporary( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_Stream ) ), call2.assign( closure_z.asObject0() ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), call2.asObject0(), closure_self.asObject0() ) ) ).asObject0() ), Py_None;
        }

        CONSIDER_THREADING();
    }
    tmp_contraction_iter_0 = NULL;
    return tmp_result.asObject1();
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_4_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par___iterator( const_str_plain___iterator, _python_par___iterator );
    PyObjectTempVariable tmp_iter_value_0;

    // Actual function code.
    PyObjectTemporary tmp_result( PyList_New( 0 ) );
    FrameGuardVeryLight frame_guard;

    frame_guard.setLineNumber( 1159 );
    PyObject *tmp_contraction_iter_0 = par___iterator.asObject0();
    while( true )
    {
        frame_guard.setLineNumber( 1159 );
        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( tmp_contraction_iter_0 );

        if ( _tmp_unpack_1 == NULL )
        {
            break;
        }
        tmp_iter_value_0.assign1( _tmp_unpack_1 );
        closure_x.assign0( tmp_iter_value_0.asObject0() );
        {
            PyObjectTempKeeper1 cmp1;
            if ( ( cmp1.assign( LOOKUP_ATTRIBUTE( closure_x.asObject0(), const_str_plain_itag ) ), SEQUENCE_CONTAINS_BOOL( cmp1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_g ), const_str_plain_itags ) ).asObject0() ) ) )
            {
                APPEND_TO_LIST( tmp_result.asObject0(), closure_x.asObject0() ), Py_None;
            }
        }

        CONSIDER_THREADING();
    }
    frame_guard.setLineNumber( 1159 );
    tmp_contraction_iter_0 = NULL;
    return tmp_result.asObject1();
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_5_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalParameterVariableNoDel &closure_self, PyObjectLocalVariable &closure_z )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par___iterator( const_str_plain___iterator, _python_par___iterator );
    PyObjectTempVariable tmp_iter_value_0;

    // Actual function code.
    PyObjectTemporary tmp_result( PyList_New( 0 ) );
    FrameGuardVeryLight frame_guard;

    frame_guard.setLineNumber( 1160 );
    PyObject *tmp_contraction_iter_0 = par___iterator.asObject0();
    while( true )
    {
        frame_guard.setLineNumber( 1160 );
        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( tmp_contraction_iter_0 );

        if ( _tmp_unpack_1 == NULL )
        {
            break;
        }
        tmp_iter_value_0.assign1( _tmp_unpack_1 );
        closure_z.assign0( tmp_iter_value_0.asObject0() );
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper0 call2;
            APPEND_TO_LIST( tmp_result.asObject0(), PyObjectTemporary( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_Stream ) ), call2.assign( closure_z.asObject0() ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), call2.asObject0(), closure_self.asObject0() ) ) ).asObject0() ), Py_None;
        }

        CONSIDER_THREADING();
    }
    tmp_contraction_iter_0 = NULL;
    return tmp_result.asObject1();
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_6_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par___iterator( const_str_plain___iterator, _python_par___iterator );
    PyObjectTempVariable tmp_iter_value_0;

    // Actual function code.
    PyObjectTemporary tmp_result( PyList_New( 0 ) );
    FrameGuardVeryLight frame_guard;

    frame_guard.setLineNumber( 1161 );
    PyObject *tmp_contraction_iter_0 = par___iterator.asObject0();
    while( true )
    {
        frame_guard.setLineNumber( 1161 );
        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( tmp_contraction_iter_0 );

        if ( _tmp_unpack_1 == NULL )
        {
            break;
        }
        tmp_iter_value_0.assign1( _tmp_unpack_1 );
        closure_x.assign0( tmp_iter_value_0.asObject0() );
        {
            PyObjectTempKeeper1 cmp1;
            if ( ( cmp1.assign( LOOKUP_ATTRIBUTE( closure_x.asObject0(), const_str_plain_itag ) ), SEQUENCE_CONTAINS_BOOL( cmp1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_g ), const_str_plain_itags ) ).asObject0() ) ) )
            {
                APPEND_TO_LIST( tmp_result.asObject0(), closure_x.asObject0() ), Py_None;
            }
        }

        CONSIDER_THREADING();
    }
    frame_guard.setLineNumber( 1161 );
    tmp_contraction_iter_0 = NULL;
    return tmp_result.asObject1();
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_7_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par___iterator( const_str_plain___iterator, _python_par___iterator );
    PyObjectTempVariable tmp_iter_value_0;

    // Actual function code.
    PyObjectTemporary tmp_result( PyList_New( 0 ) );
    FrameGuardVeryLight frame_guard;

    frame_guard.setLineNumber( 1162 );
    PyObject *tmp_contraction_iter_0 = par___iterator.asObject0();
    while( true )
    {
        frame_guard.setLineNumber( 1162 );
        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( tmp_contraction_iter_0 );

        if ( _tmp_unpack_1 == NULL )
        {
            break;
        }
        tmp_iter_value_0.assign1( _tmp_unpack_1 );
        closure_x.assign0( tmp_iter_value_0.asObject0() );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( closure_x.asObject0(), const_str_plain_bitrate ) ).asObject0() ) )
        {
            APPEND_TO_LIST( tmp_result.asObject0(), closure_x.asObject0() ), Py_None;
        }

        CONSIDER_THREADING();
    }
    frame_guard.setLineNumber( 1162 );
    tmp_contraction_iter_0 = NULL;
    return tmp_result.asObject1();
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_8_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par___iterator( const_str_plain___iterator, _python_par___iterator );
    PyObjectTempVariable tmp_iter_value_0;

    // Actual function code.
    PyObjectTemporary tmp_result( PyList_New( 0 ) );
    FrameGuardVeryLight frame_guard;

    frame_guard.setLineNumber( 1163 );
    PyObject *tmp_contraction_iter_0 = par___iterator.asObject0();
    while( true )
    {
        frame_guard.setLineNumber( 1163 );
        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( tmp_contraction_iter_0 );

        if ( _tmp_unpack_1 == NULL )
        {
            break;
        }
        tmp_iter_value_0.assign1( _tmp_unpack_1 );
        closure_x.assign0( tmp_iter_value_0.asObject0() );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( closure_x.asObject0(), const_str_plain_bitrate ) ).asObject0() ) )) )
        {
            APPEND_TO_LIST( tmp_result.asObject0(), closure_x.asObject0() ), Py_None;
        }

        CONSIDER_THREADING();
    }
    frame_guard.setLineNumber( 1163 );
    tmp_contraction_iter_0 = NULL;
    return tmp_result.asObject1();
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_9_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par___iterator( const_str_plain___iterator, _python_par___iterator );
    PyObjectTempVariable tmp_iter_value_0;

    // Actual function code.
    PyObjectTemporary tmp_result( PyList_New( 0 ) );
    FrameGuardVeryLight frame_guard;

    frame_guard.setLineNumber( 1164 );
    PyObject *tmp_contraction_iter_0 = par___iterator.asObject0();
    while( true )
    {
        frame_guard.setLineNumber( 1164 );
        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( tmp_contraction_iter_0 );

        if ( _tmp_unpack_1 == NULL )
        {
            break;
        }
        tmp_iter_value_0.assign1( _tmp_unpack_1 );
        closure_x.assign0( tmp_iter_value_0.asObject0() );
        APPEND_TO_LIST( tmp_result.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( closure_x.asObject0(), const_str_plain_itag ) ).asObject0() ), Py_None;

        CONSIDER_THREADING();
    }
    tmp_contraction_iter_0 = NULL;
    return tmp_result.asObject1();
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_10_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_dash_itags, PyObjectLocalVariable &closure_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par___iterator( const_str_plain___iterator, _python_par___iterator );
    PyObjectTempVariable tmp_iter_value_0;

    // Actual function code.
    PyObjectTemporary tmp_result( PyList_New( 0 ) );
    FrameGuardVeryLight frame_guard;

    frame_guard.setLineNumber( 1165 );
    PyObject *tmp_contraction_iter_0 = par___iterator.asObject0();
    while( true )
    {
        frame_guard.setLineNumber( 1165 );
        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( tmp_contraction_iter_0 );

        if ( _tmp_unpack_1 == NULL )
        {
            break;
        }
        tmp_iter_value_0.assign1( _tmp_unpack_1 );
        closure_x.assign0( tmp_iter_value_0.asObject0() );
        {
            PyObjectTempKeeper1 cmp1;
            if ( ( cmp1.assign( LOOKUP_ATTRIBUTE( closure_x.asObject0(), const_str_plain_itag ) ), SEQUENCE_CONTAINS_NOT_BOOL( cmp1.asObject0(), closure_dash_itags.asObject0() ) ) )
            {
                APPEND_TO_LIST( tmp_result.asObject0(), closure_x.asObject0() ), Py_None;
            }
        }

        CONSIDER_THREADING();
    }
    frame_guard.setLineNumber( 1165 );
    tmp_contraction_iter_0 = NULL;
    return tmp_result.asObject1();
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_11_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_dash_itags, PyObjectLocalVariable &closure_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par___iterator( const_str_plain___iterator, _python_par___iterator );
    PyObjectTempVariable tmp_iter_value_0;

    // Actual function code.
    PyObjectTemporary tmp_result( PyList_New( 0 ) );
    FrameGuardVeryLight frame_guard;

    frame_guard.setLineNumber( 1166 );
    PyObject *tmp_contraction_iter_0 = par___iterator.asObject0();
    while( true )
    {
        frame_guard.setLineNumber( 1166 );
        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( tmp_contraction_iter_0 );

        if ( _tmp_unpack_1 == NULL )
        {
            break;
        }
        tmp_iter_value_0.assign1( _tmp_unpack_1 );
        closure_x.assign0( tmp_iter_value_0.asObject0() );
        {
            PyObjectTempKeeper1 cmp1;
            if ( ( cmp1.assign( LOOKUP_ATTRIBUTE( closure_x.asObject0(), const_str_plain_itag ) ), SEQUENCE_CONTAINS_NOT_BOOL( cmp1.asObject0(), closure_dash_itags.asObject0() ) ) )
            {
                APPEND_TO_LIST( tmp_result.asObject0(), closure_x.asObject0() ), Py_None;
            }
        }

        CONSIDER_THREADING();
    }
    frame_guard.setLineNumber( 1166 );
    tmp_contraction_iter_0 = NULL;
    return tmp_result.asObject1();
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_12_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par___iterator( const_str_plain___iterator, _python_par___iterator );
    PyObjectTempVariable tmp_iter_value_0;

    // Actual function code.
    PyObjectTemporary tmp_result( PyList_New( 0 ) );
    FrameGuardVeryLight frame_guard;

    frame_guard.setLineNumber( 1167 );
    PyObject *tmp_contraction_iter_0 = par___iterator.asObject0();
    while( true )
    {
        frame_guard.setLineNumber( 1167 );
        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( tmp_contraction_iter_0 );

        if ( _tmp_unpack_1 == NULL )
        {
            break;
        }
        tmp_iter_value_0.assign1( _tmp_unpack_1 );
        closure_x.assign0( tmp_iter_value_0.asObject0() );
        if ( RICH_COMPARE_BOOL_EQ( PyObjectTemporary( LOOKUP_ATTRIBUTE( closure_x.asObject0(), const_str_plain_mediatype ) ).asObject0(), const_unicode_plain_audio ) )
        {
            APPEND_TO_LIST( tmp_result.asObject0(), closure_x.asObject0() ), Py_None;
        }

        CONSIDER_THREADING();
    }
    frame_guard.setLineNumber( 1167 );
    tmp_contraction_iter_0 = NULL;
    return tmp_result.asObject1();
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_13_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par___iterator( const_str_plain___iterator, _python_par___iterator );
    PyObjectTempVariable tmp_iter_value_0;

    // Actual function code.
    PyObjectTemporary tmp_result( PyList_New( 0 ) );
    FrameGuardVeryLight frame_guard;

    frame_guard.setLineNumber( 1168 );
    PyObject *tmp_contraction_iter_0 = par___iterator.asObject0();
    while( true )
    {
        frame_guard.setLineNumber( 1168 );
        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( tmp_contraction_iter_0 );

        if ( _tmp_unpack_1 == NULL )
        {
            break;
        }
        tmp_iter_value_0.assign1( _tmp_unpack_1 );
        closure_x.assign0( tmp_iter_value_0.asObject0() );
        if ( RICH_COMPARE_BOOL_NE( PyObjectTemporary( LOOKUP_ATTRIBUTE( closure_x.asObject0(), const_str_plain_mediatype ) ).asObject0(), const_unicode_plain_audio ) )
        {
            APPEND_TO_LIST( tmp_result.asObject0(), closure_x.asObject0() ), Py_None;
        }

        CONSIDER_THREADING();
    }
    frame_guard.setLineNumber( 1168 );
    tmp_contraction_iter_0 = NULL;
    return tmp_result.asObject1();
}


static PyObject *impl_lambda_14_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_x( const_str_plain_x, _python_par_x );

    // Actual function code.
    static PyFrameObject *frame_lambda_14_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_lambda_14_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_lambda_14_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for lambda_14_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_lambda_14_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy );
        }

        frame_lambda_14_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_1cb1a338581f8483dce879f066a4e223, module_pafy );
    }

    FrameGuard frame_guard( frame_lambda_14_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_lambda_14_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1169 );
        return LOOKUP_ATTRIBUTE( par_x.asObject0(), const_str_plain_rawbitrate );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_x.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_lambda_14_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_lambda_14_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy );
           frame_lambda_14_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_lambda_14_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_x = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_x == key )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_x, key ) )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "<lambda>() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_x != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_x = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_x == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_x = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_x == NULL ))
    {
        PyObject *values[] = { _python_par_x };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_lambda_14_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( self, _python_par_x );

error_exit:;

    Py_XDECREF( _python_par_x );

    return NULL;
}

static PyObject *dparse_lambda_14_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_lambda_14_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_lambda_14_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_lambda_15_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_x( const_str_plain_x, _python_par_x );

    // Actual function code.
    static PyFrameObject *frame_lambda_15_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_lambda_15_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_lambda_15_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for lambda_15_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_lambda_15_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy );
        }

        frame_lambda_15_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_87766eb99d641df0a48154ef98771619, module_pafy );
    }

    FrameGuard frame_guard( frame_lambda_15_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_lambda_15_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1171 );
        return LOOKUP_ATTRIBUTE( par_x.asObject0(), const_str_plain_dimensions );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_x.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_lambda_15_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_lambda_15_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy );
           frame_lambda_15_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_lambda_15_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_x = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_x == key )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_x, key ) )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "<lambda>() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_x != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_x = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_x == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_x = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_x == NULL ))
    {
        PyObject *values[] = { _python_par_x };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_lambda_15_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( self, _python_par_x );

error_exit:;

    Py_XDECREF( _python_par_x );

    return NULL;
}

static PyObject *dparse_lambda_15_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_lambda_15_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_lambda_15_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_16_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par___iterator( const_str_plain___iterator, _python_par___iterator );
    PyObjectTempVariable tmp_iter_value_0;

    // Actual function code.
    PyObjectTemporary tmp_result( PyList_New( 0 ) );
    FrameGuardVeryLight frame_guard;

    frame_guard.setLineNumber( 1173 );
    PyObject *tmp_contraction_iter_0 = par___iterator.asObject0();
    while( true )
    {
        frame_guard.setLineNumber( 1173 );
        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( tmp_contraction_iter_0 );

        if ( _tmp_unpack_1 == NULL )
        {
            break;
        }
        tmp_iter_value_0.assign1( _tmp_unpack_1 );
        closure_x.assign0( tmp_iter_value_0.asObject0() );
        if ( RICH_COMPARE_BOOL_EQ( PyObjectTemporary( LOOKUP_ATTRIBUTE( closure_x.asObject0(), const_str_plain_extension ) ).asObject0(), const_unicode_plain_m4a ) )
        {
            APPEND_TO_LIST( tmp_result.asObject0(), closure_x.asObject0() ), Py_None;
        }

        CONSIDER_THREADING();
    }
    frame_guard.setLineNumber( 1173 );
    tmp_contraction_iter_0 = NULL;
    return tmp_result.asObject1();
}


NUITKA_LOCAL_MODULE PyObject *impl_listcontr_17_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par___iterator( const_str_plain___iterator, _python_par___iterator );
    PyObjectTempVariable tmp_iter_value_0;

    // Actual function code.
    PyObjectTemporary tmp_result( PyList_New( 0 ) );
    FrameGuardVeryLight frame_guard;

    frame_guard.setLineNumber( 1174 );
    PyObject *tmp_contraction_iter_0 = par___iterator.asObject0();
    while( true )
    {
        frame_guard.setLineNumber( 1174 );
        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( tmp_contraction_iter_0 );

        if ( _tmp_unpack_1 == NULL )
        {
            break;
        }
        tmp_iter_value_0.assign1( _tmp_unpack_1 );
        closure_x.assign0( tmp_iter_value_0.asObject0() );
        if ( RICH_COMPARE_BOOL_EQ( PyObjectTemporary( LOOKUP_ATTRIBUTE( closure_x.asObject0(), const_str_plain_extension ) ).asObject0(), const_unicode_plain_ogg ) )
        {
            APPEND_TO_LIST( tmp_result.asObject0(), closure_x.asObject0() ), Py_None;
        }

        CONSIDER_THREADING();
    }
    frame_guard.setLineNumber( 1174 );
    tmp_contraction_iter_0 = NULL;
    return tmp_result.asObject1();
}


static PyObject *impl_function_7___repr___of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );
    PyObjectLocalVariable var_keys( const_str_plain_keys );
    PyObjectLocalVariable var_keywords( const_str_plain_keywords );
    PyObjectLocalVariable var_info( const_str_plain_info );
    PyObjectLocalVariable var_nfo( const_str_plain_nfo );
    PyObjectLocalVariable var_k( const_str_plain_k );

    // Actual function code.
    static PyFrameObject *frame_function_7___repr___of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_7___repr___of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_7___repr___of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_7___repr___of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_7___repr___of_class_25_Pafy_of_module_pafy );
        }

        frame_function_7___repr___of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_a2749dc193c363f16344ae42d9a8f0ce, module_pafy );
    }

    FrameGuard frame_guard( frame_function_7___repr___of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_7___repr___of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1183 );
        if ( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__have_basic ) ).asObject0() ) )
        {
            var_keys.assign0( const_unicode_digest_9062d47cfdf6d529bb226eadab31c5a4 );
            frame_guard.setLineNumber( 1185 );
            var_keys.assign1( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_keys.asObject0(), const_str_plain_split ) ).asObject0(), const_unicode_space ) );
            frame_guard.setLineNumber( 1186 );
            {
                PyObjectTempKeeper1 call1;
                var_keywords.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( const_unicode_digest_fc763cb31e9938f37737394681228f83, const_str_plain_join ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_keywords ) ).asObject0() ) ) );
            }
            frame_guard.setLineNumber( 1187 );
            {
                PyObjectTempKeeper1 make_dict1;
                PyObjectTempKeeper1 make_dict2;
                PyObjectTempKeeper1 make_dict3;
                PyObjectTempKeeper1 make_dict4;
                PyObjectTempKeeper1 make_dict5;
                PyObjectTempKeeper1 make_dict6;
                PyObjectTempKeeper1 make_dict7;
                var_info.assign1( ( make_dict1.assign( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_title ) ), frame_guard.setLineNumber( 1188 ), make_dict2.assign( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_author ) ), frame_guard.setLineNumber( 1189 ), make_dict3.assign( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_viewcount ) ), frame_guard.setLineNumber( 1190 ), make_dict4.assign( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_rating ) ), frame_guard.setLineNumber( 1191 ), make_dict5.assign( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_duration ) ), frame_guard.setLineNumber( 1192 ), make_dict6.assign( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_videoid ) ), frame_guard.setLineNumber( 1193 ), make_dict7.assign( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_thumb ) ), frame_guard.setLineNumber( 1194 ), MAKE_DICT8( make_dict1.asObject0(), const_unicode_plain_Title, make_dict2.asObject0(), const_unicode_plain_Author, make_dict3.asObject0(), const_unicode_plain_Views, make_dict4.asObject0(), const_unicode_plain_Rating, make_dict5.asObject0(), const_unicode_plain_Duration, make_dict6.asObject0(), const_unicode_plain_ID, make_dict7.asObject0(), const_unicode_plain_Thumbnail, var_keywords.asObject0(), const_unicode_plain_Keywords ) ) );
            }
            frame_guard.setLineNumber( 1196 );
            {
                PyObjectTempKeeper1 call1;
                var_nfo.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( const_unicode_chr_10, const_str_plain_join ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( impl_listcontr_1_of_function_7___repr___of_class_25_Pafy_of_module_pafy( MAKE_ITERATOR( var_keys.asObject0() ), var_info, var_k ) ).asObject0() ) ) );
            }
        }
        else
        {
            frame_guard.setLineNumber( 1199 );
            {
                PyObjectTempKeeper1 make_tuple1;
                var_nfo.assign1( BINARY_OPERATION_REMAINDER( const_unicode_digest_a84a9e5f9a500e1bba34083ba69383db, PyObjectTemporary( ( make_tuple1.assign( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_videoid ) ), frame_guard.setLineNumber( 1200 ), MAKE_TUPLE2( make_tuple1.asObject0(), PyObjectTemporary( BINARY_OPERATION_ADD( PyObjectTemporary( LOOKUP_INDEX_SLICE( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_title ) ).asObject0(), 0, 45 ) ).asObject0(), const_unicode_digest_58b9e70b65a77700ba66e9c64d6b9f89 ) ).asObject0() ) ) ).asObject0() ) );
            }
        }
        frame_guard.setLineNumber( 1202 );
        return ( RICH_COMPARE_BOOL_EQ( GET_MODULE_VALUE0( const_str_plain_pyver ), const_int_pos_2 ) ? CALL_FUNCTION_WITH_ARGS2( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_nfo.asObject0(), const_str_plain_encode ) ).asObject0(), const_unicode_plain_utf8, const_unicode_plain_replace ) : var_nfo.asObject1() );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( var_k.updateLocalsDict( var_nfo.updateLocalsDict( var_info.updateLocalsDict( var_keywords.updateLocalsDict( var_keys.updateLocalsDict( PyDict_New() ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_7___repr___of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_7___repr___of_class_25_Pafy_of_module_pafy );
           frame_function_7___repr___of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_7___repr___of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "__repr__() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "__repr__() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_7___repr___of_class_25_Pafy_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_7___repr___of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_7___repr___of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_7___repr___of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



NUITKA_LOCAL_MODULE PyObject *impl_listcontr_1_of_function_7___repr___of_class_25_Pafy_of_module_pafy( PyObject *_python_par___iterator, PyObjectLocalVariable &closure_info, PyObjectLocalVariable &closure_k )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par___iterator( const_str_plain___iterator, _python_par___iterator );
    PyObjectTempVariable tmp_iter_value_0;

    // Actual function code.
    PyObjectTemporary tmp_result( PyList_New( 0 ) );
    FrameGuardVeryLight frame_guard;

    frame_guard.setLineNumber( 1196 );
    PyObject *tmp_contraction_iter_0 = par___iterator.asObject0();
    while( true )
    {
        frame_guard.setLineNumber( 1196 );
        PyObject *_tmp_unpack_1 = ITERATOR_NEXT( tmp_contraction_iter_0 );

        if ( _tmp_unpack_1 == NULL )
        {
            break;
        }
        tmp_iter_value_0.assign1( _tmp_unpack_1 );
        closure_k.assign0( tmp_iter_value_0.asObject0() );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper0 make_tuple1;
            APPEND_TO_LIST( tmp_result.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( const_unicode_digest_7d341c08fd102f0b86285b5ff2e26ea7, PyObjectTemporary( ( make_tuple1.assign( closure_k.asObject0() ), MAKE_TUPLE2( make_tuple1.asObject0(), PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( closure_info.asObject0(), const_str_plain_get ) ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), closure_k.asObject0(), const_unicode_empty ) ) ).asObject0() ) ) ).asObject0() ) ).asObject0() ), Py_None;
        }

        CONSIDER_THREADING();
    }
    tmp_contraction_iter_0 = NULL;
    return tmp_result.asObject1();
}


static PyObject *impl_function_8_streams_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_8_streams_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_8_streams_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_8_streams_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_8_streams_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_8_streams_of_class_25_Pafy_of_module_pafy );
        }

        frame_function_8_streams_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_730829a63523e9c92fd9770ca4193c8c, module_pafy );
    }

    FrameGuard frame_guard( frame_function_8_streams_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_8_streams_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1207 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_fetch_basic ) ).asObject0() ) );
        frame_guard.setLineNumber( 1208 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__streams );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_8_streams_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_8_streams_of_class_25_Pafy_of_module_pafy );
           frame_function_8_streams_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_8_streams_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "streams() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "streams() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_8_streams_of_class_25_Pafy_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_8_streams_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_8_streams_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_8_streams_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_9_allstreams_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_9_allstreams_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_9_allstreams_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_9_allstreams_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_9_allstreams_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_9_allstreams_of_class_25_Pafy_of_module_pafy );
        }

        frame_function_9_allstreams_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_6e64de72f3c57268174ea56ffc56516b, module_pafy );
    }

    FrameGuard frame_guard( frame_function_9_allstreams_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_9_allstreams_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1213 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_fetch_basic ) ).asObject0() ) );
        frame_guard.setLineNumber( 1214 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__allstreams );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_9_allstreams_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_9_allstreams_of_class_25_Pafy_of_module_pafy );
           frame_function_9_allstreams_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_9_allstreams_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "allstreams() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "allstreams() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_9_allstreams_of_class_25_Pafy_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_9_allstreams_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_9_allstreams_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_9_allstreams_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_10_audiostreams_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_10_audiostreams_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_10_audiostreams_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_10_audiostreams_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_10_audiostreams_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_10_audiostreams_of_class_25_Pafy_of_module_pafy );
        }

        frame_function_10_audiostreams_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_6593b6c1fb4d8e4c97ac0d1e22f7db9d, module_pafy );
    }

    FrameGuard frame_guard( frame_function_10_audiostreams_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_10_audiostreams_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1219 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_fetch_basic ) ).asObject0() ) );
        frame_guard.setLineNumber( 1220 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__audiostreams );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_10_audiostreams_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_10_audiostreams_of_class_25_Pafy_of_module_pafy );
           frame_function_10_audiostreams_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_10_audiostreams_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "audiostreams() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "audiostreams() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_10_audiostreams_of_class_25_Pafy_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_10_audiostreams_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_10_audiostreams_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_10_audiostreams_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_11_videostreams_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_11_videostreams_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_11_videostreams_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_11_videostreams_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_11_videostreams_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_11_videostreams_of_class_25_Pafy_of_module_pafy );
        }

        frame_function_11_videostreams_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_0b6ced46e3523c5a97ef5aebbddc74ae, module_pafy );
    }

    FrameGuard frame_guard( frame_function_11_videostreams_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_11_videostreams_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1225 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_fetch_basic ) ).asObject0() ) );
        frame_guard.setLineNumber( 1226 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__videostreams );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_11_videostreams_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_11_videostreams_of_class_25_Pafy_of_module_pafy );
           frame_function_11_videostreams_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_11_videostreams_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "videostreams() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "videostreams() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_11_videostreams_of_class_25_Pafy_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_11_videostreams_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_11_videostreams_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_11_videostreams_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_12_oggstreams_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_12_oggstreams_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_12_oggstreams_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_12_oggstreams_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_12_oggstreams_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_12_oggstreams_of_class_25_Pafy_of_module_pafy );
        }

        frame_function_12_oggstreams_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_25e524471cd3c1af9232dccb2bfc1811, module_pafy );
    }

    FrameGuard frame_guard( frame_function_12_oggstreams_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_12_oggstreams_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1231 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_fetch_basic ) ).asObject0() ) );
        frame_guard.setLineNumber( 1232 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__oggstreams );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_12_oggstreams_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_12_oggstreams_of_class_25_Pafy_of_module_pafy );
           frame_function_12_oggstreams_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_12_oggstreams_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "oggstreams() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "oggstreams() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_12_oggstreams_of_class_25_Pafy_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_12_oggstreams_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_12_oggstreams_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_12_oggstreams_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_13_m4astreams_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_13_m4astreams_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_13_m4astreams_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_13_m4astreams_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_13_m4astreams_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_13_m4astreams_of_class_25_Pafy_of_module_pafy );
        }

        frame_function_13_m4astreams_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_f50fccd5da242adbf5a836e2c85ed5c0, module_pafy );
    }

    FrameGuard frame_guard( frame_function_13_m4astreams_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_13_m4astreams_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1237 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_fetch_basic ) ).asObject0() ) );
        frame_guard.setLineNumber( 1238 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__m4astreams );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_13_m4astreams_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_13_m4astreams_of_class_25_Pafy_of_module_pafy );
           frame_function_13_m4astreams_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_13_m4astreams_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "m4astreams() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "m4astreams() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_13_m4astreams_of_class_25_Pafy_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_13_m4astreams_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_13_m4astreams_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_13_m4astreams_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_14_title_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_14_title_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_14_title_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_14_title_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_14_title_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_14_title_of_class_25_Pafy_of_module_pafy );
        }

        frame_function_14_title_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_8cbd3f31dfc2c95623f97a10f3d48844, module_pafy );
    }

    FrameGuard frame_guard( frame_function_14_title_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_14_title_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1243 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__title ) ).asObject0() ) )) )
        {
            frame_guard.setLineNumber( 1244 );
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_fetch_basic ) ).asObject0() ) );
        }
        frame_guard.setLineNumber( 1246 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__title );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_14_title_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_14_title_of_class_25_Pafy_of_module_pafy );
           frame_function_14_title_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_14_title_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "title() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "title() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_14_title_of_class_25_Pafy_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_14_title_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_14_title_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_14_title_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_15_author_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_15_author_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_15_author_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_15_author_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_15_author_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_15_author_of_class_25_Pafy_of_module_pafy );
        }

        frame_function_15_author_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_affe94173e4b1fd7ae3e6ba0150bf788, module_pafy );
    }

    FrameGuard frame_guard( frame_function_15_author_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_15_author_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1251 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__author ) ).asObject0() ) )) )
        {
            frame_guard.setLineNumber( 1252 );
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_fetch_basic ) ).asObject0() ) );
        }
        frame_guard.setLineNumber( 1254 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__author );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_15_author_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_15_author_of_class_25_Pafy_of_module_pafy );
           frame_function_15_author_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_15_author_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "author() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "author() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_15_author_of_class_25_Pafy_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_15_author_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_15_author_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_15_author_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_16_rating_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_16_rating_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_16_rating_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_16_rating_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_16_rating_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_16_rating_of_class_25_Pafy_of_module_pafy );
        }

        frame_function_16_rating_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_7aa92d8d55da547f40ee0cd78c3a639f, module_pafy );
    }

    FrameGuard frame_guard( frame_function_16_rating_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_16_rating_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1259 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__rating ) ).asObject0() ) )) )
        {
            frame_guard.setLineNumber( 1260 );
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_fetch_basic ) ).asObject0() ) );
        }
        frame_guard.setLineNumber( 1262 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__rating );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_16_rating_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_16_rating_of_class_25_Pafy_of_module_pafy );
           frame_function_16_rating_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_16_rating_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "rating() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "rating() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_16_rating_of_class_25_Pafy_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_16_rating_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_16_rating_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_16_rating_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_17_length_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_17_length_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_17_length_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_17_length_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_17_length_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_17_length_of_class_25_Pafy_of_module_pafy );
        }

        frame_function_17_length_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_8c53654b59938174e04cb5cdd119547f, module_pafy );
    }

    FrameGuard frame_guard( frame_function_17_length_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_17_length_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1267 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__length ) ).asObject0() ) )) )
        {
            frame_guard.setLineNumber( 1268 );
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_fetch_basic ) ).asObject0() ) );
        }
        frame_guard.setLineNumber( 1270 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__length );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_17_length_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_17_length_of_class_25_Pafy_of_module_pafy );
           frame_function_17_length_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_17_length_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "length() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "length() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_17_length_of_class_25_Pafy_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_17_length_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_17_length_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_17_length_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_18_viewcount_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_18_viewcount_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_18_viewcount_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_18_viewcount_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_18_viewcount_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_18_viewcount_of_class_25_Pafy_of_module_pafy );
        }

        frame_function_18_viewcount_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_495daa278b1461c24f8cc1829d057191, module_pafy );
    }

    FrameGuard frame_guard( frame_function_18_viewcount_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_18_viewcount_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1275 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__viewcount ) ).asObject0() ) )) )
        {
            frame_guard.setLineNumber( 1276 );
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_fetch_basic ) ).asObject0() ) );
        }
        frame_guard.setLineNumber( 1278 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__viewcount );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_18_viewcount_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_18_viewcount_of_class_25_Pafy_of_module_pafy );
           frame_function_18_viewcount_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_18_viewcount_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "viewcount() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "viewcount() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_18_viewcount_of_class_25_Pafy_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_18_viewcount_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_18_viewcount_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_18_viewcount_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_19_bigthumb_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_19_bigthumb_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_19_bigthumb_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_19_bigthumb_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_19_bigthumb_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_19_bigthumb_of_class_25_Pafy_of_module_pafy );
        }

        frame_function_19_bigthumb_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_07b549483df582ee011cdf00afaa3ec2, module_pafy );
    }

    FrameGuard frame_guard( frame_function_19_bigthumb_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_19_bigthumb_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1283 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_fetch_basic ) ).asObject0() ) );
        frame_guard.setLineNumber( 1284 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__bigthumb );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_19_bigthumb_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_19_bigthumb_of_class_25_Pafy_of_module_pafy );
           frame_function_19_bigthumb_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_19_bigthumb_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "bigthumb() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "bigthumb() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_19_bigthumb_of_class_25_Pafy_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_19_bigthumb_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_19_bigthumb_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_19_bigthumb_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_20_bigthumbhd_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_20_bigthumbhd_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_20_bigthumbhd_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_20_bigthumbhd_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_20_bigthumbhd_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_20_bigthumbhd_of_class_25_Pafy_of_module_pafy );
        }

        frame_function_20_bigthumbhd_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_a9288b3319ecd04179dccddeff91b460, module_pafy );
    }

    FrameGuard frame_guard( frame_function_20_bigthumbhd_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_20_bigthumbhd_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1289 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_fetch_basic ) ).asObject0() ) );
        frame_guard.setLineNumber( 1290 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__bigthumbhd );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_20_bigthumbhd_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_20_bigthumbhd_of_class_25_Pafy_of_module_pafy );
           frame_function_20_bigthumbhd_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_20_bigthumbhd_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "bigthumbhd() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "bigthumbhd() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_20_bigthumbhd_of_class_25_Pafy_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_20_bigthumbhd_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_20_bigthumbhd_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_20_bigthumbhd_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_21_thumb_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_21_thumb_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_21_thumb_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_21_thumb_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_21_thumb_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_21_thumb_of_class_25_Pafy_of_module_pafy );
        }

        frame_function_21_thumb_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_6a18b06a514e90bfce22327233d66cb9, module_pafy );
    }

    FrameGuard frame_guard( frame_function_21_thumb_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_21_thumb_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1295 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__thumb ) ).asObject0() ) )) )
        {
            frame_guard.setLineNumber( 1296 );
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_fetch_basic ) ).asObject0() ) );
        }
        frame_guard.setLineNumber( 1298 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__thumb );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_21_thumb_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_21_thumb_of_class_25_Pafy_of_module_pafy );
           frame_function_21_thumb_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_21_thumb_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "thumb() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "thumb() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_21_thumb_of_class_25_Pafy_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_21_thumb_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_21_thumb_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_21_thumb_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_22_duration_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_22_duration_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_22_duration_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_22_duration_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_22_duration_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_22_duration_of_class_25_Pafy_of_module_pafy );
        }

        frame_function_22_duration_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_0fb756fbe51415e78acb1b309c5e69c5, module_pafy );
    }

    FrameGuard frame_guard( frame_function_22_duration_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_22_duration_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1303 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__length ) ).asObject0() ) )) )
        {
            frame_guard.setLineNumber( 1304 );
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_fetch_basic ) ).asObject0() ) );
        }
        frame_guard.setLineNumber( 1306 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper1 call2;
            {
                PyObjectTemporary tmp_identifier( ( call2.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_time ), const_str_plain_strftime ) ), CALL_FUNCTION_WITH_ARGS2( call2.asObject0(), const_unicode_digest_6ca017929c903509a3cc0dc966d8da88, PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_time ), const_str_plain_gmtime ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__length ) ).asObject0() ) ) ).asObject0() ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__duration );
            }
        }
        frame_guard.setLineNumber( 1307 );
        {
            PyObjectTempKeeper0 call1;
            {
                PyObjectTemporary tmp_identifier( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_uni ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__duration ) ).asObject0() ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__duration );
            }
        }
        frame_guard.setLineNumber( 1309 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__duration );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_22_duration_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_22_duration_of_class_25_Pafy_of_module_pafy );
           frame_function_22_duration_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_22_duration_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "duration() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "duration() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_22_duration_of_class_25_Pafy_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_22_duration_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_22_duration_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_22_duration_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_23_keywords_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_23_keywords_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_23_keywords_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_23_keywords_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_23_keywords_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_23_keywords_of_class_25_Pafy_of_module_pafy );
        }

        frame_function_23_keywords_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_ef7891e804eeda9439fcd41b8aa3898a, module_pafy );
    }

    FrameGuard frame_guard( frame_function_23_keywords_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_23_keywords_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1314 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_fetch_basic ) ).asObject0() ) );
        frame_guard.setLineNumber( 1315 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__keywords );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_23_keywords_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_23_keywords_of_class_25_Pafy_of_module_pafy );
           frame_function_23_keywords_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_23_keywords_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "keywords() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "keywords() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_23_keywords_of_class_25_Pafy_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_23_keywords_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_23_keywords_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_23_keywords_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_24_category_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_24_category_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_24_category_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_24_category_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_24_category_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_24_category_of_class_25_Pafy_of_module_pafy );
        }

        frame_function_24_category_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_94a7cb9c078814325a71a05f9260b71f, module_pafy );
    }

    FrameGuard frame_guard( frame_function_24_category_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_24_category_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1320 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__fetch_gdata ) ).asObject0() ) );
        frame_guard.setLineNumber( 1321 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__category );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_24_category_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_24_category_of_class_25_Pafy_of_module_pafy );
           frame_function_24_category_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_24_category_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "category() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "category() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_24_category_of_class_25_Pafy_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_24_category_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_24_category_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_24_category_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_25_description_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_25_description_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_25_description_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_25_description_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_25_description_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_25_description_of_class_25_Pafy_of_module_pafy );
        }

        frame_function_25_description_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_86696a94989df677f72ea450eb0e1328, module_pafy );
    }

    FrameGuard frame_guard( frame_function_25_description_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_25_description_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1326 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__description ) ).asObject0() ) )) )
        {
            frame_guard.setLineNumber( 1327 );
            DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__fetch_gdata ) ).asObject0() ) );
        }
        frame_guard.setLineNumber( 1329 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__description );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_25_description_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_25_description_of_class_25_Pafy_of_module_pafy );
           frame_function_25_description_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_25_description_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "description() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "description() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_25_description_of_class_25_Pafy_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_25_description_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_25_description_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_25_description_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_26_username_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_26_username_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_26_username_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_26_username_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_26_username_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_26_username_of_class_25_Pafy_of_module_pafy );
        }

        frame_function_26_username_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_25c32d025f7d62602554888b66426ebf, module_pafy );
    }

    FrameGuard frame_guard( frame_function_26_username_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_26_username_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1334 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__fetch_gdata ) ).asObject0() ) );
        frame_guard.setLineNumber( 1335 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__username );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_26_username_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_26_username_of_class_25_Pafy_of_module_pafy );
           frame_function_26_username_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_26_username_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "username() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "username() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_26_username_of_class_25_Pafy_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_26_username_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_26_username_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_26_username_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_27_published_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_27_published_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_27_published_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_27_published_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_27_published_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_27_published_of_class_25_Pafy_of_module_pafy );
        }

        frame_function_27_published_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_3d735160386f0e7113d9b3c4546c9a98, module_pafy );
    }

    FrameGuard frame_guard( frame_function_27_published_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_27_published_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1340 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__fetch_gdata ) ).asObject0() ) );
        frame_guard.setLineNumber( 1341 );
        return CALL_FUNCTION_WITH_ARGS2( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS2( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__published ) ).asObject0(), const_str_plain_replace ) ).asObject0(), const_unicode_digest_3fd1940e3cf3e0e92315ec7ed63be8aa, const_unicode_empty ) ).asObject0(), const_str_plain_replace ) ).asObject0(), const_unicode_plain_T, const_unicode_space );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_27_published_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_27_published_of_class_25_Pafy_of_module_pafy );
           frame_function_27_published_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_27_published_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "published() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "published() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_27_published_of_class_25_Pafy_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_27_published_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_27_published_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_27_published_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_28_likes_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_28_likes_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_28_likes_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_28_likes_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_28_likes_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_28_likes_of_class_25_Pafy_of_module_pafy );
        }

        frame_function_28_likes_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_80a8f492e18d0b5d25d5b428de79ed15, module_pafy );
    }

    FrameGuard frame_guard( frame_function_28_likes_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_28_likes_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1346 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__fetch_gdata ) ).asObject0() ) );
        frame_guard.setLineNumber( 1347 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__likes );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_28_likes_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_28_likes_of_class_25_Pafy_of_module_pafy );
           frame_function_28_likes_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_28_likes_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "likes() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "likes() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_28_likes_of_class_25_Pafy_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_28_likes_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_28_likes_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_28_likes_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_29_dislikes_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );

    // Actual function code.
    static PyFrameObject *frame_function_29_dislikes_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_29_dislikes_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_29_dislikes_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_29_dislikes_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_29_dislikes_of_class_25_Pafy_of_module_pafy );
        }

        frame_function_29_dislikes_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_e59f43346b223ab379cde15a5adc36e0, module_pafy );
    }

    FrameGuard frame_guard( frame_function_29_dislikes_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_29_dislikes_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1352 );
        DECREASE_REFCOUNT( CALL_FUNCTION_NO_ARGS( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__fetch_gdata ) ).asObject0() ) );
        frame_guard.setLineNumber( 1353 );
        return LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__dislikes );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_self.updateLocalsDict( PyDict_New() );

        if ( frame_guard.getFrame0() == frame_function_29_dislikes_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_29_dislikes_of_class_25_Pafy_of_module_pafy );
           frame_function_29_dislikes_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_29_dislikes_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "dislikes() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "dislikes() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL ))
    {
        PyObject *values[] = { _python_par_self };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_29_dislikes_of_class_25_Pafy_of_module_pafy( self, _python_par_self );

error_exit:;

    Py_XDECREF( _python_par_self );

    return NULL;
}

static PyObject *dparse_function_29_dislikes_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_function_29_dislikes_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_29_dislikes_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_30_getbest_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_preftype, PyObject *_python_par_ftypestrict )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );
    PyObjectSharedLocalVariable par_preftype( const_str_plain_preftype, _python_par_preftype );
    PyObjectSharedLocalVariable par_ftypestrict( const_str_plain_ftypestrict, _python_par_ftypestrict );
    PyObjectLocalVariable var__sortkey( const_str_plain__sortkey );
    PyObjectLocalVariable var_r( const_str_plain_r );

    // Actual function code.
    static PyFrameObject *frame_function_30_getbest_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_30_getbest_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_30_getbest_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_30_getbest_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_30_getbest_of_class_25_Pafy_of_module_pafy );
        }

        frame_function_30_getbest_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_0337fadfc5b87bb1b66258bac21798a3, module_pafy );
    }

    FrameGuard frame_guard( frame_function_30_getbest_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_30_getbest_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1362 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_streams ) ).asObject0() ) )) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        var__sortkey.assign1( MAKE_FUNCTION_function_1__sortkey_of_function_30_getbest_of_class_25_Pafy_of_module_pafy( par_ftypestrict, par_preftype ) );
        frame_guard.setLineNumber( 1374 );
        {
            PyObjectTempKeeper1 call1;
            var_r.assign1( ( call1.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_streams ) ).asObject0() ) ), CALL_FUNCTION( LOOKUP_BUILTIN( const_str_plain_max ), call1.asObject0(), PyObjectTemporary( MAKE_DICT1( var__sortkey.asObject0(), const_str_plain_key ) ).asObject0() ) ) );
        }
        frame_guard.setLineNumber( 1376 );
        {
            PyObjectTempKeeper1 cmp1;
            if ( ( CHECK_IF_TRUE( par_ftypestrict.asObject0() ) && ( RICH_COMPARE_BOOL_NE( par_preftype.asObject0(), const_unicode_plain_any ) && ( cmp1.assign( LOOKUP_ATTRIBUTE( var_r.asObject0(), const_str_plain_extension ) ), RICH_COMPARE_BOOL_NE( cmp1.asObject0(), par_preftype.asObject0() ) ) ) ) )
            {
                return INCREASE_REFCOUNT( Py_None );
            }
            else
            {
                frame_guard.setLineNumber( 1380 );
                return var_r.asObject1();
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_ftypestrict.updateLocalsDict( par_preftype.updateLocalsDict( par_self.updateLocalsDict( var_r.updateLocalsDict( var__sortkey.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_30_getbest_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_30_getbest_of_class_25_Pafy_of_module_pafy );
           frame_function_30_getbest_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_30_getbest_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_preftype = NULL;
    PyObject *_python_par_ftypestrict = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "getbest() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_preftype == key )
            {
                assert( _python_par_preftype == NULL );
                _python_par_preftype = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_ftypestrict == key )
            {
                assert( _python_par_ftypestrict == NULL );
                _python_par_ftypestrict = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_preftype, key ) )
            {
                assert( _python_par_preftype == NULL );
                _python_par_preftype = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_ftypestrict, key ) )
            {
                assert( _python_par_ftypestrict == NULL );
                _python_par_ftypestrict = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "getbest() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 3  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_preftype != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_preftype = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_preftype == NULL )
    {
        if ( 1 + self->m_defaults_given >= 3  )
        {
            _python_par_preftype = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_ftypestrict != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_ftypestrict = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_ftypestrict == NULL )
    {
        if ( 2 + self->m_defaults_given >= 3  )
        {
            _python_par_ftypestrict = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL || _python_par_preftype == NULL || _python_par_ftypestrict == NULL ))
    {
        PyObject *values[] = { _python_par_self, _python_par_preftype, _python_par_ftypestrict };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_30_getbest_of_class_25_Pafy_of_module_pafy( self, _python_par_self, _python_par_preftype, _python_par_ftypestrict );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_preftype );
    Py_XDECREF( _python_par_ftypestrict );

    return NULL;
}

static PyObject *dparse_function_30_getbest_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3 )
    {
        return impl_function_30_getbest_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_30_getbest_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_1__sortkey_of_function_30_getbest_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_x, PyObject *_python_par_key3d, PyObject *_python_par_keyres, PyObject *_python_par_keyftype )
{
    // The context of the function.
    struct _context_function_1__sortkey_of_function_30_getbest_of_class_25_Pafy_of_module_pafy_t *_python_context = (struct _context_function_1__sortkey_of_function_30_getbest_of_class_25_Pafy_of_module_pafy_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_x( const_str_plain_x, _python_par_x );
    PyObjectLocalParameterVariableNoDel par_key3d( const_str_plain_key3d, _python_par_key3d );
    PyObjectLocalParameterVariableNoDel par_keyres( const_str_plain_keyres, _python_par_keyres );
    PyObjectLocalParameterVariableNoDel par_keyftype( const_str_plain_keyftype, _python_par_keyftype );
    PyObjectLocalVariable var_strict( const_str_plain_strict );
    PyObjectLocalVariable var_nonstrict( const_str_plain_nonstrict );

    // Actual function code.
    static PyFrameObject *frame_function_1__sortkey_of_function_30_getbest_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_1__sortkey_of_function_30_getbest_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_1__sortkey_of_function_30_getbest_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1__sortkey_of_function_30_getbest_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_1__sortkey_of_function_30_getbest_of_class_25_Pafy_of_module_pafy );
        }

        frame_function_1__sortkey_of_function_30_getbest_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_0f7e840ca6139f4f044e3e44dfd0d462, module_pafy );
    }

    FrameGuard frame_guard( frame_function_1__sortkey_of_function_30_getbest_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_1__sortkey_of_function_30_getbest_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1367 );
        par_key3d.assign0( SEQUENCE_CONTAINS_NOT( const_unicode_plain_3D, PyObjectTemporary( LOOKUP_ATTRIBUTE( par_x.asObject0(), const_str_plain_resolution ) ).asObject0() ) );
        frame_guard.setLineNumber( 1368 );
        par_keyres.assign1( TO_INT( PyObjectTemporary( LOOKUP_SUBSCRIPT_CONST( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_x.asObject0(), const_str_plain_resolution ) ).asObject0(), const_str_plain_split ) ).asObject0(), const_unicode_plain_x ) ).asObject0(), const_int_0, 0 ) ).asObject0() ) );
        frame_guard.setLineNumber( 1369 );
        {
            PyObjectTempKeeper0 cmp1;
            par_keyftype.assign1( ( cmp1.assign( _python_context->closure_preftype.asObject0() ), RICH_COMPARE_EQ( cmp1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( par_x.asObject0(), const_str_plain_extension ) ).asObject0() ) ) );
        }
        frame_guard.setLineNumber( 1370 );
        {
            PyObjectTempKeeper0 make_tuple1;
            PyObjectTempKeeper0 make_tuple2;
            var_strict.assign1( ( make_tuple1.assign( par_key3d.asObject0() ), make_tuple2.assign( par_keyftype.asObject0() ), MAKE_TUPLE3( make_tuple1.asObject0(), make_tuple2.asObject0(), par_keyres.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 1371 );
        {
            PyObjectTempKeeper0 make_tuple1;
            PyObjectTempKeeper0 make_tuple2;
            var_nonstrict.assign1( ( make_tuple1.assign( par_key3d.asObject0() ), make_tuple2.assign( par_keyres.asObject0() ), MAKE_TUPLE3( make_tuple1.asObject0(), make_tuple2.asObject0(), par_keyftype.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 1372 );
        return INCREASE_REFCOUNT( ( CHECK_IF_TRUE( _python_context->closure_ftypestrict.asObject0() ) ? var_strict.asObject0() : var_nonstrict.asObject0() ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_keyftype.updateLocalsDict( par_keyres.updateLocalsDict( par_key3d.updateLocalsDict( par_x.updateLocalsDict( _python_context->closure_ftypestrict.updateLocalsDict( _python_context->closure_preftype.updateLocalsDict( var_nonstrict.updateLocalsDict( var_strict.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1__sortkey_of_function_30_getbest_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_1__sortkey_of_function_30_getbest_of_class_25_Pafy_of_module_pafy );
           frame_function_1__sortkey_of_function_30_getbest_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1__sortkey_of_function_30_getbest_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_x = NULL;
    PyObject *_python_par_key3d = NULL;
    PyObject *_python_par_keyres = NULL;
    PyObject *_python_par_keyftype = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_sortkey() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_x == key )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_key3d == key )
            {
                assert( _python_par_key3d == NULL );
                _python_par_key3d = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_keyres == key )
            {
                assert( _python_par_keyres == NULL );
                _python_par_keyres = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_keyftype == key )
            {
                assert( _python_par_keyftype == NULL );
                _python_par_keyftype = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_x, key ) )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_key3d, key ) )
            {
                assert( _python_par_key3d == NULL );
                _python_par_key3d = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_keyres, key ) )
            {
                assert( _python_par_keyres == NULL );
                _python_par_keyres = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_keyftype, key ) )
            {
                assert( _python_par_keyftype == NULL );
                _python_par_keyftype = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_sortkey() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 4 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_x != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_x = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_x == NULL )
    {
        if ( 0 + self->m_defaults_given >= 4  )
        {
            _python_par_x = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_key3d != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_key3d = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_key3d == NULL )
    {
        if ( 1 + self->m_defaults_given >= 4  )
        {
            _python_par_key3d = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_keyres != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_keyres = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_keyres == NULL )
    {
        if ( 2 + self->m_defaults_given >= 4  )
        {
            _python_par_keyres = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 3 < args_given ))
    {
         if (unlikely( _python_par_keyftype != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 3 );
             goto error_exit;
         }

        _python_par_keyftype = INCREASE_REFCOUNT( args[ 3 ] );
    }
    else if ( _python_par_keyftype == NULL )
    {
        if ( 3 + self->m_defaults_given >= 4  )
        {
            _python_par_keyftype = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 3 - 4 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_x == NULL || _python_par_key3d == NULL || _python_par_keyres == NULL || _python_par_keyftype == NULL ))
    {
        PyObject *values[] = { _python_par_x, _python_par_key3d, _python_par_keyres, _python_par_keyftype };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_1__sortkey_of_function_30_getbest_of_class_25_Pafy_of_module_pafy( self, _python_par_x, _python_par_key3d, _python_par_keyres, _python_par_keyftype );

error_exit:;

    Py_XDECREF( _python_par_x );
    Py_XDECREF( _python_par_key3d );
    Py_XDECREF( _python_par_keyres );
    Py_XDECREF( _python_par_keyftype );

    return NULL;
}

static PyObject *dparse_function_1__sortkey_of_function_30_getbest_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 4 )
    {
        return impl_function_1__sortkey_of_function_30_getbest_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1__sortkey_of_function_30_getbest_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_preftype, PyObject *_python_par_ftypestrict )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );
    PyObjectSharedLocalVariable par_preftype( const_str_plain_preftype, _python_par_preftype );
    PyObjectSharedLocalVariable par_ftypestrict( const_str_plain_ftypestrict, _python_par_ftypestrict );
    PyObjectLocalVariable var__sortkey( const_str_plain__sortkey );
    PyObjectLocalVariable var_r( const_str_plain_r );

    // Actual function code.
    static PyFrameObject *frame_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_31_getbestaudio_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy );
        }

        frame_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_a4e845fb9cd95ee73920d0dbad44767c, module_pafy );
    }

    FrameGuard frame_guard( frame_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1384 );
        if ( (!( CHECK_IF_TRUE( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_audiostreams ) ).asObject0() ) )) )
        {
            return INCREASE_REFCOUNT( Py_None );
        }
        var__sortkey.assign1( MAKE_FUNCTION_function_1__sortkey_of_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy( par_ftypestrict, par_preftype ) );
        frame_guard.setLineNumber( 1394 );
        {
            PyObjectTempKeeper1 call1;
            var_r.assign1( ( call1.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain_audiostreams ) ).asObject0() ) ), CALL_FUNCTION( LOOKUP_BUILTIN( const_str_plain_max ), call1.asObject0(), PyObjectTemporary( MAKE_DICT1( var__sortkey.asObject0(), const_str_plain_key ) ).asObject0() ) ) );
        }
        frame_guard.setLineNumber( 1396 );
        {
            PyObjectTempKeeper1 cmp1;
            if ( ( CHECK_IF_TRUE( par_ftypestrict.asObject0() ) && ( RICH_COMPARE_BOOL_NE( par_preftype.asObject0(), const_unicode_plain_any ) && ( cmp1.assign( LOOKUP_ATTRIBUTE( var_r.asObject0(), const_str_plain_extension ) ), RICH_COMPARE_BOOL_NE( cmp1.asObject0(), par_preftype.asObject0() ) ) ) ) )
            {
                return INCREASE_REFCOUNT( Py_None );
            }
            else
            {
                frame_guard.setLineNumber( 1400 );
                return var_r.asObject1();
            }
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_ftypestrict.updateLocalsDict( par_preftype.updateLocalsDict( par_self.updateLocalsDict( var_r.updateLocalsDict( var__sortkey.updateLocalsDict( PyDict_New() ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy );
           frame_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_preftype = NULL;
    PyObject *_python_par_ftypestrict = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "getbestaudio() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_preftype == key )
            {
                assert( _python_par_preftype == NULL );
                _python_par_preftype = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_ftypestrict == key )
            {
                assert( _python_par_ftypestrict == NULL );
                _python_par_ftypestrict = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_preftype, key ) )
            {
                assert( _python_par_preftype == NULL );
                _python_par_preftype = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_ftypestrict, key ) )
            {
                assert( _python_par_ftypestrict == NULL );
                _python_par_ftypestrict = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "getbestaudio() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 3  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_preftype != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_preftype = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_preftype == NULL )
    {
        if ( 1 + self->m_defaults_given >= 3  )
        {
            _python_par_preftype = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_ftypestrict != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_ftypestrict = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_ftypestrict == NULL )
    {
        if ( 2 + self->m_defaults_given >= 3  )
        {
            _python_par_ftypestrict = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL || _python_par_preftype == NULL || _python_par_ftypestrict == NULL ))
    {
        PyObject *values[] = { _python_par_self, _python_par_preftype, _python_par_ftypestrict };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy( self, _python_par_self, _python_par_preftype, _python_par_ftypestrict );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_preftype );
    Py_XDECREF( _python_par_ftypestrict );

    return NULL;
}

static PyObject *dparse_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3 )
    {
        return impl_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_1__sortkey_of_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_x, PyObject *_python_par_keybitrate, PyObject *_python_par_keyftype )
{
    // The context of the function.
    struct _context_function_1__sortkey_of_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy_t *_python_context = (struct _context_function_1__sortkey_of_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy_t *)self->m_context;

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_x( const_str_plain_x, _python_par_x );
    PyObjectLocalParameterVariableNoDel par_keybitrate( const_str_plain_keybitrate, _python_par_keybitrate );
    PyObjectLocalParameterVariableNoDel par_keyftype( const_str_plain_keyftype, _python_par_keyftype );
    PyObjectLocalVariable var_strict( const_str_plain_strict );
    PyObjectLocalVariable var_nonstrict( const_str_plain_nonstrict );
    PyObjectTempVariable tmp_tuple_unpack_1__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_1__element_1;
    PyObjectTempVariable tmp_tuple_unpack_1__element_2;

    // Actual function code.
    static PyFrameObject *frame_function_1__sortkey_of_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_1__sortkey_of_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_1__sortkey_of_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_1__sortkey_of_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_1__sortkey_of_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy );
        }

        frame_function_1__sortkey_of_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_59e81407f378c3daf20a13a47b79e697, module_pafy );
    }

    FrameGuard frame_guard( frame_function_1__sortkey_of_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_1__sortkey_of_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1389 );
        par_keybitrate.assign1( TO_INT( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_x.asObject0(), const_str_plain_rawbitrate ) ).asObject0() ) );
        frame_guard.setLineNumber( 1390 );
        {
            PyObjectTempKeeper0 cmp1;
            par_keyftype.assign1( ( cmp1.assign( _python_context->closure_preftype.asObject0() ), RICH_COMPARE_EQ( cmp1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( par_x.asObject0(), const_str_plain_extension ) ).asObject0() ) ) );
        }
        frame_guard.setLineNumber( 1391 );
        PythonExceptionKeeper _caught_1;
#if PYTHON_VERSION < 300
        int _at_lineno_1 = 0;
#endif


        try
        {
            // Tried block:
            {
                PyObjectTempKeeper0 make_tuple1;
                PyObjectTempKeeper0 make_tuple2;
                PyObjectTempKeeper1 make_tuple3;
                tmp_tuple_unpack_1__source_iter.assign1( MAKE_ITERATOR( PyObjectTemporary( ( make_tuple3.assign( ( make_tuple1.assign( par_keyftype.asObject0() ), MAKE_TUPLE2( make_tuple1.asObject0(), par_keybitrate.asObject0() ) ) ), MAKE_TUPLE2( make_tuple3.asObject0(), PyObjectTemporary( ( make_tuple2.assign( par_keybitrate.asObject0() ), MAKE_TUPLE2( make_tuple2.asObject0(), par_keyftype.asObject0() ) ) ).asObject0() ) ) ).asObject0() ) );
            }
            tmp_tuple_unpack_1__element_1.assign1( UNPACK_NEXT( tmp_tuple_unpack_1__source_iter.asObject0(), 0 ) );
            tmp_tuple_unpack_1__element_2.assign1( UNPACK_NEXT( tmp_tuple_unpack_1__source_iter.asObject0(), 1 ) );
            UNPACK_ITERATOR_CHECK( tmp_tuple_unpack_1__source_iter.asObject0(), 2 );
            var_strict.assign0( tmp_tuple_unpack_1__element_1.asObject0() );
            var_nonstrict.assign0( tmp_tuple_unpack_1__element_2.asObject0() );
        }
        catch ( PythonException &_exception )
        {
#if PYTHON_VERSION >= 300
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }
#else
            _at_lineno_1 = frame_guard.getLineNumber();
#endif

            _caught_1.save( _exception );

#if PYTHON_VERSION >= 300
            frame_guard.preserveExistingException();

            _exception.toExceptionHandler();
#endif
        }

        // Final block:
        tmp_tuple_unpack_1__source_iter.del( true );
        tmp_tuple_unpack_1__element_1.del( true );
        tmp_tuple_unpack_1__element_2.del( true );
#if PYTHON_VERSION < 300
        if ( _at_lineno_1 != 0 )
        {
           frame_guard.setLineNumber( _at_lineno_1 );
        }
#endif
        _caught_1.rethrow();
        // Final end
        frame_guard.setLineNumber( 1392 );
        return INCREASE_REFCOUNT( ( CHECK_IF_TRUE( _python_context->closure_ftypestrict.asObject0() ) ? var_strict.asObject0() : var_nonstrict.asObject0() ) );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_keyftype.updateLocalsDict( par_keybitrate.updateLocalsDict( par_x.updateLocalsDict( _python_context->closure_ftypestrict.updateLocalsDict( _python_context->closure_preftype.updateLocalsDict( var_nonstrict.updateLocalsDict( var_strict.updateLocalsDict( PyDict_New() ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_1__sortkey_of_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_1__sortkey_of_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy );
           frame_function_1__sortkey_of_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }

}
static PyObject *fparse_function_1__sortkey_of_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_x = NULL;
    PyObject *_python_par_keybitrate = NULL;
    PyObject *_python_par_keyftype = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "_sortkey() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_x == key )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_keybitrate == key )
            {
                assert( _python_par_keybitrate == NULL );
                _python_par_keybitrate = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_keyftype == key )
            {
                assert( _python_par_keyftype == NULL );
                _python_par_keyftype = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_x, key ) )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_keybitrate, key ) )
            {
                assert( _python_par_keybitrate == NULL );
                _python_par_keybitrate = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_keyftype, key ) )
            {
                assert( _python_par_keyftype == NULL );
                _python_par_keyftype = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "_sortkey() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 3 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_x != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_x = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_x == NULL )
    {
        if ( 0 + self->m_defaults_given >= 3  )
        {
            _python_par_x = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_keybitrate != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_keybitrate = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_keybitrate == NULL )
    {
        if ( 1 + self->m_defaults_given >= 3  )
        {
            _python_par_keybitrate = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_keyftype != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_keyftype = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_keyftype == NULL )
    {
        if ( 2 + self->m_defaults_given >= 3  )
        {
            _python_par_keyftype = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 3 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_x == NULL || _python_par_keybitrate == NULL || _python_par_keyftype == NULL ))
    {
        PyObject *values[] = { _python_par_x, _python_par_keybitrate, _python_par_keyftype };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_1__sortkey_of_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy( self, _python_par_x, _python_par_keybitrate, _python_par_keyftype );

error_exit:;

    Py_XDECREF( _python_par_x );
    Py_XDECREF( _python_par_keybitrate );
    Py_XDECREF( _python_par_keyftype );

    return NULL;
}

static PyObject *dparse_function_1__sortkey_of_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 3 )
    {
        return impl_function_1__sortkey_of_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_1__sortkey_of_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_32_populate_from_playlist_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_self, PyObject *_python_par_pl_data )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_self( const_str_plain_self, _python_par_self );
    PyObjectLocalParameterVariableNoDel par_pl_data( const_str_plain_pl_data, _python_par_pl_data );

    // Actual function code.
    static PyFrameObject *frame_function_32_populate_from_playlist_of_class_25_Pafy_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_32_populate_from_playlist_of_class_25_Pafy_of_module_pafy ) )
    {
        if ( frame_function_32_populate_from_playlist_of_class_25_Pafy_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_32_populate_from_playlist_of_class_25_Pafy_of_module_pafy" );
#endif
            Py_DECREF( frame_function_32_populate_from_playlist_of_class_25_Pafy_of_module_pafy );
        }

        frame_function_32_populate_from_playlist_of_class_25_Pafy_of_module_pafy = MAKE_FRAME( codeobj_1dd89844783769b6a187d4224be4d1b8, module_pafy );
    }

    FrameGuard frame_guard( frame_function_32_populate_from_playlist_of_class_25_Pafy_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_32_populate_from_playlist_of_class_25_Pafy_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1404 );
        {
            PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_pl_data.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_title ) );
            SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__title );
        }
        frame_guard.setLineNumber( 1405 );
        {
            PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_pl_data.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_author ) );
            SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__author );
        }
        frame_guard.setLineNumber( 1406 );
        {
            PyObjectTemporary tmp_identifier( TO_INT( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS2( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_pl_data.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_length_seconds, const_int_0 ) ).asObject0() ) );
            SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__length );
        }
        frame_guard.setLineNumber( 1407 );
        {
            PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS2( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_pl_data.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_rating, const_float_0_0 ) );
            SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__rating );
        }
        frame_guard.setLineNumber( 1408 );
        {
            PyObjectTempKeeper1 call1;
            PyObjectTempKeeper1 call2;
            {
                PyObjectTemporary tmp_identifier( ( call2.assign( LOOKUP_ATTRIBUTE( const_unicode_empty, const_str_plain_join ) ), CALL_FUNCTION_WITH_ARGS1( call2.asObject0(), PyObjectTemporary( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_re ), const_str_plain_findall ) ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), const_unicode_digest_db67067ff09aa53777934fc90dd388b8, PyObjectTemporary( CALL_FUNCTION_WITH_ARGS2( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_pl_data.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_views, const_unicode_plain_0 ) ).asObject0() ) ) ).asObject0() ) ) );
                SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__viewcount );
            }
        }
        frame_guard.setLineNumber( 1409 );
        {
            PyObjectTemporary tmp_identifier( TO_INT( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_self.asObject0(), const_str_plain__viewcount ) ).asObject0() ) );
            SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__viewcount );
        }
        frame_guard.setLineNumber( 1410 );
        {
            PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_pl_data.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_thumbnail ) );
            SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__thumb );
        }
        frame_guard.setLineNumber( 1411 );
        {
            PyObjectTemporary tmp_identifier( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( par_pl_data.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_description ) );
            SET_ATTRIBUTE( tmp_identifier.asObject0(), par_self.asObject0(), const_str_plain__description );
        }
        frame_guard.setLineNumber( 1412 );
        {
            PyObject *tmp_identifier = par_pl_data.asObject0();
            SET_ATTRIBUTE( tmp_identifier, par_self.asObject0(), const_str_plain_playlist_meta );
        }
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_pl_data.updateLocalsDict( par_self.updateLocalsDict( PyDict_New() ) );

        if ( frame_guard.getFrame0() == frame_function_32_populate_from_playlist_of_class_25_Pafy_of_module_pafy )
        {
           Py_DECREF( frame_function_32_populate_from_playlist_of_class_25_Pafy_of_module_pafy );
           frame_function_32_populate_from_playlist_of_class_25_Pafy_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_function_32_populate_from_playlist_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_self = NULL;
    PyObject *_python_par_pl_data = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "populate_from_playlist() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_self == key )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_pl_data == key )
            {
                assert( _python_par_pl_data == NULL );
                _python_par_pl_data = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_self, key ) )
            {
                assert( _python_par_self == NULL );
                _python_par_self = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_pl_data, key ) )
            {
                assert( _python_par_pl_data == NULL );
                _python_par_pl_data = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "populate_from_playlist() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 2 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_self != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_self = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_self == NULL )
    {
        if ( 0 + self->m_defaults_given >= 2  )
        {
            _python_par_self = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_pl_data != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_pl_data = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_pl_data == NULL )
    {
        if ( 1 + self->m_defaults_given >= 2  )
        {
            _python_par_pl_data = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 2 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_self == NULL || _python_par_pl_data == NULL ))
    {
        PyObject *values[] = { _python_par_self, _python_par_pl_data };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_32_populate_from_playlist_of_class_25_Pafy_of_module_pafy( self, _python_par_self, _python_par_pl_data );

error_exit:;

    Py_XDECREF( _python_par_self );
    Py_XDECREF( _python_par_pl_data );

    return NULL;
}

static PyObject *dparse_function_32_populate_from_playlist_of_class_25_Pafy_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 2 )
    {
        return impl_function_32_populate_from_playlist_of_class_25_Pafy_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_32_populate_from_playlist_of_class_25_Pafy_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_lambda_26_lambda_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_x )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_x( const_str_plain_x, _python_par_x );

    // Actual function code.
    return INCREASE_REFCOUNT( Py_None );
}
static PyObject *fparse_lambda_26_lambda_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_x = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "<lambda>() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_x == key )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_x, key ) )
            {
                assert( _python_par_x == NULL );
                _python_par_x = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "<lambda>() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 1 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_x != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_x = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_x == NULL )
    {
        if ( 0 + self->m_defaults_given >= 1  )
        {
            _python_par_x = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 1 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_x == NULL ))
    {
        PyObject *values[] = { _python_par_x };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_lambda_26_lambda_of_module_pafy( self, _python_par_x );

error_exit:;

    Py_XDECREF( _python_par_x );

    return NULL;
}

static PyObject *dparse_lambda_26_lambda_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 1 )
    {
        return impl_lambda_26_lambda_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ) );
    }
    else
    {
        PyObject *result = fparse_lambda_26_lambda_of_module_pafy( self, args, size, NULL );
        return result;
    }

}



static PyObject *impl_function_27_get_playlist_of_module_pafy( Nuitka_FunctionObject *self, PyObject *_python_par_playlist_url, PyObject *_python_par_basic, PyObject *_python_par_gdata, PyObject *_python_par_signature, PyObject *_python_par_size, PyObject *_python_par_callback )
{
    // No context is used.

    // Local variable declarations.
    PyObjectLocalParameterVariableNoDel par_playlist_url( const_str_plain_playlist_url, _python_par_playlist_url );
    PyObjectLocalParameterVariableNoDel par_basic( const_str_plain_basic, _python_par_basic );
    PyObjectLocalParameterVariableNoDel par_gdata( const_str_plain_gdata, _python_par_gdata );
    PyObjectLocalParameterVariableNoDel par_signature( const_str_plain_signature, _python_par_signature );
    PyObjectLocalParameterVariableNoDel par_size( const_str_plain_size, _python_par_size );
    PyObjectLocalParameterVariableNoDel par_callback( const_str_plain_callback, _python_par_callback );
    PyObjectLocalVariable var_x( const_str_plain_x );
    PyObjectLocalVariable var_regx( const_str_plain_regx );
    PyObjectLocalVariable var_m( const_str_plain_m );
    PyObjectLocalVariable var_err( const_str_plain_err );
    PyObjectLocalVariable var_playlist_id( const_str_plain_playlist_id );
    PyObjectLocalVariable var_url( const_str_plain_url );
    PyObjectLocalVariable var_allinfo( const_str_plain_allinfo );
    PyObjectLocalVariable var_playlist( const_str_plain_playlist );
    PyObjectLocalVariable var_v( const_str_plain_v );
    PyObjectLocalVariable var_vid_data( const_str_plain_vid_data );
    PyObjectLocalVariable var_pafy_obj( const_str_plain_pafy_obj );
    PyObjectLocalVariable var_e( const_str_plain_e );
    PyObjectTempVariable tmp_for_loop_1__iter_value;

    // Actual function code.
    var_x.assign0( const_tuple_98ad10b63e392e8ba505df0dd8cc5a5b_tuple );
    static PyFrameObject *frame_function_27_get_playlist_of_module_pafy = NULL;

    if ( isFrameUnusable( frame_function_27_get_playlist_of_module_pafy ) )
    {
        if ( frame_function_27_get_playlist_of_module_pafy )
        {
#if _DEBUG_REFRAME
            puts( "reframe for function_27_get_playlist_of_module_pafy" );
#endif
            Py_DECREF( frame_function_27_get_playlist_of_module_pafy );
        }

        frame_function_27_get_playlist_of_module_pafy = MAKE_FRAME( codeobj_d6fae45b2cace85c1a5f898d97a59986, module_pafy );
    }

    FrameGuardWithExceptionPreservation frame_guard( frame_function_27_get_playlist_of_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_function_27_get_playlist_of_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 1426 );
        {
            PyObjectTempKeeper1 call1;
            var_regx.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_re ), const_str_plain_compile ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( const_unicode_digest_51fd6e5560f484053d0a748b7095b979, var_x.asObject0() ) ).asObject0() ) ) );
        }
        frame_guard.setLineNumber( 1427 );
        {
            PyObjectTempKeeper1 call1;
            var_m.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( var_regx.asObject0(), const_str_plain_search ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), par_playlist_url.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 1429 );
        if ( (!( CHECK_IF_TRUE( var_m.asObject0() ) )) )
        {
            var_err.assign0( const_unicode_digest_cd5ea120df6202e89cd7ac86729b9772 );
            frame_guard.setLineNumber( 1431 );
            {
                PyObjectTempKeeper0 op1;
                RAISE_EXCEPTION_WITH_TYPE( PyObjectTemporary( CALL_FUNCTION_WITH_POSARGS( PyExc_ValueError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( ( op1.assign( var_err.asObject0() ), BINARY_OPERATION_REMAINDER( op1.asObject0(), par_playlist_url.asObject0() ) ) ).asObject0() ) ).asObject0() ) ).asObject0(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject0() );
            }
        }
        frame_guard.setLineNumber( 1433 );
        var_playlist_id.assign1( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_m.asObject0(), const_str_plain_group ) ).asObject0(), const_int_pos_1 ) );
        frame_guard.setLineNumber( 1434 );
        {
            PyObjectTempKeeper1 op1;
            var_url.assign1( ( op1.assign( LOOKUP_SUBSCRIPT( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_g ), const_str_plain_urls ) ).asObject0(), const_unicode_plain_playlist ) ), BINARY_OPERATION_REMAINDER( op1.asObject0(), var_playlist_id.asObject0() ) ) );
        }
        frame_guard.setLineNumber( 1436 );
        try
        {
            frame_guard.setLineNumber( 1437 );
            {
                PyObjectTempKeeper0 call1;
                var_allinfo.assign1( ( call1.assign( GET_MODULE_VALUE0( const_str_plain_fetch_decode ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), var_url.asObject0() ) ) );
            }
            frame_guard.setLineNumber( 1438 );
            {
                PyObjectTempKeeper1 call1;
                var_allinfo.assign1( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_json ), const_str_plain_loads ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), var_allinfo.asObject0() ) ) );
            }
        }
        catch ( PythonException &_exception )
        {
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }

            frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
            ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
            _exception.toExceptionHandler();

            if (true)
            {
                frame_guard.detachFrame();
                frame_guard.setLineNumber( 1441 );
                RAISE_EXCEPTION_WITH_TYPE( PyObjectTemporary( CALL_FUNCTION_WITH_POSARGS( PyExc_IOError, PyObjectTemporary( MAKE_TUPLE1( PyObjectTemporary( BINARY_OPERATION_REMAINDER( const_unicode_digest_cea9981ec39bbb5de7928994a1a2f32a, PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_m.asObject0(), const_str_plain_groups ) ).asObject0(), const_int_0 ) ).asObject0() ) ).asObject0() ) ).asObject0() ) ).asObject0(), PyObjectTemporary( MAKE_TRACEBACK( frame_guard.getFrame() ) ).asObject0() );
            }
            else
            {
                PyTracebackObject *tb = _exception.getTraceback();
                frame_guard.setLineNumber( tb->tb_lineno );
                _exception.setTraceback( tb->tb_next );
                tb->tb_next = NULL;

                throw;
            }
        }
        frame_guard.setLineNumber( 1444 );
        {
            PyObjectTempKeeper0 make_dict1;
            PyObjectTempKeeper1 make_dict2;
            PyObjectTempKeeper1 make_dict3;
            PyObjectTempKeeper1 make_dict4;
            PyObjectTempKeeper1 make_dict5;
            var_playlist.assign1( ( frame_guard.setLineNumber( 1445 ), make_dict1.assign( var_playlist_id.asObject0() ), frame_guard.setLineNumber( 1446 ), make_dict2.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_allinfo.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_likes ) ), frame_guard.setLineNumber( 1447 ), make_dict3.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_allinfo.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_title ) ), frame_guard.setLineNumber( 1448 ), make_dict4.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_allinfo.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_author ) ), frame_guard.setLineNumber( 1449 ), make_dict5.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_allinfo.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_dislikes ) ), frame_guard.setLineNumber( 1450 ), MAKE_DICT7( make_dict1.asObject0(), const_str_plain_playlist_id, make_dict2.asObject0(), const_str_plain_likes, make_dict3.asObject0(), const_str_plain_title, make_dict4.asObject0(), const_str_plain_author, make_dict5.asObject0(), const_str_plain_dislikes, PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_allinfo.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_description ) ).asObject0(), const_str_plain_description, PyObjectTemporary( PyList_New( 0 ) ).asObject0(), const_str_plain_items ) ) );
        }
        frame_guard.setLineNumber( 1455 );
        PyObjectTemporaryWithDel tmp_for_loop_1__for_iterator( MAKE_ITERATOR( PyObjectTemporary( LOOKUP_SUBSCRIPT( var_allinfo.asObject0(), const_unicode_plain_video ) ).asObject0() ) );
        PythonExceptionKeeper _caught_1;
#if PYTHON_VERSION < 300
        int _at_lineno_1 = 0;
#endif


        try
        {
            // Tried block:
            while( true )
            {
                frame_guard.setLineNumber( 1455 );
                PyObject *_tmp_unpack_2 = ITERATOR_NEXT( tmp_for_loop_1__for_iterator.asObject0() );

                if ( _tmp_unpack_2 == NULL )
                {
                    break;
                }
                tmp_for_loop_1__iter_value.assign1( _tmp_unpack_2 );
                var_v.assign0( tmp_for_loop_1__iter_value.asObject0() );
                frame_guard.setLineNumber( 1457 );
                {
                    PyObjectTempKeeper1 call1;
                    PyObjectTempKeeper1 make_dict1;
                    PyObjectTempKeeper1 make_dict10;
                    PyObjectTempKeeper1 make_dict11;
                    PyObjectTempKeeper1 make_dict12;
                    PyObjectTempKeeper1 make_dict13;
                    PyObjectTempKeeper1 make_dict14;
                    PyObjectTempKeeper1 make_dict15;
                    PyObjectTempKeeper1 make_dict16;
                    PyObjectTempKeeper1 make_dict17;
                    PyObjectTempKeeper1 make_dict18;
                    PyObjectTempKeeper1 make_dict19;
                    PyObjectTempKeeper1 make_dict2;
                    PyObjectTempKeeper1 make_dict20;
                    PyObjectTempKeeper1 make_dict21;
                    PyObjectTempKeeper1 make_dict22;
                    PyObjectTempKeeper1 make_dict23;
                    PyObjectTempKeeper1 make_dict3;
                    PyObjectTempKeeper1 make_dict4;
                    PyObjectTempKeeper1 make_dict5;
                    PyObjectTempKeeper1 make_dict6;
                    PyObjectTempKeeper1 make_dict7;
                    PyObjectTempKeeper1 make_dict8;
                    PyObjectTempKeeper1 make_dict9;
                    var_vid_data.assign1( ( frame_guard.setLineNumber( 1458 ), make_dict1.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_v.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_added ) ), frame_guard.setLineNumber( 1459 ), make_dict2.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_v.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_is_cc ) ), frame_guard.setLineNumber( 1460 ), make_dict3.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_v.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_is_hd ) ), frame_guard.setLineNumber( 1461 ), make_dict4.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_v.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_likes ) ), frame_guard.setLineNumber( 1462 ), make_dict5.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_v.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_title ) ), frame_guard.setLineNumber( 1463 ), make_dict6.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_v.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_views ) ), frame_guard.setLineNumber( 1464 ), make_dict7.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_v.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_rating ) ), frame_guard.setLineNumber( 1465 ), make_dict8.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_v.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_author ) ), frame_guard.setLineNumber( 1466 ), make_dict9.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_v.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_user_id ) ), frame_guard.setLineNumber( 1467 ), make_dict10.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_v.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_privacy ) ), frame_guard.setLineNumber( 1468 ), make_dict11.assign( CALL_FUNCTION_WITH_ARGS2( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_v.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_start, const_float_0_0 ) ), frame_guard.setLineNumber( 1469 ), make_dict12.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_v.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_dislikes ) ), frame_guard.setLineNumber( 1470 ), make_dict13.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_v.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_duration ) ), frame_guard.setLineNumber( 1471 ), make_dict14.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_v.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_comments ) ), frame_guard.setLineNumber( 1472 ), make_dict15.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_v.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_keywords ) ), frame_guard.setLineNumber( 1473 ), make_dict16.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_v.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_thumbnail ) ), frame_guard.setLineNumber( 1474 ), make_dict17.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_v.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_cc_license ) ), frame_guard.setLineNumber( 1475 ), make_dict18.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_v.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_category_id ) ), frame_guard.setLineNumber( 1476 ), make_dict19.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_v.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_description ) ), frame_guard.setLineNumber( 1477 ), make_dict20.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_v.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_encrypted_id ) ), frame_guard.setLineNumber( 1478 ), make_dict21.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_v.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_time_created ) ), frame_guard.setLineNumber( 1479 ), make_dict22.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_v.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_time_updated ) ), frame_guard.setLineNumber( 1480 ), make_dict23.assign( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_v.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_length_seconds ) ), frame_guard.setLineNumber( 1481 ), MAKE_DICT24( make_dict1.asObject0(), const_str_plain_added, make_dict2.asObject0(), const_str_plain_is_cc, make_dict3.asObject0(), const_str_plain_is_hd, make_dict4.asObject0(), const_str_plain_likes, make_dict5.asObject0(), const_str_plain_title, make_dict6.asObject0(), const_str_plain_views, make_dict7.asObject0(), const_str_plain_rating, make_dict8.asObject0(), const_str_plain_author, make_dict9.asObject0(), const_str_plain_user_id, make_dict10.asObject0(), const_str_plain_privacy, make_dict11.asObject0(), const_str_plain_start, make_dict12.asObject0(), const_str_plain_dislikes, make_dict13.asObject0(), const_str_plain_duration, make_dict14.asObject0(), const_str_plain_comments, make_dict15.asObject0(), const_str_plain_keywords, make_dict16.asObject0(), const_str_plain_thumbnail, make_dict17.asObject0(), const_str_plain_cc_license, make_dict18.asObject0(), const_str_plain_category_id, make_dict19.asObject0(), const_str_plain_description, make_dict20.asObject0(), const_str_plain_encrypted_id, make_dict21.asObject0(), const_str_plain_time_created, make_dict22.asObject0(), const_str_plain_time_updated, make_dict23.asObject0(), const_str_plain_length_seconds, PyObjectTemporary( ( frame_guard.setLineNumber( 1481 ), call1.assign( LOOKUP_ATTRIBUTE( var_v.asObject0(), const_str_plain_get ) ), CALL_FUNCTION_WITH_ARGS2( call1.asObject0(), const_unicode_plain_end, PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( var_v.asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_length_seconds ) ).asObject0() ) ) ).asObject0(), const_str_plain_end ) ) );
                }
                frame_guard.setLineNumber( 1484 );
                try
                {
                    frame_guard.setLineNumber( 1485 );
                    {
                        PyObjectTempKeeper0 call1;
                        PyObjectTempKeeper1 call2;
                        PyObjectTempKeeper0 make_dict1;
                        PyObjectTempKeeper0 make_dict2;
                        PyObjectTempKeeper0 make_dict3;
                        PyObjectTempKeeper0 make_dict4;
                        var_pafy_obj.assign1( ( frame_guard.setLineNumber( 1485 ), call1.assign( GET_MODULE_VALUE0( const_str_plain_new ) ), call2.assign( MAKE_TUPLE1( PyObjectTemporary( LOOKUP_SUBSCRIPT( var_vid_data.asObject0(), const_unicode_plain_encrypted_id ) ).asObject0() ) ), CALL_FUNCTION( call1.asObject0(), call2.asObject0(), PyObjectTemporary( ( frame_guard.setLineNumber( 1486 ), make_dict1.assign( par_basic.asObject0() ), frame_guard.setLineNumber( 1487 ), make_dict2.assign( par_gdata.asObject0() ), frame_guard.setLineNumber( 1488 ), make_dict3.assign( par_signature.asObject0() ), frame_guard.setLineNumber( 1489 ), make_dict4.assign( par_size.asObject0() ), frame_guard.setLineNumber( 1490 ), MAKE_DICT5( make_dict1.asObject0(), const_str_plain_basic, make_dict2.asObject0(), const_str_plain_gdata, make_dict3.asObject0(), const_str_plain_signature, make_dict4.asObject0(), const_str_plain_size, par_callback.asObject0(), const_str_plain_callback ) ) ).asObject0() ) ) );
                    }
                }
                catch ( PythonException &_exception )
                {
                    if ( !_exception.hasTraceback() )
                    {
                        _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                    }
                    else
                    {
                        _exception.addTraceback( frame_guard.getFrame0() );
                    }

                    frame_guard.preserveExistingException();

#if PYTHON_VERSION >= 300
                    ExceptionRestorerFrameGuard restorer( &frame_guard );
#endif
                    _exception.toExceptionHandler();

                    if ( _exception.matches( PyExc_IOError ) )
                    {
                        frame_guard.detachFrame();
                        var_e.assign0( _exception.getValue() );
                        frame_guard.setLineNumber( 1493 );
                        {
                            PyObjectTempKeeper0 call1;
                            PyObjectTempKeeper1 make_tuple1;
                            DECREASE_REFCOUNT( ( call1.assign( par_callback.asObject0() ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( const_unicode_digest_7d341c08fd102f0b86285b5ff2e26ea7, PyObjectTemporary( ( make_tuple1.assign( LOOKUP_SUBSCRIPT( var_v.asObject0(), const_unicode_plain_title ) ), MAKE_TUPLE2( make_tuple1.asObject0(), PyObjectTemporary( LOOKUP_ATTRIBUTE( var_e.asObject0(), const_str_plain_message ) ).asObject0() ) ) ).asObject0() ) ).asObject0() ) ) );
                        }
                        frame_guard.setLineNumber( 1494 );
                        CONSIDER_THREADING(); continue;
                    }
                    else
                    {
                        PyTracebackObject *tb = _exception.getTraceback();
                        frame_guard.setLineNumber( tb->tb_lineno );
                        _exception.setTraceback( tb->tb_next );
                        tb->tb_next = NULL;

                        throw;
                    }
                }
                frame_guard.setLineNumber( 1496 );
                {
                    PyObjectTempKeeper1 call1;
                    DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( var_pafy_obj.asObject0(), const_str_plain_populate_from_playlist ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), var_vid_data.asObject0() ) ) );
                }
                frame_guard.setLineNumber( 1497 );
                {
                    PyObjectTempKeeper1 call1;
                    PyObjectTempKeeper0 make_dict1;
                    DECREASE_REFCOUNT( ( frame_guard.setLineNumber( 1497 ), call1.assign( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_SUBSCRIPT( var_playlist.asObject0(), const_unicode_plain_items ) ).asObject0(), const_str_plain_append ) ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( ( make_dict1.assign( var_pafy_obj.asObject0() ), frame_guard.setLineNumber( 1498 ), MAKE_DICT2( make_dict1.asObject0(), const_str_plain_pafy, var_vid_data.asObject0(), const_str_plain_playlist_meta ) ) ).asObject0() ) ) );
                }
                frame_guard.setLineNumber( 1499 );
                {
                    PyObjectTempKeeper0 call1;
                    DECREASE_REFCOUNT( ( call1.assign( par_callback.asObject0() ), CALL_FUNCTION_WITH_ARGS1( call1.asObject0(), PyObjectTemporary( BINARY_OPERATION_REMAINDER( const_unicode_digest_76963c1c2f8fc5ba73f2342e8ebc674a, PyObjectTemporary( LOOKUP_SUBSCRIPT( var_v.asObject0(), const_unicode_plain_title ) ).asObject0() ) ).asObject0() ) ) );
                }

                CONSIDER_THREADING();
            }
        }
        catch ( PythonException &_exception )
        {
#if PYTHON_VERSION >= 300
            if ( !_exception.hasTraceback() )
            {
                _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
            }
            else
            {
                _exception.addTraceback( frame_guard.getFrame0() );
            }
#else
            _at_lineno_1 = frame_guard.getLineNumber();
#endif

            _caught_1.save( _exception );

#if PYTHON_VERSION >= 300
            frame_guard.preserveExistingException();

            _exception.toExceptionHandler();
#endif
        }

        // Final block:
        tmp_for_loop_1__iter_value.del( true );
        tmp_for_loop_1__for_iterator.del( false );
#if PYTHON_VERSION < 300
        if ( _at_lineno_1 != 0 )
        {
           frame_guard.setLineNumber( _at_lineno_1 );
        }
#endif
        _caught_1.rethrow();
        // Final end
        frame_guard.setLineNumber( 1501 );
        return var_playlist.asObject1();
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = par_callback.updateLocalsDict( par_size.updateLocalsDict( par_signature.updateLocalsDict( par_gdata.updateLocalsDict( par_basic.updateLocalsDict( par_playlist_url.updateLocalsDict( var_e.updateLocalsDict( var_pafy_obj.updateLocalsDict( var_vid_data.updateLocalsDict( var_v.updateLocalsDict( var_playlist.updateLocalsDict( var_allinfo.updateLocalsDict( var_url.updateLocalsDict( var_playlist_id.updateLocalsDict( var_err.updateLocalsDict( var_m.updateLocalsDict( var_regx.updateLocalsDict( var_x.updateLocalsDict( PyDict_New() ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) );

        if ( frame_guard.getFrame0() == frame_function_27_get_playlist_of_module_pafy )
        {
           Py_DECREF( frame_function_27_get_playlist_of_module_pafy );
           frame_function_27_get_playlist_of_module_pafy = NULL;
        }

        _exception.toPython();
        return NULL;
    }
}
static PyObject *fparse_function_27_get_playlist_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, Py_ssize_t args_size, PyObject *kw )
{
    assert( kw == NULL || PyDict_Check( kw ) );

    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_size = kw ? PyDict_Size( kw ) : 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_found = 0;
    NUITKA_MAY_BE_UNUSED Py_ssize_t kw_only_found = 0;
    Py_ssize_t args_given = args_size;
    PyObject *_python_par_playlist_url = NULL;
    PyObject *_python_par_basic = NULL;
    PyObject *_python_par_gdata = NULL;
    PyObject *_python_par_signature = NULL;
    PyObject *_python_par_size = NULL;
    PyObject *_python_par_callback = NULL;
    // Copy given dictionary values to the the respective variables:
    if ( kw_size > 0 )
    {
        Py_ssize_t ppos = 0;
        PyObject *key, *value;

        while( PyDict_Next( kw, &ppos, &key, &value ) )
        {
#if PYTHON_VERSION < 300
            if (unlikely( !PyString_Check( key ) && !PyUnicode_Check( key ) ))
#else
            if (unlikely( !PyUnicode_Check( key ) ))
#endif
            {
                PyErr_Format( PyExc_TypeError, "get_playlist() keywords must be strings" );
                goto error_exit;
            }

            NUITKA_MAY_BE_UNUSED bool found = false;

            Py_INCREF( key );
            Py_INCREF( value );

            // Quick path, could be our value.
            if ( found == false && const_str_plain_playlist_url == key )
            {
                assert( _python_par_playlist_url == NULL );
                _python_par_playlist_url = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_basic == key )
            {
                assert( _python_par_basic == NULL );
                _python_par_basic = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_gdata == key )
            {
                assert( _python_par_gdata == NULL );
                _python_par_gdata = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_signature == key )
            {
                assert( _python_par_signature == NULL );
                _python_par_signature = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_size == key )
            {
                assert( _python_par_size == NULL );
                _python_par_size = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && const_str_plain_callback == key )
            {
                assert( _python_par_callback == NULL );
                _python_par_callback = value;

                found = true;
                kw_found += 1;
            }

            // Slow path, compare against all parameter names.
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_playlist_url, key ) )
            {
                assert( _python_par_playlist_url == NULL );
                _python_par_playlist_url = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_basic, key ) )
            {
                assert( _python_par_basic == NULL );
                _python_par_basic = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_gdata, key ) )
            {
                assert( _python_par_gdata == NULL );
                _python_par_gdata = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_signature, key ) )
            {
                assert( _python_par_signature == NULL );
                _python_par_signature = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_size, key ) )
            {
                assert( _python_par_size == NULL );
                _python_par_size = value;

                found = true;
                kw_found += 1;
            }
            if ( found == false && RICH_COMPARE_BOOL_EQ_PARAMETERS( const_str_plain_callback, key ) )
            {
                assert( _python_par_callback == NULL );
                _python_par_callback = value;

                found = true;
                kw_found += 1;
            }


            Py_DECREF( key );

            if ( found == false )
            {
               Py_DECREF( value );

               PyErr_Format(
                   PyExc_TypeError,
                   "get_playlist() got an unexpected keyword argument '%s'",
                   Nuitka_String_Check( key ) ? Nuitka_String_AsString( key ) : "<non-string>"
               );

               goto error_exit;
            }
        }

#if PYTHON_VERSION < 300
        assert( kw_found == kw_size );
        assert( kw_only_found == 0 );
#endif
    }

    // Check if too many arguments were given in case of non star args
    if (unlikely( args_given > 6 ))
    {
#if PYTHON_VERSION < 270
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_size );
#elif PYTHON_VERSION < 330
        ERROR_TOO_MANY_ARGUMENTS( self, args_given + kw_found );
#else
        ERROR_TOO_MANY_ARGUMENTS( self, args_given, kw_only_found );
#endif
        goto error_exit;
    }


    // Copy normal parameter values given as part of the args list to the respective variables:

    if (likely( 0 < args_given ))
    {
         if (unlikely( _python_par_playlist_url != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 0 );
             goto error_exit;
         }

        _python_par_playlist_url = INCREASE_REFCOUNT( args[ 0 ] );
    }
    else if ( _python_par_playlist_url == NULL )
    {
        if ( 0 + self->m_defaults_given >= 6  )
        {
            _python_par_playlist_url = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 0 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 1 < args_given ))
    {
         if (unlikely( _python_par_basic != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 1 );
             goto error_exit;
         }

        _python_par_basic = INCREASE_REFCOUNT( args[ 1 ] );
    }
    else if ( _python_par_basic == NULL )
    {
        if ( 1 + self->m_defaults_given >= 6  )
        {
            _python_par_basic = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 1 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 2 < args_given ))
    {
         if (unlikely( _python_par_gdata != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 2 );
             goto error_exit;
         }

        _python_par_gdata = INCREASE_REFCOUNT( args[ 2 ] );
    }
    else if ( _python_par_gdata == NULL )
    {
        if ( 2 + self->m_defaults_given >= 6  )
        {
            _python_par_gdata = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 2 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 3 < args_given ))
    {
         if (unlikely( _python_par_signature != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 3 );
             goto error_exit;
         }

        _python_par_signature = INCREASE_REFCOUNT( args[ 3 ] );
    }
    else if ( _python_par_signature == NULL )
    {
        if ( 3 + self->m_defaults_given >= 6  )
        {
            _python_par_signature = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 3 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 4 < args_given ))
    {
         if (unlikely( _python_par_size != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 4 );
             goto error_exit;
         }

        _python_par_size = INCREASE_REFCOUNT( args[ 4 ] );
    }
    else if ( _python_par_size == NULL )
    {
        if ( 4 + self->m_defaults_given >= 6  )
        {
            _python_par_size = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 4 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }
    if (likely( 5 < args_given ))
    {
         if (unlikely( _python_par_callback != NULL ))
         {
             ERROR_MULTIPLE_VALUES( self, 5 );
             goto error_exit;
         }

        _python_par_callback = INCREASE_REFCOUNT( args[ 5 ] );
    }
    else if ( _python_par_callback == NULL )
    {
        if ( 5 + self->m_defaults_given >= 6  )
        {
            _python_par_callback = INCREASE_REFCOUNT( PyTuple_GET_ITEM( self->m_defaults, self->m_defaults_given + 5 - 6 ) );
        }
#if PYTHON_VERSION < 330
        else
        {
#if PYTHON_VERSION < 270
            ERROR_TOO_FEW_ARGUMENTS( self, kw_size, args_given + kw_found );
#elif PYTHON_VERSION < 300
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found );
#else
            ERROR_TOO_FEW_ARGUMENTS( self, args_given + kw_found - kw_only_found );
#endif

            goto error_exit;
        }
#endif
    }

#if PYTHON_VERSION >= 330
    if (unlikely( _python_par_playlist_url == NULL || _python_par_basic == NULL || _python_par_gdata == NULL || _python_par_signature == NULL || _python_par_size == NULL || _python_par_callback == NULL ))
    {
        PyObject *values[] = { _python_par_playlist_url, _python_par_basic, _python_par_gdata, _python_par_signature, _python_par_size, _python_par_callback };
        ERROR_TOO_FEW_ARGUMENTS( self, values );

        goto error_exit;
    }
#endif


    return impl_function_27_get_playlist_of_module_pafy( self, _python_par_playlist_url, _python_par_basic, _python_par_gdata, _python_par_signature, _python_par_size, _python_par_callback );

error_exit:;

    Py_XDECREF( _python_par_playlist_url );
    Py_XDECREF( _python_par_basic );
    Py_XDECREF( _python_par_gdata );
    Py_XDECREF( _python_par_signature );
    Py_XDECREF( _python_par_size );
    Py_XDECREF( _python_par_callback );

    return NULL;
}

static PyObject *dparse_function_27_get_playlist_of_module_pafy( Nuitka_FunctionObject *self, PyObject **args, int size )
{
    if ( size == 6 )
    {
        return impl_function_27_get_playlist_of_module_pafy( self, INCREASE_REFCOUNT( args[ 0 ] ), INCREASE_REFCOUNT( args[ 1 ] ), INCREASE_REFCOUNT( args[ 2 ] ), INCREASE_REFCOUNT( args[ 3 ] ), INCREASE_REFCOUNT( args[ 4 ] ), INCREASE_REFCOUNT( args[ 5 ] ) );
    }
    else
    {
        PyObject *result = fparse_function_27_get_playlist_of_module_pafy( self, args, size, NULL );
        return result;
    }

}




static PyObject *MAKE_FUNCTION_function_10__extract_dash_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_10__extract_dash_of_module_pafy,
        dparse_function_10__extract_dash_of_module_pafy,
        const_str_plain__extract_dash,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_7cb193ebaf24ec80f622b5958cea3759,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_3dd38aeb93ab9d681a65ade3941bc486
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_10_audiostreams_of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_10_audiostreams_of_class_25_Pafy_of_module_pafy,
        dparse_function_10_audiostreams_of_class_25_Pafy_of_module_pafy,
        const_str_plain_audiostreams,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_6593b6c1fb4d8e4c97ac0d1e22f7db9d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_63ce6f033277635ceeb7d17535a75f39
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_10_extension_of_class_24_Stream_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_10_extension_of_class_24_Stream_of_module_pafy,
        dparse_function_10_extension_of_class_24_Stream_of_module_pafy,
        const_str_plain_extension,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_b94f06396a2fe15609cdec8a71ef01e2,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_71d8ffd78c0ffd033e6162d5ff3ab0cd
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_11__extract_function_from_js_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_11__extract_function_from_js_of_module_pafy,
        dparse_function_11__extract_function_from_js_of_module_pafy,
        const_str_plain__extract_function_from_js,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_09d0cddabdd37e86906b590b32e11d45,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_b2b99df381da8f8cc02cb22e36496c8a
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_11_bitrate_of_class_24_Stream_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_11_bitrate_of_class_24_Stream_of_module_pafy,
        dparse_function_11_bitrate_of_class_24_Stream_of_module_pafy,
        const_str_plain_bitrate,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_8319a56aa58edc34e2c3125d2061dbaf,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_04f3796207412b1bc3e67005abdd892e
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_11_videostreams_of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_11_videostreams_of_class_25_Pafy_of_module_pafy,
        dparse_function_11_videostreams_of_class_25_Pafy_of_module_pafy,
        const_str_plain_videostreams,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_0b6ced46e3523c5a97ef5aebbddc74ae,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_df791f40f7860b0f5b472b8dd34c5bad
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_12__extract_dictfunc_from_js_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_12__extract_dictfunc_from_js_of_module_pafy,
        dparse_function_12__extract_dictfunc_from_js_of_module_pafy,
        const_str_plain__extract_dictfunc_from_js,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_5b17f09741e045a6402e2a24ea4056b0,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_d192962bb475d33d5f5f5bb915850a75
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_12_mediatype_of_class_24_Stream_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_12_mediatype_of_class_24_Stream_of_module_pafy,
        dparse_function_12_mediatype_of_class_24_Stream_of_module_pafy,
        const_str_plain_mediatype,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_946e467edaa063c6819f564f8cb5f251,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_e882d4a7c0b13c150ee5c4ddb29e7c92
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_12_oggstreams_of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_12_oggstreams_of_class_25_Pafy_of_module_pafy,
        dparse_function_12_oggstreams_of_class_25_Pafy_of_module_pafy,
        const_str_plain_oggstreams,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_25e524471cd3c1af9232dccb2bfc1811,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_9c26a4367f51bcb9c1b783ef41427168
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_13__get_mainfunc_from_js_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_13__get_mainfunc_from_js_of_module_pafy,
        dparse_function_13__get_mainfunc_from_js_of_module_pafy,
        const_str_plain__get_mainfunc_from_js,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_0abf78992c1e9cc7e98abedfa5b42337,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_c8f8175ea070977f91d1f14406167345
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_13_m4astreams_of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_13_m4astreams_of_class_25_Pafy_of_module_pafy,
        dparse_function_13_m4astreams_of_class_25_Pafy_of_module_pafy,
        const_str_plain_m4astreams,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_f50fccd5da242adbf5a836e2c85ed5c0,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_75b194e2afe12c4fe40fa1fbddd2811b
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_13_notes_of_class_24_Stream_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_13_notes_of_class_24_Stream_of_module_pafy,
        dparse_function_13_notes_of_class_24_Stream_of_module_pafy,
        const_str_plain_notes,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_66762f411de90c967944019fb833e447,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_8384f0f8cd6acd3b966a4c2f28e1af04
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_14__get_other_funcs_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_14__get_other_funcs_of_module_pafy,
        dparse_function_14__get_other_funcs_of_module_pafy,
        const_str_plain__get_other_funcs,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_fe9d79de987ea30fd6694d89dcd3aaf3,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_d4fc6bcd4d1e221db3028858e0742a98
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_14_filename_of_class_24_Stream_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_14_filename_of_class_24_Stream_of_module_pafy,
        dparse_function_14_filename_of_class_24_Stream_of_module_pafy,
        const_str_plain_filename,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_f4b6c1e1f5476bb8649ee2269c81b4bd,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_b61cbaa0bb789ded5d21164b884a6651
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_14_title_of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_14_title_of_class_25_Pafy_of_module_pafy,
        dparse_function_14_title_of_class_25_Pafy_of_module_pafy,
        const_str_plain_title,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_8cbd3f31dfc2c95623f97a10f3d48844,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_c11244917ee204011f7b1b64b52b5965
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_15__getval_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_15__getval_of_module_pafy,
        dparse_function_15__getval_of_module_pafy,
        const_str_plain__getval,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_565be137c7c7021fe79b985b8d163b22,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_9358b034fdcbd96d1037f8e9c2fe3dce
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_15_author_of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_15_author_of_class_25_Pafy_of_module_pafy,
        dparse_function_15_author_of_class_25_Pafy_of_module_pafy,
        const_str_plain_author,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_affe94173e4b1fd7ae3e6ba0150bf788,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_104b01462b75fa90c46d2db98a8720ec
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_15_url_of_class_24_Stream_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_15_url_of_class_24_Stream_of_module_pafy,
        dparse_function_15_url_of_class_24_Stream_of_module_pafy,
        const_str_plain_url,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_40f1373d81518a8ac4038914067f34aa,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_fd993c92a614f0edab4c6fd0a58a0f24
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_16__get_func_from_call_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_16__get_func_from_call_of_module_pafy,
        dparse_function_16__get_func_from_call_of_module_pafy,
        const_str_plain__get_func_from_call,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_6830bd78600774c047ae76e9bd7d31a9,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_7d72c800b4d53589ee61316ef2200476
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_16_rating_of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_16_rating_of_class_25_Pafy_of_module_pafy,
        dparse_function_16_rating_of_class_25_Pafy_of_module_pafy,
        const_str_plain_rating,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_7aa92d8d55da547f40ee0cd78c3a639f,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_3709492c372199e5c02187d7b15ae786
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_16_url_https_of_class_24_Stream_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_16_url_https_of_class_24_Stream_of_module_pafy,
        dparse_function_16_url_https_of_class_24_Stream_of_module_pafy,
        const_str_plain_url_https,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_77533b4dc641272de3bb963b8897139b,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_c664d7ead7ec5a67e2afc507bbc1f979
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_17___repr___of_class_24_Stream_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_17___repr___of_class_24_Stream_of_module_pafy,
        dparse_function_17___repr___of_class_24_Stream_of_module_pafy,
        const_str_plain___repr__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_047e582502d6455582a5e32bd4f02994,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_75f4b81f8f85464392acfd06eecd5d8d
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_17__solve_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_17__solve_of_module_pafy,
        dparse_function_17__solve_of_module_pafy,
        const_str_plain__solve,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_b471b291248acff88be6ed51506820cd,
        INCREASE_REFCOUNT( const_tuple_true_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_cc36bda33120d77129716f6c3918e213
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_17_length_of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_17_length_of_class_25_Pafy_of_module_pafy,
        dparse_function_17_length_of_class_25_Pafy_of_module_pafy,
        const_str_plain_length,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_8c53654b59938174e04cb5cdd119547f,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_e1748ad7004fbc081584500a3e4b47cd
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_18__decodesig_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_18__decodesig_of_module_pafy,
        dparse_function_18__decodesig_of_module_pafy,
        const_str_plain__decodesig,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_fc00b01b7068ab7c96b6be530e709ada,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_313fb5bf44d9b8578811b088f578bc6b
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_18_get_filesize_of_class_24_Stream_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_18_get_filesize_of_class_24_Stream_of_module_pafy,
        dparse_function_18_get_filesize_of_class_24_Stream_of_module_pafy,
        const_str_plain_get_filesize,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_6c19f761c76775bbd529b58ee0468ca4,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_06a5a7cc968fe511217537bf11d7ba61
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_18_viewcount_of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_18_viewcount_of_class_25_Pafy_of_module_pafy,
        dparse_function_18_viewcount_of_class_25_Pafy_of_module_pafy,
        const_str_plain_viewcount,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_495daa278b1461c24f8cc1829d057191,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_69bf034b822ecb937047f79cef0e9317
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_19_bigthumb_of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_19_bigthumb_of_class_25_Pafy_of_module_pafy,
        dparse_function_19_bigthumb_of_class_25_Pafy_of_module_pafy,
        const_str_plain_bigthumb,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_07b549483df582ee011cdf00afaa3ec2,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_ebef67c9899a5e6d93d2d5ee9befa997
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_19_cancel_of_class_24_Stream_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_19_cancel_of_class_24_Stream_of_module_pafy,
        dparse_function_19_cancel_of_class_24_Stream_of_module_pafy,
        const_str_plain_cancel,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_30d622b60c4c70850224c91efa9c6602,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_6df3939c7eba772b4bcc3f6a58a8b05e
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_19_remux_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_19_remux_of_module_pafy,
        dparse_function_19_remux_of_module_pafy,
        const_str_plain_remux,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_0b6eb5c7e170fe6c74849a0bc39f9ab5,
        INCREASE_REFCOUNT( const_tuple_false_unicode_plain_ffmpeg_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_de0a665dd24867566b851c13c4924e67
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1___init___of_class_24_Stream_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1___init___of_class_24_Stream_of_module_pafy,
        dparse_function_1___init___of_class_24_Stream_of_module_pafy,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_c2bfd1247b0b1d84d0936ac7b4fd9f1c,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_a25674c624942f18513f5b08c1781b69
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1__get_lst_of_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1__get_lst_of_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy,
        dparse_function_1__get_lst_of_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy,
        const_str_plain__get_lst,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_706336f3e522317d1cd39c0394878bb1,
        defaults,
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_5b8477049f236295808cebdbe80de8b7
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1__sortkey_of_function_30_getbest_of_class_25_Pafy_of_module_pafy( PyObjectSharedLocalVariable &closure_ftypestrict, PyObjectSharedLocalVariable &closure_preftype )
{
    struct _context_function_1__sortkey_of_function_30_getbest_of_class_25_Pafy_of_module_pafy_t *_python_context = new _context_function_1__sortkey_of_function_30_getbest_of_class_25_Pafy_of_module_pafy_t;

    // Copy the parameter default values and closure values over.
    _python_context->closure_ftypestrict.shareWith( closure_ftypestrict );
    _python_context->closure_preftype.shareWith( closure_preftype );

    PyObject *result = Nuitka_Function_New(
        fparse_function_1__sortkey_of_function_30_getbest_of_class_25_Pafy_of_module_pafy,
        dparse_function_1__sortkey_of_function_30_getbest_of_class_25_Pafy_of_module_pafy,
        const_str_plain__sortkey,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_2062dcd89a32e21ec9366b9868d01493,
        INCREASE_REFCOUNT( const_tuple_int_0_int_0_int_0_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_278cf2bd2555e0a1177bcce108b5f5f5,
        _python_context,
        _context_function_1__sortkey_of_function_30_getbest_of_class_25_Pafy_of_module_pafy_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1__sortkey_of_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy( PyObjectSharedLocalVariable &closure_ftypestrict, PyObjectSharedLocalVariable &closure_preftype )
{
    struct _context_function_1__sortkey_of_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy_t *_python_context = new _context_function_1__sortkey_of_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy_t;

    // Copy the parameter default values and closure values over.
    _python_context->closure_ftypestrict.shareWith( closure_ftypestrict );
    _python_context->closure_preftype.shareWith( closure_preftype );

    PyObject *result = Nuitka_Function_New(
        fparse_function_1__sortkey_of_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy,
        dparse_function_1__sortkey_of_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy,
        const_str_plain__sortkey,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_1d97a50c7acd860a2d15f60fe4075ea2,
        INCREASE_REFCOUNT( const_tuple_int_0_int_0_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_c35653d583c0a2d357d98d4154b0d8f2,
        _python_context,
        _context_function_1__sortkey_of_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy_destructor
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_1_parseqs_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_1_parseqs_of_module_pafy,
        dparse_function_1_parseqs_of_module_pafy,
        const_str_plain_parseqs,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_f26c5e04c3107c237db31296a20238f4,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_addfa1213e5f0cfc956a09723484d93a
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_20_bigthumbhd_of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_20_bigthumbhd_of_class_25_Pafy_of_module_pafy,
        dparse_function_20_bigthumbhd_of_class_25_Pafy_of_module_pafy,
        const_str_plain_bigthumbhd,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_a9288b3319ecd04179dccddeff91b460,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_1fb494480439df605f7e6b0804b882c4
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_20_fetch_cached_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_20_fetch_cached_of_module_pafy,
        dparse_function_20_fetch_cached_of_module_pafy,
        const_str_plain_fetch_cached,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_612fee5b9e8f7dab775f6eff8b7e789b,
        INCREASE_REFCOUNT( const_tuple_none_unicode_empty_unicode_empty_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_bd21cff03cc4d4375a413864cb2785c9
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_21_download_of_class_24_Stream_of_module_pafy( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_21_download_of_class_24_Stream_of_module_pafy,
        dparse_function_21_download_of_class_24_Stream_of_module_pafy,
        const_str_plain_download,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_053a56db5c036b19e8af6098f11e1912,
        defaults,
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_08f9a3265cd7a9159d996f8b516cce3c
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_21_prune_files_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_21_prune_files_of_module_pafy,
        dparse_function_21_prune_files_of_module_pafy,
        const_str_plain_prune_files,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_287efb23df4af440d839c231183af174,
        INCREASE_REFCOUNT( const_tuple_unicode_empty_int_pos_1209600_int_pos_4_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_c32bc310619f11215d929d38a34714a7
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_21_thumb_of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_21_thumb_of_class_25_Pafy_of_module_pafy,
        dparse_function_21_thumb_of_class_25_Pafy_of_module_pafy,
        const_str_plain_thumb,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_6a18b06a514e90bfce22327233d66cb9,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_abda70a2df718aa5cd817fe8527c4d7f
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_22_duration_of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_22_duration_of_class_25_Pafy_of_module_pafy,
        dparse_function_22_duration_of_class_25_Pafy_of_module_pafy,
        const_str_plain_duration,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_0fb756fbe51415e78acb1b309c5e69c5,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_1d905c692be644a4dfa2c5bad2893abc
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_22_get_js_sm_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_22_get_js_sm_of_module_pafy,
        dparse_function_22_get_js_sm_of_module_pafy,
        const_str_plain_get_js_sm,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_f3805e0e466be28e2dc08b054efbc620,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_52068e131b57ca91b0e914d044422cd4
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_23__make_url_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_23__make_url_of_module_pafy,
        dparse_function_23__make_url_of_module_pafy,
        const_str_plain__make_url,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_8db3e84453016dfba6ff578b42f804db,
        INCREASE_REFCOUNT( const_tuple_true_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_0364efc689c6a1544db96374ab431b81
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_23_keywords_of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_23_keywords_of_class_25_Pafy_of_module_pafy,
        dparse_function_23_keywords_of_class_25_Pafy_of_module_pafy,
        const_str_plain_keywords,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_ef7891e804eeda9439fcd41b8aa3898a,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_604ff8a37d6fcc0ab5e4fc4e7dbc421e
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_24_category_of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_24_category_of_class_25_Pafy_of_module_pafy,
        dparse_function_24_category_of_class_25_Pafy_of_module_pafy,
        const_str_plain_category,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_94a7cb9c078814325a71a05f9260b71f,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_ffe332ac547d3deb9d4cf7627dcc9710
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_25_description_of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_25_description_of_class_25_Pafy_of_module_pafy,
        dparse_function_25_description_of_class_25_Pafy_of_module_pafy,
        const_str_plain_description,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_86696a94989df677f72ea450eb0e1328,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_bce066809f852142f98bbf9a6f9d72fc
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_26_username_of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_26_username_of_class_25_Pafy_of_module_pafy,
        dparse_function_26_username_of_class_25_Pafy_of_module_pafy,
        const_str_plain_username,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_25c32d025f7d62602554888b66426ebf,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_e78ff9f486bfcf07ff768c90c36d027b
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_27_get_playlist_of_module_pafy( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_27_get_playlist_of_module_pafy,
        dparse_function_27_get_playlist_of_module_pafy,
        const_str_plain_get_playlist,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_eae174327bbe3b1ca18ffaf2c80fb4e1,
        defaults,
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_e04aa775d95eb28f0e12930a0f453083
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_27_published_of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_27_published_of_class_25_Pafy_of_module_pafy,
        dparse_function_27_published_of_class_25_Pafy_of_module_pafy,
        const_str_plain_published,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_3d735160386f0e7113d9b3c4546c9a98,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_8aaabf765704d17b900da324b4825e9f
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_28_likes_of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_28_likes_of_class_25_Pafy_of_module_pafy,
        dparse_function_28_likes_of_class_25_Pafy_of_module_pafy,
        const_str_plain_likes,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_80a8f492e18d0b5d25d5b428de79ed15,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_ebb6620465b550ba98ca18432f94fbce
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_29_dislikes_of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_29_dislikes_of_class_25_Pafy_of_module_pafy,
        dparse_function_29_dislikes_of_class_25_Pafy_of_module_pafy,
        const_str_plain_dislikes,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_e59f43346b223ab379cde15a5adc36e0,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_bf258635411806eb09c362d89e0e2b9c
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2___init___of_class_25_Pafy_of_module_pafy( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2___init___of_class_25_Pafy_of_module_pafy,
        dparse_function_2___init___of_class_25_Pafy_of_module_pafy,
        const_str_plain___init__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_cd6e06b85453deac99050580d9b164d2,
        defaults,
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_a25674c624942f18513f5b08c1781b69
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_fetch_decode_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_fetch_decode_of_module_pafy,
        dparse_function_2_fetch_decode_of_module_pafy,
        const_str_plain_fetch_decode,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_a2ef7633bcd3528b04a3f0529b68540d,
        INCREASE_REFCOUNT( const_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_6187cc08775e1e671a72cfbd352397e0
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_2_generate_filename_of_class_24_Stream_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_2_generate_filename_of_class_24_Stream_of_module_pafy,
        dparse_function_2_generate_filename_of_class_24_Stream_of_module_pafy,
        const_str_plain_generate_filename,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_d1713aebbc773d50e312e3a46bb2e260,
        INCREASE_REFCOUNT( const_tuple_false_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_0dac50e8b2f91f204d3daf364396bae1
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_30_getbest_of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_30_getbest_of_class_25_Pafy_of_module_pafy,
        dparse_function_30_getbest_of_class_25_Pafy_of_module_pafy,
        const_str_plain_getbest,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_1100575dd3f3fc08b0feb9de5001b1b0,
        INCREASE_REFCOUNT( const_tuple_unicode_plain_any_true_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_d1037ed5840afffcae7ea30411570c8b
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy,
        dparse_function_31_getbestaudio_of_class_25_Pafy_of_module_pafy,
        const_str_plain_getbestaudio,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_4a71a26505a719ce420161f519120585,
        INCREASE_REFCOUNT( const_tuple_unicode_plain_any_true_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_f796f5cff8f0567fce01b69afbf0a80a
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_32_populate_from_playlist_of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_32_populate_from_playlist_of_class_25_Pafy_of_module_pafy,
        dparse_function_32_populate_from_playlist_of_class_25_Pafy_of_module_pafy,
        const_str_plain_populate_from_playlist,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_1dd89844783769b6a187d4224be4d1b8,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_25fd3a772eb983937a8ae6350a48e04e
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_fetch_basic_of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_fetch_basic_of_class_25_Pafy_of_module_pafy,
        dparse_function_3_fetch_basic_of_class_25_Pafy_of_module_pafy,
        const_str_plain_fetch_basic,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_228e7202596cfd9593ff392680ba7ac9,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_72c8f8864899c362d876e625142d901b
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_3_rawbitrate_of_class_24_Stream_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_3_rawbitrate_of_class_24_Stream_of_module_pafy,
        dparse_function_3_rawbitrate_of_class_24_Stream_of_module_pafy,
        const_str_plain_rawbitrate,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_71373a75234a156829dafd821bcd09e9,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_bde12ea71fc088c14f7da5c7c4c946c1
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy,
        dparse_function_4__fetch_basic_of_class_25_Pafy_of_module_pafy,
        const_str_plain__fetch_basic,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_bb9ca733229740f67b992c2d44125027,
        INCREASE_REFCOUNT( const_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_1bb325255b0706943dc6ed00751972ad
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_new_of_module_pafy( PyObject *defaults )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_new_of_module_pafy,
        dparse_function_4_new_of_module_pafy,
        const_str_plain_new,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_3cba3e365665caf82af8c76715344ca1,
        defaults,
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_eedf513113806e1218957e39c88296e4
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_4_threed_of_class_24_Stream_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_4_threed_of_class_24_Stream_of_module_pafy,
        dparse_function_4_threed_of_class_24_Stream_of_module_pafy,
        const_str_plain_threed,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_12567be348a546d75640659584e42f26,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_d491349a3e65c73c602fc423e39d8e86
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5__fetch_gdata_of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5__fetch_gdata_of_class_25_Pafy_of_module_pafy,
        dparse_function_5__fetch_gdata_of_class_25_Pafy_of_module_pafy,
        const_str_plain__fetch_gdata,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_0f9bb8c3165f6a9c9841c63439cb59b4,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_ef326ec6562d8d753c78ed77f1db1cdd
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_get_video_info_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_get_video_info_of_module_pafy,
        dparse_function_5_get_video_info_of_module_pafy,
        const_str_plain_get_video_info,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_5184fe80f6ccc79fda56c0abfdafc682,
        INCREASE_REFCOUNT( const_tuple_none_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_b45339a637e099df9b55d935b64b0273
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_5_itag_of_class_24_Stream_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_5_itag_of_class_24_Stream_of_module_pafy,
        dparse_function_5_itag_of_class_24_Stream_of_module_pafy,
        const_str_plain_itag,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_a3e482e92fa2da59c98fa6d238ce895d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_9757186aefb11e8833574a086aed52b6
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6__process_streams_of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6__process_streams_of_class_25_Pafy_of_module_pafy,
        dparse_function_6__process_streams_of_class_25_Pafy_of_module_pafy,
        const_str_plain__process_streams,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_c0d156bb8c4b4b0bd0e510d06221a15e,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_a23541b3fb0db83caf2cbe6c20f670e1
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_get_video_gdata_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6_get_video_gdata_of_module_pafy,
        dparse_function_6_get_video_gdata_of_module_pafy,
        const_str_plain_get_video_gdata,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_d5698bc2eec9104987d0e0d2b2a14047,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_9803122a0cd2d13cda62027a8a90baf3
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_6_resolution_of_class_24_Stream_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_6_resolution_of_class_24_Stream_of_module_pafy,
        dparse_function_6_resolution_of_class_24_Stream_of_module_pafy,
        const_str_plain_resolution,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_26e04fd0fee63dd0613ff2269d44d109,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_68ae6046baa5dddf7323a0aa80662546
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7___repr___of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7___repr___of_class_25_Pafy_of_module_pafy,
        dparse_function_7___repr___of_class_25_Pafy_of_module_pafy,
        const_str_plain___repr__,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_ae12d519819a20d18748f238328fc27c,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_c157d239a3c6bfc99687168af1145dda
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7_dimensions_of_class_24_Stream_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7_dimensions_of_class_24_Stream_of_module_pafy,
        dparse_function_7_dimensions_of_class_24_Stream_of_module_pafy,
        const_str_plain_dimensions,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_cf42f506a1e31699a5765b00deec4c8a,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_b38750974617920fb712cc9bacd70b43
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_7_extract_video_id_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_7_extract_video_id_of_module_pafy,
        dparse_function_7_extract_video_id_of_module_pafy,
        const_str_plain_extract_video_id,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_6a784181c0d10f43c4f7e96b2353eeb4,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_13a6e1c5bfa227c0267fa234a7b1d11e
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_8_quality_of_class_24_Stream_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_8_quality_of_class_24_Stream_of_module_pafy,
        dparse_function_8_quality_of_class_24_Stream_of_module_pafy,
        const_str_plain_quality,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_aba313d0f004f6d625cf650e5b15f408,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_45fee633db2e19b6bbdd43a501f72ff4
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_8_streams_of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_8_streams_of_class_25_Pafy_of_module_pafy,
        dparse_function_8_streams_of_class_25_Pafy_of_module_pafy,
        const_str_plain_streams,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_730829a63523e9c92fd9770ca4193c8c,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_57f660e6feb8ab9d5a7f8c9e91f8ba02
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_9__extract_smap_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_9__extract_smap_of_module_pafy,
        dparse_function_9__extract_smap_of_module_pafy,
        const_str_plain__extract_smap,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_017b54fa581da3bf70e07e4d9c6904b6,
        INCREASE_REFCOUNT( const_tuple_true_tuple ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_2c8c1b4969da18188e1aadde50938d22
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_9_allstreams_of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_9_allstreams_of_class_25_Pafy_of_module_pafy,
        dparse_function_9_allstreams_of_class_25_Pafy_of_module_pafy,
        const_str_plain_allstreams,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_6e64de72f3c57268174ea56ffc56516b,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_a0019f4a7b9fbc0e853bd4a6af809aaa
    );

    return result;
}



static PyObject *MAKE_FUNCTION_function_9_title_of_class_24_Stream_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_function_9_title_of_class_24_Stream_of_module_pafy,
        dparse_function_9_title_of_class_24_Stream_of_module_pafy,
        const_str_plain_title,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_d3da0c9306d18bcb2a0fc29d4b4a43b5,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        const_unicode_digest_c11244917ee204011f7b1b64b52b5965
    );

    return result;
}



static PyObject *MAKE_FUNCTION_lambda_14_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_lambda_14_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy,
        dparse_lambda_14_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_1cb1a338581f8483dce879f066a4e223,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_lambda_15_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_lambda_15_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy,
        dparse_lambda_15_lambda_of_function_6__process_streams_of_class_25_Pafy_of_module_pafy,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_87766eb99d641df0a48154ef98771619,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_lambda_1_lambda_of_class_25_Pafy_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_lambda_1_lambda_of_class_25_Pafy_of_module_pafy,
        dparse_lambda_1_lambda_of_class_25_Pafy_of_module_pafy,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_4980847ed1ec44d9a6fc6d18dab3f146,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_lambda_1_lambda_of_function_21_prune_files_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_lambda_1_lambda_of_function_21_prune_files_of_module_pafy,
        dparse_lambda_1_lambda_of_function_21_prune_files_of_module_pafy,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_8b7c8ab80bef85352fb232b12410f1c8,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_lambda_20_lambda_of_class_24_Stream_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_lambda_20_lambda_of_class_24_Stream_of_module_pafy,
        dparse_lambda_20_lambda_of_class_24_Stream_of_module_pafy,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_038ffea8278564f4ddeba61560b7108d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_lambda_26_lambda_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_lambda_26_lambda_of_module_pafy,
        dparse_lambda_26_lambda_of_module_pafy,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_6b692cb3851c82297b431f463510e9bb,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        Py_None
    );

    return result;
}



static PyObject *MAKE_FUNCTION_lambda_3_lambda_of_module_pafy(  )
{
    PyObject *result = Nuitka_Function_New(
        fparse_lambda_3_lambda_of_module_pafy,
        dparse_lambda_3_lambda_of_module_pafy,
        const_str_angle_lambda,
#if PYTHON_VERSION >= 330
        NULL,
#endif
        codeobj_fc8d1736ec3821fc9deb5895784e614d,
        INCREASE_REFCOUNT( Py_None ),
#if PYTHON_VERSION >= 300
        INCREASE_REFCOUNT( Py_None ),
        NULL,
#endif
        module_pafy,
        Py_None
    );

    return result;
}


#if PYTHON_VERSION >= 300
static struct PyModuleDef mdef_pafy =
{
    PyModuleDef_HEAD_INIT,
    "pafy",   /* m_name */
    NULL,                /* m_doc */
    -1,                  /* m_size */
    NULL,                /* m_methods */
    NULL,                /* m_reload */
    NULL,                /* m_traverse */
    NULL,                /* m_clear */
    NULL,                /* m_free */
  };
#endif

#define _MODULE_UNFREEZER 0

#if _MODULE_UNFREEZER

#include "nuitka/unfreezing.hpp"

// Table for lookup to find "frozen" modules or DLLs, i.e. the ones included in
// or along this binary.
static struct Nuitka_MetaPathBasedLoaderEntry meta_path_loader_entries[] =
{

    { NULL, NULL, 0 }
};

#endif

// The exported interface to CPython. On import of the module, this function
// gets called. It has to have an exact function name, in cases it's a shared
// library export. This is hidden behind the MOD_INIT_DECL.

MOD_INIT_DECL( pafy )
{

#if defined(_NUITKA_EXE) || PYTHON_VERSION >= 300
    static bool _init_done = false;

    // Packages can be imported recursively in deep executables.
    if ( _init_done )
    {
        return MOD_RETURN_VALUE( module_pafy );
    }
    else
    {
        _init_done = true;
    }
#endif

#ifdef _NUITKA_MODULE
    // In case of a stand alone extension module, need to call initialization
    // the init here because that's the first and only time we are going to get
    // called here.

    // Initialize the constant values used.
    _initBuiltinModule();
    _initConstants();

    // Initialize the compiled types of Nuitka.
    PyType_Ready( &Nuitka_Generator_Type );
    PyType_Ready( &Nuitka_Function_Type );
    PyType_Ready( &Nuitka_Method_Type );
    PyType_Ready( &Nuitka_Frame_Type );
#if PYTHON_VERSION < 300
    initSlotCompare();
#endif

    patchBuiltinModule();
    patchTypeComparison();

#endif

#if _MODULE_UNFREEZER
    registerMetaPathBasedUnfreezer( meta_path_loader_entries );
#endif

    // puts( "in initpafy" );

    // Create the module object first. There are no methods initially, all are
    // added dynamically in actual code only.  Also no "__doc__" is initially
    // set at this time, as it could not contain NUL characters this way, they
    // are instead set in early module code.  No "self" for modules, we have no
    // use for it.
#if PYTHON_VERSION < 300
    module_pafy = Py_InitModule4(
        "pafy",       // Module Name
        NULL,                    // No methods initially, all are added
                                 // dynamically in actual module code only.
        NULL,                    // No __doc__ is initially set, as it could
                                 // not contain NUL this way, added early in
                                 // actual code.
        NULL,                    // No self for modules, we don't use it.
        PYTHON_API_VERSION
    );
#else
    module_pafy = PyModule_Create( &mdef_pafy );
#endif

    moduledict_pafy = (PyDictObject *)((PyModuleObject *)module_pafy)->md_dict;

    assertObject( module_pafy );

// Seems to work for Python2.7 out of the box, but for Python3, the module
// doesn't automatically enter "sys.modules", so do it manually.
#if PYTHON_VERSION >= 300
    {
        int r = PyObject_SetItem( PySys_GetObject( (char *)"modules" ), const_str_plain_pafy, module_pafy );

        assert( r != -1 );
    }
#endif

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    PyObject *module_dict = PyModule_GetDict( module_pafy );

    if ( PyDict_GetItem( module_dict, const_str_plain___builtins__ ) == NULL )
    {
        PyObject *value = ( PyObject *)module_builtin;

#ifdef _NUITKA_EXE
        if ( module_pafy != module___main__ )
        {
#endif
            value = PyModule_GetDict( value );
#ifdef _NUITKA_EXE
        }
#endif

#ifndef __NUITKA_NO_ASSERT__
        int res =
#endif
            PyDict_SetItem( module_dict, const_str_plain___builtins__, value );

        assert( res == 0 );
    }

#if PYTHON_VERSION >= 330
#if _MODULE_UNFREEZER
    PyDict_SetItem( module_dict, const_str_plain___loader__, metapath_based_loader );
#else
    PyDict_SetItem( module_dict, const_str_plain___loader__, Py_None );
#endif
#endif

    // Temp variables if any
    PyObjectTempVariable tmp_tuple_unpack_1__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_1__element_1;
    PyObjectTempVariable tmp_tuple_unpack_1__element_2;
    PyObjectTempVariable tmp_tuple_unpack_2__source_iter;
    PyObjectTempVariable tmp_tuple_unpack_2__element_1;
    PyObjectTempVariable tmp_tuple_unpack_2__element_2;

    // Module code
    UPDATE_STRING_DICT0( moduledict_pafy, (Nuitka_StringObject *)const_str_plain___doc__, const_unicode_digest_a6efcc650f6c997a26078a17ca9c9dde );
    UPDATE_STRING_DICT0( moduledict_pafy, (Nuitka_StringObject *)const_str_plain___file__, const_str_digest_988513a71265a9be37fdf4d168e57dd9 );
    PyFrameObject *frame_module_pafy = MAKE_FRAME( codeobj_06ea209cb8b8e2b80b96647cb46472ce, module_pafy );

    FrameGuard frame_guard( frame_module_pafy );
    try
    {
        assert( Py_REFCNT( frame_module_pafy ) == 2 ); // Frame stack
        frame_guard.setLineNumber( 28 );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_unicode_literals, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( const_str_plain___future__, ((PyModuleObject *)module_pafy)->md_dict, ((PyModuleObject *)module_pafy)->md_dict, const_list_str_plain_unicode_literals_list, const_int_neg_1 ) ).asObject0(), const_str_plain_unicode_literals ) );
        UPDATE_STRING_DICT0( moduledict_pafy, (Nuitka_StringObject *)const_str_plain___version__, const_unicode_digest_fa0ea8922cbb02ccabc6adf065cb2f77 );
        UPDATE_STRING_DICT0( moduledict_pafy, (Nuitka_StringObject *)const_str_plain___author__, const_unicode_plain_nagev );
        UPDATE_STRING_DICT0( moduledict_pafy, (Nuitka_StringObject *)const_str_plain___license__, const_unicode_plain_GPLv3 );
        frame_guard.setLineNumber( 35 );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_re, IMPORT_MODULE( const_str_plain_re, ((PyModuleObject *)module_pafy)->md_dict, ((PyModuleObject *)module_pafy)->md_dict, Py_None, const_int_neg_1 ) );
        frame_guard.setLineNumber( 36 );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_os, IMPORT_MODULE( const_str_plain_os, ((PyModuleObject *)module_pafy)->md_dict, ((PyModuleObject *)module_pafy)->md_dict, Py_None, const_int_neg_1 ) );
        frame_guard.setLineNumber( 37 );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_sys, IMPORT_MODULE( const_str_plain_sys, ((PyModuleObject *)module_pafy)->md_dict, ((PyModuleObject *)module_pafy)->md_dict, Py_None, const_int_neg_1 ) );
        frame_guard.setLineNumber( 38 );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_time, IMPORT_MODULE( const_str_plain_time, ((PyModuleObject *)module_pafy)->md_dict, ((PyModuleObject *)module_pafy)->md_dict, Py_None, const_int_neg_1 ) );
        frame_guard.setLineNumber( 39 );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_json, IMPORT_MODULE( const_str_plain_json, ((PyModuleObject *)module_pafy)->md_dict, ((PyModuleObject *)module_pafy)->md_dict, Py_None, const_int_neg_1 ) );
        frame_guard.setLineNumber( 40 );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_logging, IMPORT_MODULE( const_str_plain_logging, ((PyModuleObject *)module_pafy)->md_dict, ((PyModuleObject *)module_pafy)->md_dict, Py_None, const_int_neg_1 ) );
        frame_guard.setLineNumber( 41 );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_hashlib, IMPORT_MODULE( const_str_plain_hashlib, ((PyModuleObject *)module_pafy)->md_dict, ((PyModuleObject *)module_pafy)->md_dict, Py_None, const_int_neg_1 ) );
        frame_guard.setLineNumber( 42 );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_tempfile, IMPORT_MODULE( const_str_plain_tempfile, ((PyModuleObject *)module_pafy)->md_dict, ((PyModuleObject *)module_pafy)->md_dict, Py_None, const_int_neg_1 ) );
        frame_guard.setLineNumber( 43 );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_ElementTree, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( const_str_digest_bc9f786ffde39557d4c9fa4921b10238, ((PyModuleObject *)module_pafy)->md_dict, ((PyModuleObject *)module_pafy)->md_dict, const_list_str_plain_ElementTree_list, const_int_neg_1 ) ).asObject0(), const_str_plain_ElementTree ) );
        frame_guard.setLineNumber( 46 );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_early_py_version, RICH_COMPARE_LT( PyObjectTemporary( LOOKUP_INDEX_SLICE( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_sys ), const_str_plain_version_info ) ).asObject0(), 0, 2 ) ).asObject0(), const_tuple_int_pos_2_int_pos_7_tuple ) );
        frame_guard.setLineNumber( 48 );
        if ( RICH_COMPARE_BOOL_GE( PyObjectTemporary( LOOKUP_INDEX_SLICE( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_sys ), const_str_plain_version_info ) ).asObject0(), 0, 2 ) ).asObject0(), const_tuple_int_pos_3_int_0_tuple ) )
        {
            frame_guard.setLineNumber( 50 );
            UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_build_opener, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( const_str_digest_b08c6262e7b8ac56ce2eba5384362fbe, ((PyModuleObject *)module_pafy)->md_dict, ((PyModuleObject *)module_pafy)->md_dict, const_list_str_plain_build_opener_list, const_int_neg_1 ) ).asObject0(), const_str_plain_build_opener ) );
            frame_guard.setLineNumber( 51 );
            UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_HTTPError, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( const_str_digest_eed4497c64beafc15e430bdc1f450b89, ((PyModuleObject *)module_pafy)->md_dict, ((PyModuleObject *)module_pafy)->md_dict, const_list_str_plain_HTTPError_str_plain_URLError_list, const_int_neg_1 ) ).asObject0(), const_str_plain_HTTPError ) );
            UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_URLError, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( const_str_digest_eed4497c64beafc15e430bdc1f450b89, ((PyModuleObject *)module_pafy)->md_dict, ((PyModuleObject *)module_pafy)->md_dict, const_list_str_plain_HTTPError_str_plain_URLError_list, const_int_neg_1 ) ).asObject0(), const_str_plain_URLError ) );
            frame_guard.setLineNumber( 52 );
            UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_parse_qs, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( const_str_digest_16d628fa9b79bd53ede39389589a2bbf, ((PyModuleObject *)module_pafy)->md_dict, ((PyModuleObject *)module_pafy)->md_dict, const_list_str_plain_parse_qs_str_plain_unquote_plus_list, const_int_neg_1 ) ).asObject0(), const_str_plain_parse_qs ) );
            UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_unquote_plus, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( const_str_digest_16d628fa9b79bd53ede39389589a2bbf, ((PyModuleObject *)module_pafy)->md_dict, ((PyModuleObject *)module_pafy)->md_dict, const_list_str_plain_parse_qs_str_plain_unquote_plus_list, const_int_neg_1 ) ).asObject0(), const_str_plain_unquote_plus ) );
            frame_guard.setLineNumber( 53 );
            PythonExceptionKeeper _caught_1;
#if PYTHON_VERSION < 300
            int _at_lineno_1 = 0;
#endif


            try
            {
                // Tried block:
                tmp_tuple_unpack_1__source_iter.assign1( MAKE_ITERATOR( PyObjectTemporary( MAKE_TUPLE2( LOOKUP_BUILTIN( const_str_plain_str ), const_int_pos_3 ) ).asObject0() ) );
                tmp_tuple_unpack_1__element_1.assign1( UNPACK_NEXT( tmp_tuple_unpack_1__source_iter.asObject0(), 0 ) );
                tmp_tuple_unpack_1__element_2.assign1( UNPACK_NEXT( tmp_tuple_unpack_1__source_iter.asObject0(), 1 ) );
                UNPACK_ITERATOR_CHECK( tmp_tuple_unpack_1__source_iter.asObject0(), 2 );
                UPDATE_STRING_DICT0( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_uni, tmp_tuple_unpack_1__element_1.asObject0() );
                UPDATE_STRING_DICT0( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_pyver, tmp_tuple_unpack_1__element_2.asObject0() );
            }
            catch ( PythonException &_exception )
            {
#if PYTHON_VERSION >= 300
                if ( !_exception.hasTraceback() )
                {
                    _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                }
                else
                {
                    _exception.addTraceback( frame_guard.getFrame0() );
                }
#else
                _at_lineno_1 = frame_guard.getLineNumber();
#endif

                _caught_1.save( _exception );

#if PYTHON_VERSION >= 300
                frame_guard.preserveExistingException();

                _exception.toExceptionHandler();
#endif
            }

            // Final block:
            tmp_tuple_unpack_1__source_iter.del( true );
            tmp_tuple_unpack_1__element_1.del( true );
            tmp_tuple_unpack_1__element_2.del( true );
#if PYTHON_VERSION < 300
            if ( _at_lineno_1 != 0 )
            {
               frame_guard.setLineNumber( _at_lineno_1 );
            }
#endif
            _caught_1.rethrow();
            // Final end
        }
        else
        {
            frame_guard.setLineNumber( 56 );
            UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_build_opener, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( const_str_plain_urllib2, ((PyModuleObject *)module_pafy)->md_dict, ((PyModuleObject *)module_pafy)->md_dict, const_list_d6a6955f851042b9db4988039e54dcad_list, const_int_neg_1 ) ).asObject0(), const_str_plain_build_opener ) );
            UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_HTTPError, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( const_str_plain_urllib2, ((PyModuleObject *)module_pafy)->md_dict, ((PyModuleObject *)module_pafy)->md_dict, const_list_d6a6955f851042b9db4988039e54dcad_list, const_int_neg_1 ) ).asObject0(), const_str_plain_HTTPError ) );
            UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_URLError, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( const_str_plain_urllib2, ((PyModuleObject *)module_pafy)->md_dict, ((PyModuleObject *)module_pafy)->md_dict, const_list_d6a6955f851042b9db4988039e54dcad_list, const_int_neg_1 ) ).asObject0(), const_str_plain_URLError ) );
            frame_guard.setLineNumber( 57 );
            UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_unquote_plus, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( const_str_plain_urllib, ((PyModuleObject *)module_pafy)->md_dict, ((PyModuleObject *)module_pafy)->md_dict, const_list_str_plain_unquote_plus_list, const_int_neg_1 ) ).asObject0(), const_str_plain_unquote_plus ) );
            frame_guard.setLineNumber( 58 );
            UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_parse_qs, IMPORT_NAME( PyObjectTemporary( IMPORT_MODULE( const_str_plain_urlparse, ((PyModuleObject *)module_pafy)->md_dict, ((PyModuleObject *)module_pafy)->md_dict, const_list_str_plain_parse_qs_list, const_int_neg_1 ) ).asObject0(), const_str_plain_parse_qs ) );
            frame_guard.setLineNumber( 59 );
            PythonExceptionKeeper _caught_2;
#if PYTHON_VERSION < 300
            int _at_lineno_2 = 0;
#endif


            try
            {
                // Tried block:
                tmp_tuple_unpack_2__source_iter.assign1( MAKE_ITERATOR( PyObjectTemporary( MAKE_TUPLE2( LOOKUP_BUILTIN( const_str_plain_unicode ), const_int_pos_2 ) ).asObject0() ) );
                tmp_tuple_unpack_2__element_1.assign1( UNPACK_NEXT( tmp_tuple_unpack_2__source_iter.asObject0(), 0 ) );
                tmp_tuple_unpack_2__element_2.assign1( UNPACK_NEXT( tmp_tuple_unpack_2__source_iter.asObject0(), 1 ) );
                UNPACK_ITERATOR_CHECK( tmp_tuple_unpack_2__source_iter.asObject0(), 2 );
                UPDATE_STRING_DICT0( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_uni, tmp_tuple_unpack_2__element_1.asObject0() );
                UPDATE_STRING_DICT0( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_pyver, tmp_tuple_unpack_2__element_2.asObject0() );
            }
            catch ( PythonException &_exception )
            {
#if PYTHON_VERSION >= 300
                if ( !_exception.hasTraceback() )
                {
                    _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
                }
                else
                {
                    _exception.addTraceback( frame_guard.getFrame0() );
                }
#else
                _at_lineno_2 = frame_guard.getLineNumber();
#endif

                _caught_2.save( _exception );

#if PYTHON_VERSION >= 300
                frame_guard.preserveExistingException();

                _exception.toExceptionHandler();
#endif
            }

            // Final block:
            tmp_tuple_unpack_2__source_iter.del( true );
            tmp_tuple_unpack_2__element_1.del( true );
            tmp_tuple_unpack_2__element_2.del( true );
#if PYTHON_VERSION < 300
            if ( _at_lineno_2 != 0 )
            {
               frame_guard.setLineNumber( _at_lineno_2 );
            }
#endif
            _caught_2.rethrow();
            // Final end
        }
        frame_guard.setLineNumber( 62 );
        if ( RICH_COMPARE_BOOL_EQ( PyObjectTemporary( CALL_FUNCTION_WITH_ARGS1( PyObjectTemporary( LOOKUP_ATTRIBUTE( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_os ), const_str_plain_environ ) ).asObject0(), const_str_plain_get ) ).asObject0(), const_unicode_plain_pafydebug ) ).asObject0(), const_unicode_plain_1 ) )
        {
            frame_guard.setLineNumber( 63 );
            {
                PyObjectTempKeeper1 call1;
                DECREASE_REFCOUNT( ( call1.assign( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_logging ), const_str_plain_basicConfig ) ), CALL_FUNCTION( call1.asObject0(), const_tuple_empty, PyObjectTemporary( MAKE_DICT1( PyObjectTemporary( LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_logging ), const_str_plain_DEBUG ) ).asObject0(), const_str_plain_level ) ).asObject0() ) ) );
            }
        }
        frame_guard.setLineNumber( 65 );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_dbg, LOOKUP_ATTRIBUTE( GET_MODULE_VALUE0( const_str_plain_logging ), const_str_plain_debug ) );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_parseqs, MAKE_FUNCTION_function_1_parseqs_of_module_pafy(  ) );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_fetch_decode, MAKE_FUNCTION_function_2_fetch_decode_of_module_pafy(  ) );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_new, MAKE_FUNCTION_function_4_new_of_module_pafy( MAKE_TUPLE5( Py_True, Py_False, Py_True, Py_False, PyObjectTemporary( MAKE_FUNCTION_lambda_3_lambda_of_module_pafy(  ) ).asObject0() ) ) );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_get_video_info, MAKE_FUNCTION_function_5_get_video_info_of_module_pafy(  ) );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_get_video_gdata, MAKE_FUNCTION_function_6_get_video_gdata_of_module_pafy(  ) );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_extract_video_id, MAKE_FUNCTION_function_7_extract_video_id_of_module_pafy(  ) );
        frame_guard.setLineNumber( 181 );
        PyObjectTemporaryWithDel tmp_class_creation_1__bases( MAKE_TUPLE1( LOOKUP_BUILTIN( const_str_plain_object ) ) );
        PyObjectTemporaryWithDel tmp_class_creation_1__class_dict( impl_class_8_g_of_module_pafy(  ) );
        PyObjectTemporaryWithDel tmp_class_creation_1__metaclass( ( SEQUENCE_CONTAINS_BOOL( const_str_plain___metaclass__, tmp_class_creation_1__class_dict.asObject0() ) ? DICT_GET_ITEM( tmp_class_creation_1__class_dict.asObject0(), const_str_plain___metaclass__ ) : SELECT_METACLASS( tmp_class_creation_1__bases.asObject0(), GET_STRING_DICT_VALUE( moduledict_pafy, (Nuitka_StringObject *)const_str_plain___metaclass__ ) ) ) );
        PyObject *_tmp_class_creation_1__class;
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper0 call2;
            _tmp_class_creation_1__class = ( call1.assign( tmp_class_creation_1__metaclass.asObject0() ), call2.assign( tmp_class_creation_1__bases.asObject0() ), CALL_FUNCTION_WITH_ARGS3( call1.asObject0(), const_str_plain_g, call2.asObject0(), tmp_class_creation_1__class_dict.asObject0() ) );
        }
        PyObjectTemporaryWithDel tmp_class_creation_1__class( _tmp_class_creation_1__class );
        tmp_class_creation_1__bases.del( false );
        tmp_class_creation_1__class_dict.del( false );
        tmp_class_creation_1__metaclass.del( false );
        UPDATE_STRING_DICT0( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_g, tmp_class_creation_1__class.asObject0() );
        tmp_class_creation_1__class.del( false );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain__extract_smap, MAKE_FUNCTION_function_9__extract_smap_of_module_pafy(  ) );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain__extract_dash, MAKE_FUNCTION_function_10__extract_dash_of_module_pafy(  ) );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain__extract_function_from_js, MAKE_FUNCTION_function_11__extract_function_from_js_of_module_pafy(  ) );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain__extract_dictfunc_from_js, MAKE_FUNCTION_function_12__extract_dictfunc_from_js_of_module_pafy(  ) );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain__get_mainfunc_from_js, MAKE_FUNCTION_function_13__get_mainfunc_from_js_of_module_pafy(  ) );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain__get_other_funcs, MAKE_FUNCTION_function_14__get_other_funcs_of_module_pafy(  ) );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain__getval, MAKE_FUNCTION_function_15__getval_of_module_pafy(  ) );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain__get_func_from_call, MAKE_FUNCTION_function_16__get_func_from_call_of_module_pafy(  ) );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain__solve, MAKE_FUNCTION_function_17__solve_of_module_pafy(  ) );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain__decodesig, MAKE_FUNCTION_function_18__decodesig_of_module_pafy(  ) );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_remux, MAKE_FUNCTION_function_19_remux_of_module_pafy(  ) );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_fetch_cached, MAKE_FUNCTION_function_20_fetch_cached_of_module_pafy(  ) );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_prune_files, MAKE_FUNCTION_function_21_prune_files_of_module_pafy(  ) );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_get_js_sm, MAKE_FUNCTION_function_22_get_js_sm_of_module_pafy(  ) );
        UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain__make_url, MAKE_FUNCTION_function_23__make_url_of_module_pafy(  ) );
        frame_guard.setLineNumber( 706 );
        PyObjectTemporaryWithDel tmp_class_creation_2__bases( MAKE_TUPLE1( LOOKUP_BUILTIN( const_str_plain_object ) ) );
        PyObjectTemporaryWithDel tmp_class_creation_2__class_dict( impl_class_24_Stream_of_module_pafy(  ) );
        PyObjectTemporaryWithDel tmp_class_creation_2__metaclass( ( SEQUENCE_CONTAINS_BOOL( const_str_plain___metaclass__, tmp_class_creation_2__class_dict.asObject0() ) ? DICT_GET_ITEM( tmp_class_creation_2__class_dict.asObject0(), const_str_plain___metaclass__ ) : SELECT_METACLASS( tmp_class_creation_2__bases.asObject0(), GET_STRING_DICT_VALUE( moduledict_pafy, (Nuitka_StringObject *)const_str_plain___metaclass__ ) ) ) );
        PyObject *_tmp_class_creation_2__class;
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper0 call2;
            _tmp_class_creation_2__class = ( call1.assign( tmp_class_creation_2__metaclass.asObject0() ), call2.assign( tmp_class_creation_2__bases.asObject0() ), CALL_FUNCTION_WITH_ARGS3( call1.asObject0(), const_str_plain_Stream, call2.asObject0(), tmp_class_creation_2__class_dict.asObject0() ) );
        }
        PyObjectTemporaryWithDel tmp_class_creation_2__class( _tmp_class_creation_2__class );
        tmp_class_creation_2__bases.del( false );
        tmp_class_creation_2__class_dict.del( false );
        tmp_class_creation_2__metaclass.del( false );
        UPDATE_STRING_DICT0( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_Stream, tmp_class_creation_2__class.asObject0() );
        tmp_class_creation_2__class.del( false );
        frame_guard.setLineNumber( 994 );
        PyObjectTemporaryWithDel tmp_class_creation_3__bases( MAKE_TUPLE1( LOOKUP_BUILTIN( const_str_plain_object ) ) );
        PyObjectTemporaryWithDel tmp_class_creation_3__class_dict( impl_class_25_Pafy_of_module_pafy(  ) );
        PyObjectTemporaryWithDel tmp_class_creation_3__metaclass( ( SEQUENCE_CONTAINS_BOOL( const_str_plain___metaclass__, tmp_class_creation_3__class_dict.asObject0() ) ? DICT_GET_ITEM( tmp_class_creation_3__class_dict.asObject0(), const_str_plain___metaclass__ ) : SELECT_METACLASS( tmp_class_creation_3__bases.asObject0(), GET_STRING_DICT_VALUE( moduledict_pafy, (Nuitka_StringObject *)const_str_plain___metaclass__ ) ) ) );
        PyObject *_tmp_class_creation_3__class;
        {
            PyObjectTempKeeper0 call1;
            PyObjectTempKeeper0 call2;
            _tmp_class_creation_3__class = ( call1.assign( tmp_class_creation_3__metaclass.asObject0() ), call2.assign( tmp_class_creation_3__bases.asObject0() ), CALL_FUNCTION_WITH_ARGS3( call1.asObject0(), const_str_plain_Pafy, call2.asObject0(), tmp_class_creation_3__class_dict.asObject0() ) );
        }
        PyObjectTemporaryWithDel tmp_class_creation_3__class( _tmp_class_creation_3__class );
        tmp_class_creation_3__bases.del( false );
        tmp_class_creation_3__class_dict.del( false );
        tmp_class_creation_3__metaclass.del( false );
        UPDATE_STRING_DICT0( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_Pafy, tmp_class_creation_3__class.asObject0() );
        tmp_class_creation_3__class.del( false );
    }
    catch ( PythonException &_exception )
    {
        if ( !_exception.hasTraceback() )
        {
            _exception.setTraceback( MAKE_TRACEBACK( frame_guard.getFrame() ) );
        }
        else
        {
            _exception.addTraceback( frame_guard.getFrame0() );
        }

#if 0
    // TODO: Recognize the need for it
        Py_XDECREF( frame_guard.getFrame0()->f_locals );
        frame_guard.getFrame0()->f_locals = INCREASE_REFCOUNT( ((PyModuleObject *)module_pafy)->md_dict );
#endif

        // Return the error.
        _exception.toPython();
        return MOD_RETURN_VALUE( NULL );
    }
    UPDATE_STRING_DICT1( moduledict_pafy, (Nuitka_StringObject *)const_str_plain_get_playlist, MAKE_FUNCTION_function_27_get_playlist_of_module_pafy( MAKE_TUPLE5( Py_False, Py_False, Py_True, Py_False, PyObjectTemporary( MAKE_FUNCTION_lambda_26_lambda_of_module_pafy(  ) ).asObject0() ) ) );

   return MOD_RETURN_VALUE( module_pafy );
}
